<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>付文杰的博客</title>
  
  <subtitle>个人博客  |  日常</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://FWj1635387072.github.io/"/>
  <updated>2021-04-28T12:47:29.951Z</updated>
  <id>https://FWj1635387072.github.io/</id>
  
  <author>
    <name>付文杰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringMVC02</title>
    <link href="https://FWj1635387072.github.io/2021/04/28/SpringMVC02/"/>
    <id>https://FWj1635387072.github.io/2021/04/28/SpringMVC02/</id>
    <published>2021-04-28T09:35:36.953Z</published>
    <updated>2021-04-28T12:47:29.951Z</updated>
    
    <content type="html"><![CDATA[<p> SpringMVC学习笔记2</p><a id="more"></a><h1 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h1><p>@RequestMapping(“/handle”)一个请求只能对应一个方法。</p><p>类前加@RequestMapping，对整个类的方法加一个基准路径</p><table><thead><tr><th align="center">参数</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">method</td><td align="center">限定方法请求方式</td></tr><tr><td align="center">params</td><td align="center">限定请求参数</td></tr><tr><td align="center">header</td><td align="center">规定请求头（例如允许xx浏览器访问）</td></tr></tbody></table><h1 id="ant模糊匹配"><a href="#ant模糊匹配" class="headerlink" title="ant模糊匹配"></a>ant模糊匹配</h1><p><code>?</code>：替代任意一个字符</p><p><code>*</code>：替代多个字符和一层路径</p><p><code>**</code>t替代多层路径</p><h1 id="PathVariable-“”"><a href="#PathVariable-“”" class="headerlink" title="@PathVariable(“”)"></a>@PathVariable(“”)</h1><p>支持rest风格（资源表现层状态转换），路径上可以有占位符</p><p>Rest风格：/book/id，相同的路径，通过不同的提交方法（get、post、put、delete等），来实现增删改查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"hh"</span>)</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestControler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在处理"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/handle1"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"get请求已处理。"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/handle2"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Post请求已处理"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"handle1?"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle111</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"handle1?"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"handle1*"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle11123</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"handle1*"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPar</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String id) </span>&#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"book/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBook</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String id) </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询"</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"book/&#123;id&#125;"</span>, method = RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleBook</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String id) </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除"</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"book/&#123;id&#125;"</span>, method = RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateBook</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String id) </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"更新 "</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"book/&#123;id&#125;"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addBook</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String id) </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"增加"</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href="hh/hello"&gt;hello&lt;/a&gt;</span><br><span class="line">&lt;form method=<span class="string">"get"</span> action=<span class="string">"hh/handle1"</span>&gt;</span><br><span class="line">   &lt;input type=<span class="string">"submit"</span> value=<span class="string">"get请求"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=<span class="string">"post"</span> , action=<span class="string">"hh/handle2"</span>&gt;</span><br><span class="line">   &lt;input type=<span class="string">"submit"</span> value=<span class="string">"post请求"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href="hh/handle12"&gt; handle12&lt;/a&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;a href="hh/handle122222"&gt;handle12222&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;a href="hh/user/asdas"&gt;getPathVariable&lt;/a&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;form action=<span class="string">"hh/book/1"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">   &lt;input type=<span class="string">"submit"</span> value=<span class="string">"增加book"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;form action=<span class="string">"hh/book/1"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">   &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"_method"</span> value=<span class="string">"delete"</span>&gt;</span><br><span class="line">   &lt;input type=<span class="string">"submit"</span> value=<span class="string">"删除book"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;form action=<span class="string">"hh/book/1"</span> method=<span class="string">"get"</span>&gt;</span><br><span class="line">   &lt;input type=<span class="string">"submit"</span> value=<span class="string">"查询book"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;form action=<span class="string">"hh/book/1"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">   &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"_method"</span> value=<span class="string">"put"</span>&gt;</span><br><span class="line">   &lt;input type=<span class="string">"submit"</span> value=<span class="string">"修改book"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; SpringMVC学习笔记2&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://FWj1635387072.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="学习" scheme="https://FWj1635387072.github.io/categories/%E6%A1%86%E6%9E%B6/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SpringMVC" scheme="https://FWj1635387072.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring_05</title>
    <link href="https://FWj1635387072.github.io/2021/04/28/Spring_05/"/>
    <id>https://FWj1635387072.github.io/2021/04/28/Spring_05/</id>
    <published>2021-04-28T08:36:56.878Z</published>
    <updated>2021-04-28T08:54:22.538Z</updated>
    
    <content type="html"><![CDATA[<p>  总结一下Spring中的一些点。</p><a id="more"></a><h1 id="Spring案例"><a href="#Spring案例" class="headerlink" title="Spring案例"></a>Spring案例</h1><h2 id="声明配置类"><a href="#声明配置类" class="headerlink" title="声明配置类"></a>声明配置类</h2><p>使用德鲁伊连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>：声明配置信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ComponentScan</span>(basePackages = "com.fwj")：声明扫描的包</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@EnableTransactionManagement</span>：声明事务管理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Bean</span>：声明对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"com.fwj"</span>)</span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">getDruidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource source = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        source.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        source.setUrl(<span class="string">"jdbc:mysql:///account"</span>);</span><br><span class="line">        source.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        source.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        JdbcTemplate temp = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">        temp.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">getDatasourceTrancationManager</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        DataSourceTransactionManager transactionManager = <span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Repository</span>：声明该类为Dao层的类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Resource</span>：自动装配类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate dao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"update useraccount set money = money + 100 where id = ?"</span>;</span><br><span class="line">        <span class="keyword">int</span> res = dao.update(sql, <span class="string">"1"</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decreaseMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"update useraccount set money = money - 100 where id = ?"</span>;</span><br><span class="line">        <span class="keyword">int</span> res = dao.update(sql, <span class="string">"2"</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Service</span>：声明该类为Service层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Transactional</span>：声明事务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trans</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dao.addMoney();</span><br><span class="line">        dao.decreaseMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAccount</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//加载配置类</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span></span><br><span class="line">                AnnotationConfigApplicationContext(SpringConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        AccountService service = context.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        service.trans();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  总结一下Spring中的一些点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://FWj1635387072.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="学习" scheme="https://FWj1635387072.github.io/categories/%E6%A1%86%E6%9E%B6/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring" scheme="https://FWj1635387072.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC01</title>
    <link href="https://FWj1635387072.github.io/2021/04/26/SpringMVC01/"/>
    <id>https://FWj1635387072.github.io/2021/04/26/SpringMVC01/</id>
    <published>2021-04-26T13:02:52.918Z</published>
    <updated>2021-04-28T09:35:34.214Z</updated>
    
    <content type="html"><![CDATA[<p> SpringMVC学习笔记1</p><a id="more"></a><h1 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h1><h2 id="新建SpringMVC项目。"><a href="#新建SpringMVC项目。" class="headerlink" title="新建SpringMVC项目。"></a>新建SpringMVC项目。</h2><p><img src="/2021/04/26/SpringMVC01/image-20210428165532187.png" alt="image-20210428165532187"></p><h2 id="配置idea"><a href="#配置idea" class="headerlink" title="配置idea"></a>配置idea</h2><p><img src="/2021/04/26/SpringMVC01/image-20210428170421763.png" alt="image-20210428170421763"></p><h2 id="配置tomcat"><a href="#配置tomcat" class="headerlink" title="配置tomcat"></a>配置tomcat</h2><p><img src="/2021/04/26/SpringMVC01/image-20210428170545706.png" alt="image-20210428170545706"></p><h2 id="改一下web-xml中的信息"><a href="#改一下web-xml中的信息" class="headerlink" title="改一下web.xml中的信息"></a>改一下web.xml中的信息</h2><p><img src="/2021/04/26/SpringMVC01/image-20210428170924313.png" alt="image-20210428170924313"></p><h2 id="增加一些代码"><a href="#增加一些代码" class="headerlink" title="增加一些代码"></a>增加一些代码</h2><p>在index.jsp中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"hello"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建pages/success.jsp</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>任意创建一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestContorller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"成功！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在dispatcher-servlet.xml中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.fwj"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动Tomcat，点击Hello,进入了success界面</p><p><img src="/2021/04/26/SpringMVC01/image-20210428172752178.png" alt="image-20210428172752178">)<img src="/2021/04/26/SpringMVC01/image-20210428173438487.png" alt="image-20210428173438487"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; SpringMVC学习笔记1&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://FWj1635387072.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="学习" scheme="https://FWj1635387072.github.io/categories/%E6%A1%86%E6%9E%B6/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SpringMVC" scheme="https://FWj1635387072.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>hadoop</title>
    <link href="https://FWj1635387072.github.io/2021/04/21/hadoop/"/>
    <id>https://FWj1635387072.github.io/2021/04/21/hadoop/</id>
    <published>2021-04-21T11:40:04.954Z</published>
    <updated>2021-04-21T11:52:11.676Z</updated>
    
    <content type="html"><![CDATA[<p>输出路径是不能存在的。</p><h2 id="完全分布式运行模式"><a href="#完全分布式运行模式" class="headerlink" title="完全分布式运行模式"></a>完全分布式运行模式</h2><ol><li>三台客户机（关闭防火墙，静态ip，主机名称）</li><li>安装JDK</li><li>配置环境变量</li><li>安装Hadoop</li><li>配置环境变量</li><li>配置集群</li><li>单点启动</li><li>配置ssh</li><li>群起并测试集群</li></ol><h3 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h3><p>1、推数据</p><p>2、拉数据</p><p>3、在103上把102上的数据拷贝到104</p><h3 id="rsync远程同步"><a href="#rsync远程同步" class="headerlink" title="rsync远程同步"></a>rsync远程同步</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;输出路径是不能存在的。&lt;/p&gt;
&lt;h2 id=&quot;完全分布式运行模式&quot;&gt;&lt;a href=&quot;#完全分布式运行模式&quot; class=&quot;headerlink&quot; title=&quot;完全分布式运行模式&quot;&gt;&lt;/a&gt;完全分布式运行模式&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;三台客户机（关闭防火墙，静态ip，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Idea</title>
    <link href="https://FWj1635387072.github.io/2021/04/20/Idea/"/>
    <id>https://FWj1635387072.github.io/2021/04/20/Idea/</id>
    <published>2021-04-20T10:02:47.236Z</published>
    <updated>2021-04-20T11:45:42.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h1><table><thead><tr><th align="center">快捷键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>ctrl + e</code></td><td align="center">最近浏览/编辑的文件</td></tr><tr><td align="center"><code>ctrl + shift + a</code></td><td align="center">搜索action</td></tr><tr><td align="center"><code>ctrl + shift + 回退</code></td><td align="center">定位到上一次修改的位置</td></tr><tr><td align="center"><code>alt + ctrl + 左右</code></td><td align="center">跳转浏览过的文件</td></tr><tr><td align="center"><code>ctrl + f11</code></td><td align="center">书签</td></tr><tr><td align="center"><code>ctrl + 数字</code></td><td align="center">跳转书签的位置</td></tr><tr><td align="center"><code>alt + shift + f</code></td><td align="center">收藏类</td></tr><tr><td align="center"><code>ctrl + j</code>再按找的首字母</td><td align="center">用ecam插件</td></tr><tr><td align="center"><code>alt + 1</code></td><td align="center">切换到编辑区</td></tr><tr><td align="center"><code>esc</code></td><td align="center">返回代码区</td></tr></tbody></table><h1 id="精准搜索"><a href="#精准搜索" class="headerlink" title="精准搜索"></a>精准搜索</h1><p>找类、文件、函数</p><table><thead><tr><th align="center">快捷键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">搜索类</td><td align="center"><code>ctrl + N</code></td></tr><tr><td align="center">搜素全部（包括jar中的类），非当前文件</td><td align="center">两次<code>ctrl + N</code></td></tr><tr><td align="center">搜索文件</td><td align="center"><code>ctrl  + alt + N</code></td></tr><tr><td align="center">搜索函数、变量</td><td align="center"><code>ctrl + shift + alt + N</code></td></tr><tr><td align="center">搜索字符串</td><td align="center"><code>ctrl + shift + F</code></td></tr></tbody></table><h1 id="代码小助手"><a href="#代码小助手" class="headerlink" title="代码小助手"></a>代码小助手</h1><p>列操作</p><table><thead><tr><th align="center">快捷键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>ctrl + shift + u</code></td><td align="center">大小写切换</td></tr><tr><td align="center"><code>ctrl + shift + alt + f</code></td><td align="center">选择所有相同的字符</td></tr><tr><td align="center"><code>number.fori</code></td><td align="center">自己写for循环，number为i的取值</td></tr><tr><td align="center">name.filed</td><td align="center">自动在类中创建name属性，并把name传给定义好的</td></tr></tbody></table><h1 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h1><p>重构变量：<code>shift + F6</code></p><p>重构方法：<code>ctrl + F6</code></p><p>抽取变量：<code>alt + command + v</code></p><p>抽取静态变量：<code>alt + command + c</code></p><p>抽取成员变量：<code>alt + command + f</code></p><p>抽取方法变量：<code>alt + command + b</code></p><p>抽取方法：<code>alt + command + M</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;跳转&quot;&gt;&lt;a href=&quot;#跳转&quot; class=&quot;headerlink&quot; title=&quot;跳转&quot;&gt;&lt;/a&gt;跳转&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;快捷键&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;功能&lt;/t
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>matplotlib_2</title>
    <link href="https://FWj1635387072.github.io/2021/04/06/matplotlib_2/"/>
    <id>https://FWj1635387072.github.io/2021/04/06/matplotlib_2/</id>
    <published>2021-04-06T11:39:08.561Z</published>
    <updated>2021-04-06T11:40:59.516Z</updated>
    
    <content type="html"><![CDATA[<p> matplotlib学习记录2</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-3</span>,<span class="number">3</span>,<span class="number">60</span>)</span><br><span class="line">y1 = <span class="number">2</span>*x+<span class="number">1</span></span><br><span class="line">y2 = x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.xlim((<span class="number">-1</span>,<span class="number">2</span>))</span><br><span class="line">plt.ylim((<span class="number">-2</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">new_sticks = np.linspace(<span class="number">-1</span>,<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">plt.xticks(new_sticks)</span><br><span class="line">plt.yticks([<span class="number">-2</span>, <span class="number">-1.8</span>, <span class="number">-1</span>, <span class="number">1.22</span>, <span class="number">3</span>],</span><br><span class="line">           [<span class="string">r'$really\ bad$'</span>, <span class="string">r'$bad$'</span>, <span class="string">r'$normal$'</span>, <span class="string">r'$good$'</span>, <span class="string">r'$really\ good$'</span>])</span><br><span class="line">l1 = plt.plot(x, y1, label=<span class="string">'linear line'</span>)</span><br><span class="line">l2 = plt.plot(x, y2, color=<span class="string">'red'</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">'--'</span>, label=<span class="string">'square line'</span>)</span><br><span class="line">plt.legend()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.legend.Legend at 0x7fc7618c0640&gt;</code></pre><p>​<br><img src="/2021/04/06/matplotlib_2/output_0_1.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">-3</span>,<span class="number">3</span>,<span class="number">50</span>)</span><br><span class="line">y = <span class="number">2</span>*x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">plt.figure(num=<span class="number">1</span>,figsize=(<span class="number">8</span>,<span class="number">5</span>))</span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</span><br><span class="line">plt.plot(x,y)</span><br><span class="line"><span class="comment">#标注</span></span><br><span class="line">x0 = <span class="number">1</span></span><br><span class="line">y0 = <span class="number">2</span>*x0 + <span class="number">1</span></span><br><span class="line">plt.plot([x0,x0],[<span class="number">0</span>,y0],linestyle=<span class="string">'--'</span>,linewidth=<span class="number">1.5</span>,color =<span class="string">'red'</span>)</span><br><span class="line">plt.scatter(x0,y0,s=<span class="number">40</span>,color=<span class="string">'b'</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.collections.PathCollection at 0x7fc761566fd0&gt;</code></pre><p>​<br><img src="/2021/04/06/matplotlib_2/output_1_1.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">n = <span class="number">1024</span></span><br><span class="line">x = np.random.normal(<span class="number">0</span>,<span class="number">1</span>,n)</span><br><span class="line">y = np.random.normal(<span class="number">0</span>,<span class="number">1</span>,n)</span><br><span class="line">T = np.arctan2(x,y)</span><br><span class="line">plt.scatter(x,y,c=T,alpha=<span class="number">.5</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.collections.PathCollection at 0x7fc75eed38b0&gt;</code></pre><p>​<br><img src="/2021/04/06/matplotlib_2/output_2_1.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">12</span></span><br><span class="line">x = np.arange(n)</span><br><span class="line">y1 = (<span class="number">1</span>-x/float(n)) * np.random.uniform(<span class="number">0.5</span>,<span class="number">1.0</span>,n)</span><br><span class="line">y2 = (<span class="number">1</span>-x/float(n)) * np.random.uniform(<span class="number">0.5</span>,<span class="number">1.0</span>,n)</span><br><span class="line"></span><br><span class="line">plt.bar(x,y1)</span><br><span class="line">plt.bar(x,-y2)</span><br><span class="line"></span><br><span class="line">plt.xlim(<span class="number">-.5</span>,n)</span><br><span class="line">plt.ylim(<span class="number">-1.5</span>,<span class="number">1.5</span>)</span><br></pre></td></tr></table></figure><pre><code>(-1.5, 1.5)</code></pre><p>​<br><img src="/2021/04/06/matplotlib_2/output_3_1.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>-x/<span class="number">2</span>+x**<span class="number">5</span> + y**<span class="number">3</span>) * np.exp(-x**<span class="number">2</span> -y**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">256</span></span><br><span class="line">x = np.linspace(<span class="number">-3</span>,<span class="number">3</span>,n)</span><br><span class="line">y = np.linspace(<span class="number">-3</span>,<span class="number">3</span>,n)</span><br><span class="line">x,y = np.meshgrid(x,y)</span><br><span class="line">plt.contourf(x,y,f(x,y),<span class="number">8</span>,alpha=<span class="number">.75</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.contour.QuadContourSet at 0x7fc75ee5d970&gt;</code></pre><p>​<br><img src="/2021/04/06/matplotlib_2/output_4_1.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.title(<span class="string">'111'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">222</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.title(<span class="string">'111'</span>)</span><br><span class="line">plt.subplot(<span class="number">223</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">224</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x7fc75658d8e0&gt;]</code></pre><p>​<br><img src="/2021/04/06/matplotlib_2/output_5_1.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">235</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">236</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">plt.show()  <span class="comment"># 展示</span></span><br></pre></td></tr></table></figure><p>​<br><img src="/2021/04/06/matplotlib_2/output_6_0.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">6</span>))</span><br><span class="line">ax1 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">0</span>, <span class="number">0</span>), colspan=<span class="number">3</span>)</span><br><span class="line">ax1.plot([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>])    <span class="comment"># 画小图</span></span><br><span class="line">ax1.set_title(<span class="string">'ax1_title'</span>)  <span class="comment"># 设置小图的标题</span></span><br><span class="line">ax2 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">0</span>), colspan=<span class="number">2</span>)</span><br><span class="line">ax3 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">2</span>), rowspan=<span class="number">2</span>)</span><br><span class="line">ax4 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">0</span>))</span><br><span class="line">ax5 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">1</span>))</span><br><span class="line">ax4.scatter([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">ax4.set_xlabel(<span class="string">'ax4_x'</span>)</span><br><span class="line">ax4.set_ylabel(<span class="string">'ax4_y'</span>)</span><br></pre></td></tr></table></figure><pre><code>Text(0.5, 1.0, &apos;asd&apos;)</code></pre><p>​<br><img src="/2021/04/06/matplotlib_2/output_7_1.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gsc</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">gs = gsc.GridSpec(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">ax6 = plt.subplot(gs[<span class="number">0</span>,:])</span><br><span class="line">ax7 = plt.subplot(gs[<span class="number">1</span>,:<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>​<br><img src="/2021/04/06/matplotlib_2/output_8_0.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = Axes3D(fig)</span><br></pre></td></tr></table></figure><pre><code>&lt;ipython-input-65-724398538dc5&gt;:6: MatplotlibDeprecationWarning: Axes3D(fig) adding itself to the figure is deprecated since 3.4. Pass the keyword argument auto_add_to_figure=False and use fig.add_axes(ax) to suppress this warning. The default value of auto_add_to_figure will change to False in mpl3.5 and True values will no longer work in 3.6.  This is consistent with other Axes classes.  ax = Axes3D(fig)</code></pre><p><img src="/2021/04/06/matplotlib_2/output_9_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; matplotlib学习记录2&lt;/p&gt;
    
    </summary>
    
    
      <category term="Pythons" scheme="https://FWj1635387072.github.io/categories/Pythons/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="https://FWj1635387072.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib_1</title>
    <link href="https://FWj1635387072.github.io/2021/04/06/matplotlib_1/"/>
    <id>https://FWj1635387072.github.io/2021/04/06/matplotlib_1/</id>
    <published>2021-04-06T11:36:03.655Z</published>
    <updated>2021-04-06T11:40:53.495Z</updated>
    
    <content type="html"><![CDATA[<p>matplotlib学习记录1</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">fig,ax = plt.subplots()</span><br><span class="line">ax.plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,],[<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p><img src="/2021/04/06/matplotlib_1/output_0_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,],[<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,])</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x7f658cd41d50&gt;]</code></pre><p>​<br><img src="/2021/04/06/matplotlib_1/output_1_1.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>,<span class="number">2</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x,x,label=<span class="string">'linear'</span>)</span><br><span class="line">plt.plot(x,x**<span class="number">2</span>,label=<span class="string">'quadratic'</span>)</span><br><span class="line">plt.plot(x,x**<span class="number">3</span>,label=<span class="string">'cubic'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x label'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y label'</span>)</span><br><span class="line">plt.title(<span class="string">'Simple Plot'</span>)</span><br><span class="line">plt.legend()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.legend.Legend at 0x7f658c833350&gt;</code></pre><p>​<br><img src="/2021/04/06/matplotlib_1/output_2_1.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#创建Figure实例</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line"><span class="comment">#Firgure实例创建绘图区</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment">#Axes对象画曲线</span></span><br><span class="line">t = np.arange(<span class="number">0.0</span>,<span class="number">1.0</span>,<span class="number">0.01</span>)</span><br><span class="line">s = np.sin(<span class="number">2</span>*np.pi*t)</span><br><span class="line">line,=ax.plot(t,s,color=<span class="string">'blue'</span>,lw=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>​<br><img src="/2021/04/06/matplotlib_1/output_3_0.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">data = pd.read_excel(<span class="string">'data/data.xlsx'</span>)</span><br><span class="line">data1 = data[[<span class="string">'年份_1'</span>,<span class="string">'上网用户数（万人）'</span>]]</span><br><span class="line">t = data1[<span class="string">'年份_1'</span>]</span><br><span class="line">s = data1[<span class="string">'上网用户数（万人）'</span>]/<span class="number">100000</span></span><br><span class="line">plt.xlabel(<span class="string">'year'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'num(billion)'</span>)</span><br><span class="line">plt.title(<span class="string">'The Number of People Using the Internet'</span>)</span><br><span class="line">plt.xticks(np.linspace(<span class="number">1998</span>,<span class="number">2020</span>,<span class="number">12</span>),rotation=<span class="number">60</span>)</span><br><span class="line">plt.yticks(np.linspace(<span class="number">0</span>,<span class="number">0.9</span>,<span class="number">10</span>))</span><br><span class="line">plt.grid(linestyle=<span class="string">'--'</span>)</span><br><span class="line">plt.plot(t,s)</span><br><span class="line">plt.scatter(t,s)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.collections.PathCollection at 0x7ff0195b3850&gt;</code></pre><p>​<br><img src="/2021/04/06/matplotlib_1/output_4_1.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, <span class="number">50</span>)</span><br><span class="line">y1 = <span class="number">2</span>*x + <span class="number">1</span></span><br><span class="line">y2 = x**<span class="number">2</span></span><br><span class="line">plt.figure(num=<span class="number">3</span>,figsize=(<span class="number">8</span>,<span class="number">5</span>))</span><br><span class="line">plt.plot(x,y2)</span><br><span class="line">plt.plot(x,y1,color=<span class="string">'red'</span>,linewidth=<span class="number">1.0</span>,linestyle=<span class="string">'--'</span>)</span><br><span class="line">plt.xlim((<span class="number">-1</span>,<span class="number">2</span>))</span><br><span class="line">plt.ylim((<span class="number">-2</span>,<span class="number">3</span>))</span><br><span class="line">new_trick = np.linspace(<span class="number">-1</span>,<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"><span class="comment">#刻度</span></span><br><span class="line">plt.xticks(new_trick)</span><br><span class="line">plt.yticks([<span class="number">-2</span>,<span class="number">-1.8</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="string">r'$really\ bad$'</span>, <span class="string">r'$bad$'</span>, <span class="string">r'$normal$'</span>, <span class="string">r'$good$'</span>, <span class="string">r'$really\ good$'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​<br><img src="/2021/04/06/matplotlib_1/output_5_0.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(num=<span class="number">3</span>,figsize=(<span class="number">8</span>,<span class="number">5</span>))</span><br><span class="line">plt.plot(x,y2)</span><br><span class="line">plt.plot(x,y1,color=<span class="string">'red'</span>,linewidth=<span class="number">1.0</span>,linestyle=<span class="string">'--'</span>)</span><br><span class="line"><span class="comment">#设置区间</span></span><br><span class="line">plt.xlim((<span class="number">-1</span>,<span class="number">2</span>))</span><br><span class="line">plt.ylim((<span class="number">-2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment">#设置刻度</span></span><br><span class="line">plt.xticks(new_trick)</span><br><span class="line">plt.yticks([<span class="number">-2</span>, <span class="number">-1.8</span>, <span class="number">-1</span>, <span class="number">1.22</span>, <span class="number">3</span>],[<span class="string">r'$really\ bad$'</span>, <span class="string">r'$bad$'</span>, <span class="string">r'$normal$'</span>, <span class="string">r'$good$'</span>, <span class="string">r'$really\ good$'</span>])</span><br><span class="line"><span class="comment">#获取当前坐标轴信息</span></span><br><span class="line">ax =plt.gca()</span><br><span class="line"><span class="comment">#设置边框颜色</span></span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用.xaxis.set_ticks_position设置x坐标刻度数字或名称的位置：bottom.</span></span><br><span class="line"><span class="comment">#（所有位置：top，bottom，both，default，none）；</span></span><br><span class="line"><span class="comment">#使用.spines设置边框：x轴；</span></span><br><span class="line"><span class="comment">#使用.set_position设置边框位置：y=0的位置；（位置所有属性：outward，axes，data）</span></span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用.yaxis.set_ticks_position设置y坐标刻度数字或名称的位置：left.</span></span><br><span class="line"><span class="comment">#（所有位置：left，right，both，default，none）</span></span><br><span class="line"><span class="comment">#使用.spines设置边框：y轴；使用.set_position设置边框位置：x=0的位置；</span></span><br><span class="line"><span class="comment">#（位置所有属性：outward，axes，data） 使用plt.show显示图像.</span></span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​<br><img src="/2021/04/06/matplotlib_1/output_6_0.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-3</span>,<span class="number">3</span>,<span class="number">100</span>)</span><br><span class="line">y = x<span class="number">-1</span></span><br><span class="line">plt.plot(x,y,linestyle=<span class="string">'--'</span>)</span><br><span class="line">plt.xlim((<span class="number">-1</span>,<span class="number">2</span>))</span><br><span class="line">plt.ylim((<span class="number">-2</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">plt.xticks([<span class="number">-1</span>,<span class="number">-0.5</span>,<span class="number">1</span>],[<span class="string">'bad'</span>,<span class="string">'normal'</span>,<span class="string">'good'</span>])</span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>​<br><img src="/2021/04/06/matplotlib_1/output_7_0.png" alt="png"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;matplotlib学习记录1&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://FWj1635387072.github.io/categories/Python/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="https://FWj1635387072.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>exercise</title>
    <link href="https://FWj1635387072.github.io/2021/03/31/exercise/"/>
    <id>https://FWj1635387072.github.io/2021/03/31/exercise/</id>
    <published>2021-03-31T11:50:27.230Z</published>
    <updated>2021-03-31T11:49:08.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chipo = pd.read_csv(<span class="string">'chipotle.tsv'</span>,sep=<span class="string">'\t'</span>)</span><br><span class="line">chipo.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>order_id</th>      <th>quantity</th>      <th>item_name</th>      <th>choice_description</th>      <th>item_price</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>1</td>      <td>Chips and Fresh Tomato Salsa</td>      <td>NaN</td>      <td>$2.39</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>1</td>      <td>Izze</td>      <td>[Clementine]</td>      <td>$3.39</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>1</td>      <td>Nantucket Nectar</td>      <td>[Apple]</td>      <td>$3.39</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>1</td>      <td>Chips and Tomatillo-Green Chili Salsa</td>      <td>NaN</td>      <td>$2.39</td>    </tr>    <tr>      <th>4</th>      <td>2</td>      <td>2</td>      <td>Chicken Bowl</td>      <td>[Tomatillo-Red Chili Salsa (Hot), [Black Beans...</td>      <td>$16.98</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chipo.shape[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>4622</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chipo.columns</span><br></pre></td></tr></table></figure><pre><code>Index([&apos;order_id&apos;, &apos;quantity&apos;, &apos;item_name&apos;, &apos;choice_description&apos;,       &apos;item_price&apos;],      dtype=&apos;object&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chipo.index</span><br></pre></td></tr></table></figure><pre><code>RangeIndex(start=0, stop=4622, step=1)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chipo[<span class="string">'item_name'</span>].nunique()</span><br></pre></td></tr></table></figure><pre><code>50</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chipo[<span class="string">'choice_description'</span>].value_counts().head(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>[Diet Coke]    134Name: choice_description, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chipo[<span class="string">'quantity'</span>].sum()</span><br></pre></td></tr></table></figure><pre><code>4972</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dollarizer = <span class="keyword">lambda</span> x:float(x[<span class="number">1</span>:<span class="number">-1</span>])</span><br><span class="line">chipo[<span class="string">'item_price'</span>] = chipo[<span class="string">'item_price'</span>].apply(dollarizer)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chipo[<span class="string">'sub_total'</span>] = round(chipo[<span class="string">'item_price'</span>] * chipo[<span class="string">'quantity'</span>],<span class="number">2</span>)</span><br><span class="line">chipo.head(<span class="number">10</span>)</span><br><span class="line">chipo[<span class="string">'sub_total'</span>].sum()</span><br></pre></td></tr></table></figure><pre><code>39237.02</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#欧洲杯数据(练习二)</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">euro12 = pd.read_csv(<span class="string">'Euro2012_stats.csv'</span>)</span><br><span class="line"></span><br><span class="line">euro12.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Team</th>      <th>Goals</th>      <th>Shots on target</th>      <th>Shots off target</th>      <th>Shooting Accuracy</th>      <th>% Goals-to-shots</th>      <th>Total shots (inc. Blocked)</th>      <th>Hit Woodwork</th>      <th>Penalty goals</th>      <th>Penalties not scored</th>      <th>...</th>      <th>Saves made</th>      <th>Saves-to-shots ratio</th>      <th>Fouls Won</th>      <th>Fouls Conceded</th>      <th>Offsides</th>      <th>Yellow Cards</th>      <th>Red Cards</th>      <th>Subs on</th>      <th>Subs off</th>      <th>Players Used</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Croatia</td>      <td>4</td>      <td>13</td>      <td>12</td>      <td>51.9%</td>      <td>16.0%</td>      <td>32</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>13</td>      <td>81.3%</td>      <td>41</td>      <td>62</td>      <td>2</td>      <td>9</td>      <td>0</td>      <td>9</td>      <td>9</td>      <td>16</td>    </tr>    <tr>      <th>1</th>      <td>Czech Republic</td>      <td>4</td>      <td>13</td>      <td>18</td>      <td>41.9%</td>      <td>12.9%</td>      <td>39</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>9</td>      <td>60.1%</td>      <td>53</td>      <td>73</td>      <td>8</td>      <td>7</td>      <td>0</td>      <td>11</td>      <td>11</td>      <td>19</td>    </tr>    <tr>      <th>2</th>      <td>Denmark</td>      <td>4</td>      <td>10</td>      <td>10</td>      <td>50.0%</td>      <td>20.0%</td>      <td>27</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>10</td>      <td>66.7%</td>      <td>25</td>      <td>38</td>      <td>8</td>      <td>4</td>      <td>0</td>      <td>7</td>      <td>7</td>      <td>15</td>    </tr>    <tr>      <th>3</th>      <td>England</td>      <td>5</td>      <td>11</td>      <td>18</td>      <td>50.0%</td>      <td>17.2%</td>      <td>40</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>22</td>      <td>88.1%</td>      <td>43</td>      <td>45</td>      <td>6</td>      <td>5</td>      <td>0</td>      <td>11</td>      <td>11</td>      <td>16</td>    </tr>    <tr>      <th>4</th>      <td>France</td>      <td>3</td>      <td>22</td>      <td>24</td>      <td>37.9%</td>      <td>6.5%</td>      <td>65</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>6</td>      <td>54.6%</td>      <td>36</td>      <td>51</td>      <td>5</td>      <td>6</td>      <td>0</td>      <td>11</td>      <td>11</td>      <td>19</td>    </tr>  </tbody></table><p>5 rows × 35 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">euro12.Goals</span><br></pre></td></tr></table></figure><pre><code>0      41      42      43      54      35     106      57      68      29      210     611     112     513    1214     515     2Name: Goals, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">euro12.shape[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>16</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">euro12.shape[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><pre><code>35</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">euro12.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;RangeIndex: 16 entries, 0 to 15Data columns (total 35 columns): #   Column                      Non-Null Count  Dtype  ---  ------                      --------------  -----   0   Team                        16 non-null     object  1   Goals                       16 non-null     int64   2   Shots on target             16 non-null     int64   3   Shots off target            16 non-null     int64   4   Shooting Accuracy           16 non-null     object  5   % Goals-to-shots            16 non-null     object  6   Total shots (inc. Blocked)  16 non-null     int64   7   Hit Woodwork                16 non-null     int64   8   Penalty goals               16 non-null     int64   9   Penalties not scored        16 non-null     int64   10  Headed goals                16 non-null     int64   11  Passes                      16 non-null     int64   12  Passes completed            16 non-null     int64   13  Passing Accuracy            16 non-null     object  14  Touches                     16 non-null     int64   15  Crosses                     16 non-null     int64   16  Dribbles                    16 non-null     int64   17  Corners Taken               16 non-null     int64   18  Tackles                     16 non-null     int64   19  Clearances                  16 non-null     int64   20  Interceptions               16 non-null     int64   21  Clearances off line         15 non-null     float64 22  Clean Sheets                16 non-null     int64   23  Blocks                      16 non-null     int64   24  Goals conceded              16 non-null     int64   25  Saves made                  16 non-null     int64   26  Saves-to-shots ratio        16 non-null     object  27  Fouls Won                   16 non-null     int64   28  Fouls Conceded              16 non-null     int64   29  Offsides                    16 non-null     int64   30  Yellow Cards                16 non-null     int64   31  Red Cards                   16 non-null     int64   32  Subs on                     16 non-null     int64   33  Subs off                    16 non-null     int64   34  Players Used                16 non-null     int64  dtypes: float64(1), int64(29), object(5)memory usage: 4.5+ KB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">disclipline = euro12[[<span class="string">'Team'</span>,<span class="string">'Yellow Cards'</span>,<span class="string">'Red Cards'</span>]]</span><br><span class="line">disclipline</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Team</th>      <th>Yellow Cards</th>      <th>Red Cards</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Croatia</td>      <td>9</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>Czech Republic</td>      <td>7</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>Denmark</td>      <td>4</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>England</td>      <td>5</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>France</td>      <td>6</td>      <td>0</td>    </tr>    <tr>      <th>5</th>      <td>Germany</td>      <td>4</td>      <td>0</td>    </tr>    <tr>      <th>6</th>      <td>Greece</td>      <td>9</td>      <td>1</td>    </tr>    <tr>      <th>7</th>      <td>Italy</td>      <td>16</td>      <td>0</td>    </tr>    <tr>      <th>8</th>      <td>Netherlands</td>      <td>5</td>      <td>0</td>    </tr>    <tr>      <th>9</th>      <td>Poland</td>      <td>7</td>      <td>1</td>    </tr>    <tr>      <th>10</th>      <td>Portugal</td>      <td>12</td>      <td>0</td>    </tr>    <tr>      <th>11</th>      <td>Republic of Ireland</td>      <td>6</td>      <td>1</td>    </tr>    <tr>      <th>12</th>      <td>Russia</td>      <td>6</td>      <td>0</td>    </tr>    <tr>      <th>13</th>      <td>Spain</td>      <td>11</td>      <td>0</td>    </tr>    <tr>      <th>14</th>      <td>Sweden</td>      <td>7</td>      <td>0</td>    </tr>    <tr>      <th>15</th>      <td>Ukraine</td>      <td>5</td>      <td>0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disclipline.sort_values([<span class="string">'Red Cards'</span>,<span class="string">'Yellow Cards'</span>],ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Team</th>      <th>Yellow Cards</th>      <th>Red Cards</th>    </tr>  </thead>  <tbody>    <tr>      <th>6</th>      <td>Greece</td>      <td>9</td>      <td>1</td>    </tr>    <tr>      <th>9</th>      <td>Poland</td>      <td>7</td>      <td>1</td>    </tr>    <tr>      <th>11</th>      <td>Republic of Ireland</td>      <td>6</td>      <td>1</td>    </tr>    <tr>      <th>7</th>      <td>Italy</td>      <td>16</td>      <td>0</td>    </tr>    <tr>      <th>10</th>      <td>Portugal</td>      <td>12</td>      <td>0</td>    </tr>    <tr>      <th>13</th>      <td>Spain</td>      <td>11</td>      <td>0</td>    </tr>    <tr>      <th>0</th>      <td>Croatia</td>      <td>9</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>Czech Republic</td>      <td>7</td>      <td>0</td>    </tr>    <tr>      <th>14</th>      <td>Sweden</td>      <td>7</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>France</td>      <td>6</td>      <td>0</td>    </tr>    <tr>      <th>12</th>      <td>Russia</td>      <td>6</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>England</td>      <td>5</td>      <td>0</td>    </tr>    <tr>      <th>8</th>      <td>Netherlands</td>      <td>5</td>      <td>0</td>    </tr>    <tr>      <th>15</th>      <td>Ukraine</td>      <td>5</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>Denmark</td>      <td>4</td>      <td>0</td>    </tr>    <tr>      <th>5</th>      <td>Germany</td>      <td>4</td>      <td>0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">round(disclipline[<span class="string">'Yellow Cards'</span>].mean())</span><br></pre></td></tr></table></figure><pre><code>7</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">euro12[euro12.Goals &gt; <span class="number">6</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Team</th>      <th>Goals</th>      <th>Shots on target</th>      <th>Shots off target</th>      <th>Shooting Accuracy</th>      <th>% Goals-to-shots</th>      <th>Total shots (inc. Blocked)</th>      <th>Hit Woodwork</th>      <th>Penalty goals</th>      <th>Penalties not scored</th>      <th>...</th>      <th>Saves made</th>      <th>Saves-to-shots ratio</th>      <th>Fouls Won</th>      <th>Fouls Conceded</th>      <th>Offsides</th>      <th>Yellow Cards</th>      <th>Red Cards</th>      <th>Subs on</th>      <th>Subs off</th>      <th>Players Used</th>    </tr>  </thead>  <tbody>    <tr>      <th>5</th>      <td>Germany</td>      <td>10</td>      <td>32</td>      <td>32</td>      <td>47.8%</td>      <td>15.6%</td>      <td>80</td>      <td>2</td>      <td>1</td>      <td>0</td>      <td>...</td>      <td>10</td>      <td>62.6%</td>      <td>63</td>      <td>49</td>      <td>12</td>      <td>4</td>      <td>0</td>      <td>15</td>      <td>15</td>      <td>17</td>    </tr>    <tr>      <th>13</th>      <td>Spain</td>      <td>12</td>      <td>42</td>      <td>33</td>      <td>55.9%</td>      <td>16.0%</td>      <td>100</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>...</td>      <td>15</td>      <td>93.8%</td>      <td>102</td>      <td>83</td>      <td>19</td>      <td>11</td>      <td>0</td>      <td>17</td>      <td>17</td>      <td>18</td>    </tr>  </tbody></table><p>2 rows × 35 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">euro12[euro12.Team.str.startswith(<span class="string">'G'</span>)]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Team</th>      <th>Goals</th>      <th>Shots on target</th>      <th>Shots off target</th>      <th>Shooting Accuracy</th>      <th>% Goals-to-shots</th>      <th>Total shots (inc. Blocked)</th>      <th>Hit Woodwork</th>      <th>Penalty goals</th>      <th>Penalties not scored</th>      <th>...</th>      <th>Saves made</th>      <th>Saves-to-shots ratio</th>      <th>Fouls Won</th>      <th>Fouls Conceded</th>      <th>Offsides</th>      <th>Yellow Cards</th>      <th>Red Cards</th>      <th>Subs on</th>      <th>Subs off</th>      <th>Players Used</th>    </tr>  </thead>  <tbody>    <tr>      <th>5</th>      <td>Germany</td>      <td>10</td>      <td>32</td>      <td>32</td>      <td>47.8%</td>      <td>15.6%</td>      <td>80</td>      <td>2</td>      <td>1</td>      <td>0</td>      <td>...</td>      <td>10</td>      <td>62.6%</td>      <td>63</td>      <td>49</td>      <td>12</td>      <td>4</td>      <td>0</td>      <td>15</td>      <td>15</td>      <td>17</td>    </tr>    <tr>      <th>6</th>      <td>Greece</td>      <td>5</td>      <td>8</td>      <td>18</td>      <td>30.7%</td>      <td>19.2%</td>      <td>32</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>...</td>      <td>13</td>      <td>65.1%</td>      <td>67</td>      <td>48</td>      <td>12</td>      <td>9</td>      <td>1</td>      <td>12</td>      <td>12</td>      <td>20</td>    </tr>  </tbody></table><p>2 rows × 35 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">euro12.iloc[:,:<span class="number">7</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Team</th>      <th>Goals</th>      <th>Shots on target</th>      <th>Shots off target</th>      <th>Shooting Accuracy</th>      <th>% Goals-to-shots</th>      <th>Total shots (inc. Blocked)</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Croatia</td>      <td>4</td>      <td>13</td>      <td>12</td>      <td>51.9%</td>      <td>16.0%</td>      <td>32</td>    </tr>    <tr>      <th>1</th>      <td>Czech Republic</td>      <td>4</td>      <td>13</td>      <td>18</td>      <td>41.9%</td>      <td>12.9%</td>      <td>39</td>    </tr>    <tr>      <th>2</th>      <td>Denmark</td>      <td>4</td>      <td>10</td>      <td>10</td>      <td>50.0%</td>      <td>20.0%</td>      <td>27</td>    </tr>    <tr>      <th>3</th>      <td>England</td>      <td>5</td>      <td>11</td>      <td>18</td>      <td>50.0%</td>      <td>17.2%</td>      <td>40</td>    </tr>    <tr>      <th>4</th>      <td>France</td>      <td>3</td>      <td>22</td>      <td>24</td>      <td>37.9%</td>      <td>6.5%</td>      <td>65</td>    </tr>    <tr>      <th>5</th>      <td>Germany</td>      <td>10</td>      <td>32</td>      <td>32</td>      <td>47.8%</td>      <td>15.6%</td>      <td>80</td>    </tr>    <tr>      <th>6</th>      <td>Greece</td>      <td>5</td>      <td>8</td>      <td>18</td>      <td>30.7%</td>      <td>19.2%</td>      <td>32</td>    </tr>    <tr>      <th>7</th>      <td>Italy</td>      <td>6</td>      <td>34</td>      <td>45</td>      <td>43.0%</td>      <td>7.5%</td>      <td>110</td>    </tr>    <tr>      <th>8</th>      <td>Netherlands</td>      <td>2</td>      <td>12</td>      <td>36</td>      <td>25.0%</td>      <td>4.1%</td>      <td>60</td>    </tr>    <tr>      <th>9</th>      <td>Poland</td>      <td>2</td>      <td>15</td>      <td>23</td>      <td>39.4%</td>      <td>5.2%</td>      <td>48</td>    </tr>    <tr>      <th>10</th>      <td>Portugal</td>      <td>6</td>      <td>22</td>      <td>42</td>      <td>34.3%</td>      <td>9.3%</td>      <td>82</td>    </tr>    <tr>      <th>11</th>      <td>Republic of Ireland</td>      <td>1</td>      <td>7</td>      <td>12</td>      <td>36.8%</td>      <td>5.2%</td>      <td>28</td>    </tr>    <tr>      <th>12</th>      <td>Russia</td>      <td>5</td>      <td>9</td>      <td>31</td>      <td>22.5%</td>      <td>12.5%</td>      <td>59</td>    </tr>    <tr>      <th>13</th>      <td>Spain</td>      <td>12</td>      <td>42</td>      <td>33</td>      <td>55.9%</td>      <td>16.0%</td>      <td>100</td>    </tr>    <tr>      <th>14</th>      <td>Sweden</td>      <td>5</td>      <td>17</td>      <td>19</td>      <td>47.2%</td>      <td>13.8%</td>      <td>39</td>    </tr>    <tr>      <th>15</th>      <td>Ukraine</td>      <td>2</td>      <td>7</td>      <td>26</td>      <td>21.2%</td>      <td>6.0%</td>      <td>38</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">euro12.iloc[:,:<span class="number">-3</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Team</th>      <th>Goals</th>      <th>Shots on target</th>      <th>Shots off target</th>      <th>Shooting Accuracy</th>      <th>% Goals-to-shots</th>      <th>Total shots (inc. Blocked)</th>      <th>Hit Woodwork</th>      <th>Penalty goals</th>      <th>Penalties not scored</th>      <th>...</th>      <th>Clean Sheets</th>      <th>Blocks</th>      <th>Goals conceded</th>      <th>Saves made</th>      <th>Saves-to-shots ratio</th>      <th>Fouls Won</th>      <th>Fouls Conceded</th>      <th>Offsides</th>      <th>Yellow Cards</th>      <th>Red Cards</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Croatia</td>      <td>4</td>      <td>13</td>      <td>12</td>      <td>51.9%</td>      <td>16.0%</td>      <td>32</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>10</td>      <td>3</td>      <td>13</td>      <td>81.3%</td>      <td>41</td>      <td>62</td>      <td>2</td>      <td>9</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>Czech Republic</td>      <td>4</td>      <td>13</td>      <td>18</td>      <td>41.9%</td>      <td>12.9%</td>      <td>39</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>1</td>      <td>10</td>      <td>6</td>      <td>9</td>      <td>60.1%</td>      <td>53</td>      <td>73</td>      <td>8</td>      <td>7</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>Denmark</td>      <td>4</td>      <td>10</td>      <td>10</td>      <td>50.0%</td>      <td>20.0%</td>      <td>27</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>1</td>      <td>10</td>      <td>5</td>      <td>10</td>      <td>66.7%</td>      <td>25</td>      <td>38</td>      <td>8</td>      <td>4</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>England</td>      <td>5</td>      <td>11</td>      <td>18</td>      <td>50.0%</td>      <td>17.2%</td>      <td>40</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>2</td>      <td>29</td>      <td>3</td>      <td>22</td>      <td>88.1%</td>      <td>43</td>      <td>45</td>      <td>6</td>      <td>5</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>France</td>      <td>3</td>      <td>22</td>      <td>24</td>      <td>37.9%</td>      <td>6.5%</td>      <td>65</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>1</td>      <td>7</td>      <td>5</td>      <td>6</td>      <td>54.6%</td>      <td>36</td>      <td>51</td>      <td>5</td>      <td>6</td>      <td>0</td>    </tr>    <tr>      <th>5</th>      <td>Germany</td>      <td>10</td>      <td>32</td>      <td>32</td>      <td>47.8%</td>      <td>15.6%</td>      <td>80</td>      <td>2</td>      <td>1</td>      <td>0</td>      <td>...</td>      <td>1</td>      <td>11</td>      <td>6</td>      <td>10</td>      <td>62.6%</td>      <td>63</td>      <td>49</td>      <td>12</td>      <td>4</td>      <td>0</td>    </tr>    <tr>      <th>6</th>      <td>Greece</td>      <td>5</td>      <td>8</td>      <td>18</td>      <td>30.7%</td>      <td>19.2%</td>      <td>32</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>...</td>      <td>1</td>      <td>23</td>      <td>7</td>      <td>13</td>      <td>65.1%</td>      <td>67</td>      <td>48</td>      <td>12</td>      <td>9</td>      <td>1</td>    </tr>    <tr>      <th>7</th>      <td>Italy</td>      <td>6</td>      <td>34</td>      <td>45</td>      <td>43.0%</td>      <td>7.5%</td>      <td>110</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>2</td>      <td>18</td>      <td>7</td>      <td>20</td>      <td>74.1%</td>      <td>101</td>      <td>89</td>      <td>16</td>      <td>16</td>      <td>0</td>    </tr>    <tr>      <th>8</th>      <td>Netherlands</td>      <td>2</td>      <td>12</td>      <td>36</td>      <td>25.0%</td>      <td>4.1%</td>      <td>60</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>9</td>      <td>5</td>      <td>12</td>      <td>70.6%</td>      <td>35</td>      <td>30</td>      <td>3</td>      <td>5</td>      <td>0</td>    </tr>    <tr>      <th>9</th>      <td>Poland</td>      <td>2</td>      <td>15</td>      <td>23</td>      <td>39.4%</td>      <td>5.2%</td>      <td>48</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>8</td>      <td>3</td>      <td>6</td>      <td>66.7%</td>      <td>48</td>      <td>56</td>      <td>3</td>      <td>7</td>      <td>1</td>    </tr>    <tr>      <th>10</th>      <td>Portugal</td>      <td>6</td>      <td>22</td>      <td>42</td>      <td>34.3%</td>      <td>9.3%</td>      <td>82</td>      <td>6</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>2</td>      <td>11</td>      <td>4</td>      <td>10</td>      <td>71.5%</td>      <td>73</td>      <td>90</td>      <td>10</td>      <td>12</td>      <td>0</td>    </tr>    <tr>      <th>11</th>      <td>Republic of Ireland</td>      <td>1</td>      <td>7</td>      <td>12</td>      <td>36.8%</td>      <td>5.2%</td>      <td>28</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>23</td>      <td>9</td>      <td>17</td>      <td>65.4%</td>      <td>43</td>      <td>51</td>      <td>11</td>      <td>6</td>      <td>1</td>    </tr>    <tr>      <th>12</th>      <td>Russia</td>      <td>5</td>      <td>9</td>      <td>31</td>      <td>22.5%</td>      <td>12.5%</td>      <td>59</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>8</td>      <td>3</td>      <td>10</td>      <td>77.0%</td>      <td>34</td>      <td>43</td>      <td>4</td>      <td>6</td>      <td>0</td>    </tr>    <tr>      <th>13</th>      <td>Spain</td>      <td>12</td>      <td>42</td>      <td>33</td>      <td>55.9%</td>      <td>16.0%</td>      <td>100</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>...</td>      <td>5</td>      <td>8</td>      <td>1</td>      <td>15</td>      <td>93.8%</td>      <td>102</td>      <td>83</td>      <td>19</td>      <td>11</td>      <td>0</td>    </tr>    <tr>      <th>14</th>      <td>Sweden</td>      <td>5</td>      <td>17</td>      <td>19</td>      <td>47.2%</td>      <td>13.8%</td>      <td>39</td>      <td>3</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>1</td>      <td>12</td>      <td>5</td>      <td>8</td>      <td>61.6%</td>      <td>35</td>      <td>51</td>      <td>7</td>      <td>7</td>      <td>0</td>    </tr>    <tr>      <th>15</th>      <td>Ukraine</td>      <td>2</td>      <td>7</td>      <td>26</td>      <td>21.2%</td>      <td>6.0%</td>      <td>38</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>4</td>      <td>4</td>      <td>13</td>      <td>76.5%</td>      <td>48</td>      <td>31</td>      <td>4</td>      <td>5</td>      <td>0</td>    </tr>  </tbody></table><p>16 rows × 32 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#找到英格兰(England)、意大利(Italy)和俄罗斯(Russia)的射正率(Shooting Accuracy)</span></span><br><span class="line">euro12.loc[euro12.Team.isin([<span class="string">'England'</span>,<span class="string">'Italy'</span>,<span class="string">'Russia'</span>]),[<span class="string">'Team'</span>,<span class="string">'Shooting Accuracy'</span>]]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Team</th>      <th>Shooting Accuracy</th>    </tr>  </thead>  <tbody>    <tr>      <th>3</th>      <td>England</td>      <td>50.0%</td>    </tr>    <tr>      <th>7</th>      <td>Italy</td>      <td>43.0%</td>    </tr>    <tr>      <th>12</th>      <td>Russia</td>      <td>22.5%</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#酒类消费数据（练习三）</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">drink = pd.read_csv(<span class="string">'drinks.csv'</span>)</span><br><span class="line">drink.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>beer_servings</th>      <th>spirit_servings</th>      <th>wine_servings</th>      <th>total_litres_of_pure_alcohol</th>      <th>continent</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Afghanistan</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0.0</td>      <td>AS</td>    </tr>    <tr>      <th>1</th>      <td>Albania</td>      <td>89</td>      <td>132</td>      <td>54</td>      <td>4.9</td>      <td>EU</td>    </tr>    <tr>      <th>2</th>      <td>Algeria</td>      <td>25</td>      <td>0</td>      <td>14</td>      <td>0.7</td>      <td>AF</td>    </tr>    <tr>      <th>3</th>      <td>Andorra</td>      <td>245</td>      <td>138</td>      <td>312</td>      <td>12.4</td>      <td>EU</td>    </tr>    <tr>      <th>4</th>      <td>Angola</td>      <td>217</td>      <td>57</td>      <td>45</td>      <td>5.9</td>      <td>AF</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">beer  = drink.groupby(<span class="string">'continent'</span>).beer_servings.mean()</span><br><span class="line">beer.sort_values(ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><pre><code>continentEU    193.777778SA    175.083333OC     89.687500AF     61.471698AS     37.045455Name: beer_servings, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drink.groupby(<span class="string">'continent'</span>).wine_servings.describe()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>count</th>      <th>mean</th>      <th>std</th>      <th>min</th>      <th>25%</th>      <th>50%</th>      <th>75%</th>      <th>max</th>    </tr>    <tr>      <th>continent</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>AF</th>      <td>53.0</td>      <td>16.264151</td>      <td>38.846419</td>      <td>0.0</td>      <td>1.0</td>      <td>2.0</td>      <td>13.00</td>      <td>233.0</td>    </tr>    <tr>      <th>AS</th>      <td>44.0</td>      <td>9.068182</td>      <td>21.667034</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>8.00</td>      <td>123.0</td>    </tr>    <tr>      <th>EU</th>      <td>45.0</td>      <td>142.222222</td>      <td>97.421738</td>      <td>0.0</td>      <td>59.0</td>      <td>128.0</td>      <td>195.00</td>      <td>370.0</td>    </tr>    <tr>      <th>OC</th>      <td>16.0</td>      <td>35.625000</td>      <td>64.555790</td>      <td>0.0</td>      <td>1.0</td>      <td>8.5</td>      <td>23.25</td>      <td>212.0</td>    </tr>    <tr>      <th>SA</th>      <td>12.0</td>      <td>62.416667</td>      <td>88.620189</td>      <td>1.0</td>      <td>3.0</td>      <td>12.0</td>      <td>98.50</td>      <td>221.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drink.groupby(<span class="string">'continent'</span>).mean()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>beer_servings</th>      <th>spirit_servings</th>      <th>wine_servings</th>      <th>total_litres_of_pure_alcohol</th>    </tr>    <tr>      <th>continent</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>AF</th>      <td>61.471698</td>      <td>16.339623</td>      <td>16.264151</td>      <td>3.007547</td>    </tr>    <tr>      <th>AS</th>      <td>37.045455</td>      <td>60.840909</td>      <td>9.068182</td>      <td>2.170455</td>    </tr>    <tr>      <th>EU</th>      <td>193.777778</td>      <td>132.555556</td>      <td>142.222222</td>      <td>8.617778</td>    </tr>    <tr>      <th>OC</th>      <td>89.687500</td>      <td>58.437500</td>      <td>35.625000</td>      <td>3.381250</td>    </tr>    <tr>      <th>SA</th>      <td>175.083333</td>      <td>114.750000</td>      <td>62.416667</td>      <td>6.308333</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drink.groupby(<span class="string">'continent'</span>).median()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>beer_servings</th>      <th>spirit_servings</th>      <th>wine_servings</th>      <th>total_litres_of_pure_alcohol</th>    </tr>    <tr>      <th>continent</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>AF</th>      <td>32.0</td>      <td>3.0</td>      <td>2.0</td>      <td>2.30</td>    </tr>    <tr>      <th>AS</th>      <td>17.5</td>      <td>16.0</td>      <td>1.0</td>      <td>1.20</td>    </tr>    <tr>      <th>EU</th>      <td>219.0</td>      <td>122.0</td>      <td>128.0</td>      <td>10.00</td>    </tr>    <tr>      <th>OC</th>      <td>52.5</td>      <td>37.0</td>      <td>8.5</td>      <td>1.75</td>    </tr>    <tr>      <th>SA</th>      <td>162.5</td>      <td>108.5</td>      <td>12.0</td>      <td>6.85</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drink.groupby(<span class="string">'continent'</span>).spirit_servings.agg([<span class="string">'mean'</span>,<span class="string">'min'</span>,<span class="string">'max'</span>])</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>mean</th>      <th>min</th>      <th>max</th>    </tr>    <tr>      <th>continent</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>AF</th>      <td>16.339623</td>      <td>0</td>      <td>152</td>    </tr>    <tr>      <th>AS</th>      <td>60.840909</td>      <td>0</td>      <td>326</td>    </tr>    <tr>      <th>EU</th>      <td>132.555556</td>      <td>0</td>      <td>373</td>    </tr>    <tr>      <th>OC</th>      <td>58.437500</td>      <td>0</td>      <td>254</td>    </tr>    <tr>      <th>SA</th>      <td>114.750000</td>      <td>25</td>      <td>302</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2014美国犯罪数据（练习四）</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">crime = pd.read_csv(<span class="string">'US_Crime_Rates_1960_2014.csv'</span>)</span><br><span class="line">crime.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Year</th>      <th>Population</th>      <th>Total</th>      <th>Violent</th>      <th>Property</th>      <th>Murder</th>      <th>Forcible_Rape</th>      <th>Robbery</th>      <th>Aggravated_assault</th>      <th>Burglary</th>      <th>Larceny_Theft</th>      <th>Vehicle_Theft</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1960</td>      <td>179323175</td>      <td>3384200</td>      <td>288460</td>      <td>3095700</td>      <td>9110</td>      <td>17190</td>      <td>107840</td>      <td>154320</td>      <td>912100</td>      <td>1855400</td>      <td>328200</td>    </tr>    <tr>      <th>1</th>      <td>1961</td>      <td>182992000</td>      <td>3488000</td>      <td>289390</td>      <td>3198600</td>      <td>8740</td>      <td>17220</td>      <td>106670</td>      <td>156760</td>      <td>949600</td>      <td>1913000</td>      <td>336000</td>    </tr>    <tr>      <th>2</th>      <td>1962</td>      <td>185771000</td>      <td>3752200</td>      <td>301510</td>      <td>3450700</td>      <td>8530</td>      <td>17550</td>      <td>110860</td>      <td>164570</td>      <td>994300</td>      <td>2089600</td>      <td>366800</td>    </tr>    <tr>      <th>3</th>      <td>1963</td>      <td>188483000</td>      <td>4109500</td>      <td>316970</td>      <td>3792500</td>      <td>8640</td>      <td>17650</td>      <td>116470</td>      <td>174210</td>      <td>1086400</td>      <td>2297800</td>      <td>408300</td>    </tr>    <tr>      <th>4</th>      <td>1964</td>      <td>191141000</td>      <td>4564600</td>      <td>364220</td>      <td>4200400</td>      <td>9360</td>      <td>21420</td>      <td>130390</td>      <td>203050</td>      <td>1213200</td>      <td>2514400</td>      <td>472800</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crime.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;RangeIndex: 55 entries, 0 to 54Data columns (total 12 columns): #   Column              Non-Null Count  Dtype---  ------              --------------  ----- 0   Year                55 non-null     int64 1   Population          55 non-null     int64 2   Total               55 non-null     int64 3   Violent             55 non-null     int64 4   Property            55 non-null     int64 5   Murder              55 non-null     int64 6   Forcible_Rape       55 non-null     int64 7   Robbery             55 non-null     int64 8   Aggravated_assault  55 non-null     int64 9   Burglary            55 non-null     int64 10  Larceny_Theft       55 non-null     int64 11  Vehicle_Theft       55 non-null     int64dtypes: int64(12)memory usage: 5.3 KB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">crime.Year = pd.to_datetime(crime.Year,format=<span class="string">'%Y'</span>)</span><br><span class="line">crime.info()</span><br><span class="line">crime.head()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;RangeIndex: 55 entries, 0 to 54Data columns (total 12 columns): #   Column              Non-Null Count  Dtype         ---  ------              --------------  -----          0   Year                55 non-null     datetime64[ns] 1   Population          55 non-null     int64          2   Total               55 non-null     int64          3   Violent             55 non-null     int64          4   Property            55 non-null     int64          5   Murder              55 non-null     int64          6   Forcible_Rape       55 non-null     int64          7   Robbery             55 non-null     int64          8   Aggravated_assault  55 non-null     int64          9   Burglary            55 non-null     int64          10  Larceny_Theft       55 non-null     int64          11  Vehicle_Theft       55 non-null     int64         dtypes: datetime64[ns](1), int64(11)memory usage: 5.3 KB</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Year</th>      <th>Population</th>      <th>Total</th>      <th>Violent</th>      <th>Property</th>      <th>Murder</th>      <th>Forcible_Rape</th>      <th>Robbery</th>      <th>Aggravated_assault</th>      <th>Burglary</th>      <th>Larceny_Theft</th>      <th>Vehicle_Theft</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1960-01-01</td>      <td>179323175</td>      <td>3384200</td>      <td>288460</td>      <td>3095700</td>      <td>9110</td>      <td>17190</td>      <td>107840</td>      <td>154320</td>      <td>912100</td>      <td>1855400</td>      <td>328200</td>    </tr>    <tr>      <th>1</th>      <td>1961-01-01</td>      <td>182992000</td>      <td>3488000</td>      <td>289390</td>      <td>3198600</td>      <td>8740</td>      <td>17220</td>      <td>106670</td>      <td>156760</td>      <td>949600</td>      <td>1913000</td>      <td>336000</td>    </tr>    <tr>      <th>2</th>      <td>1962-01-01</td>      <td>185771000</td>      <td>3752200</td>      <td>301510</td>      <td>3450700</td>      <td>8530</td>      <td>17550</td>      <td>110860</td>      <td>164570</td>      <td>994300</td>      <td>2089600</td>      <td>366800</td>    </tr>    <tr>      <th>3</th>      <td>1963-01-01</td>      <td>188483000</td>      <td>4109500</td>      <td>316970</td>      <td>3792500</td>      <td>8640</td>      <td>17650</td>      <td>116470</td>      <td>174210</td>      <td>1086400</td>      <td>2297800</td>      <td>408300</td>    </tr>    <tr>      <th>4</th>      <td>1964-01-01</td>      <td>191141000</td>      <td>4564600</td>      <td>364220</td>      <td>4200400</td>      <td>9360</td>      <td>21420</td>      <td>130390</td>      <td>203050</td>      <td>1213200</td>      <td>2514400</td>      <td>472800</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crime = crime.set_index(<span class="string">'Year'</span>,drop=<span class="literal">True</span>)</span><br><span class="line">crime.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Population</th>      <th>Total</th>      <th>Violent</th>      <th>Property</th>      <th>Murder</th>      <th>Forcible_Rape</th>      <th>Robbery</th>      <th>Aggravated_assault</th>      <th>Burglary</th>      <th>Larceny_Theft</th>      <th>Vehicle_Theft</th>    </tr>    <tr>      <th>Year</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>1960-01-01</th>      <td>179323175</td>      <td>3384200</td>      <td>288460</td>      <td>3095700</td>      <td>9110</td>      <td>17190</td>      <td>107840</td>      <td>154320</td>      <td>912100</td>      <td>1855400</td>      <td>328200</td>    </tr>    <tr>      <th>1961-01-01</th>      <td>182992000</td>      <td>3488000</td>      <td>289390</td>      <td>3198600</td>      <td>8740</td>      <td>17220</td>      <td>106670</td>      <td>156760</td>      <td>949600</td>      <td>1913000</td>      <td>336000</td>    </tr>    <tr>      <th>1962-01-01</th>      <td>185771000</td>      <td>3752200</td>      <td>301510</td>      <td>3450700</td>      <td>8530</td>      <td>17550</td>      <td>110860</td>      <td>164570</td>      <td>994300</td>      <td>2089600</td>      <td>366800</td>    </tr>    <tr>      <th>1963-01-01</th>      <td>188483000</td>      <td>4109500</td>      <td>316970</td>      <td>3792500</td>      <td>8640</td>      <td>17650</td>      <td>116470</td>      <td>174210</td>      <td>1086400</td>      <td>2297800</td>      <td>408300</td>    </tr>    <tr>      <th>1964-01-01</th>      <td>191141000</td>      <td>4564600</td>      <td>364220</td>      <td>4200400</td>      <td>9360</td>      <td>21420</td>      <td>130390</td>      <td>203050</td>      <td>1213200</td>      <td>2514400</td>      <td>472800</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> crime[<span class="string">'Total'</span>]</span><br><span class="line">crime.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Population</th>      <th>Violent</th>      <th>Property</th>      <th>Murder</th>      <th>Forcible_Rape</th>      <th>Robbery</th>      <th>Aggravated_assault</th>      <th>Burglary</th>      <th>Larceny_Theft</th>      <th>Vehicle_Theft</th>    </tr>    <tr>      <th>Year</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>1960-01-01</th>      <td>179323175</td>      <td>288460</td>      <td>3095700</td>      <td>9110</td>      <td>17190</td>      <td>107840</td>      <td>154320</td>      <td>912100</td>      <td>1855400</td>      <td>328200</td>    </tr>    <tr>      <th>1961-01-01</th>      <td>182992000</td>      <td>289390</td>      <td>3198600</td>      <td>8740</td>      <td>17220</td>      <td>106670</td>      <td>156760</td>      <td>949600</td>      <td>1913000</td>      <td>336000</td>    </tr>    <tr>      <th>1962-01-01</th>      <td>185771000</td>      <td>301510</td>      <td>3450700</td>      <td>8530</td>      <td>17550</td>      <td>110860</td>      <td>164570</td>      <td>994300</td>      <td>2089600</td>      <td>366800</td>    </tr>    <tr>      <th>1963-01-01</th>      <td>188483000</td>      <td>316970</td>      <td>3792500</td>      <td>8640</td>      <td>17650</td>      <td>116470</td>      <td>174210</td>      <td>1086400</td>      <td>2297800</td>      <td>408300</td>    </tr>    <tr>      <th>1964-01-01</th>      <td>191141000</td>      <td>364220</td>      <td>4200400</td>      <td>9360</td>      <td>21420</td>      <td>130390</td>      <td>203050</td>      <td>1213200</td>      <td>2514400</td>      <td>472800</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crimes = crime.resample(<span class="string">'10AS'</span>).sum()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">population = crime[<span class="string">'Population'</span>].resample(<span class="string">'10AS'</span>).max()</span><br><span class="line">crimes[<span class="string">'Population'</span>] = population</span><br><span class="line">crimes</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Population</th>      <th>Violent</th>      <th>Property</th>      <th>Murder</th>      <th>Forcible_Rape</th>      <th>Robbery</th>      <th>Aggravated_assault</th>      <th>Burglary</th>      <th>Larceny_Theft</th>      <th>Vehicle_Theft</th>    </tr>    <tr>      <th>Year</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>1960-01-01</th>      <td>201385000</td>      <td>4134930</td>      <td>45160900</td>      <td>106180</td>      <td>236720</td>      <td>1633510</td>      <td>2158520</td>      <td>13321100</td>      <td>26547700</td>      <td>5292100</td>    </tr>    <tr>      <th>1970-01-01</th>      <td>220099000</td>      <td>9607930</td>      <td>91383800</td>      <td>192230</td>      <td>554570</td>      <td>4159020</td>      <td>4702120</td>      <td>28486000</td>      <td>53157800</td>      <td>9739900</td>    </tr>    <tr>      <th>1980-01-01</th>      <td>248239000</td>      <td>14074328</td>      <td>117048900</td>      <td>206439</td>      <td>865639</td>      <td>5383109</td>      <td>7619130</td>      <td>33073494</td>      <td>72040253</td>      <td>11935411</td>    </tr>    <tr>      <th>1990-01-01</th>      <td>272690813</td>      <td>17527048</td>      <td>119053499</td>      <td>211664</td>      <td>998827</td>      <td>5748930</td>      <td>10568963</td>      <td>26750015</td>      <td>77679366</td>      <td>14624418</td>    </tr>    <tr>      <th>2000-01-01</th>      <td>307006550</td>      <td>13968056</td>      <td>100944369</td>      <td>163068</td>      <td>922499</td>      <td>4230366</td>      <td>8652124</td>      <td>21565176</td>      <td>67970291</td>      <td>11412834</td>    </tr>    <tr>      <th>2010-01-01</th>      <td>318857056</td>      <td>6072017</td>      <td>44095950</td>      <td>72867</td>      <td>421059</td>      <td>1749809</td>      <td>3764142</td>      <td>10125170</td>      <td>30401698</td>      <td>3569080</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crime.idxmax(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><pre><code>Population           2014-01-01Violent              1992-01-01Property             1991-01-01Murder               1991-01-01Forcible_Rape        1992-01-01Robbery              1991-01-01Aggravated_assault   1993-01-01Burglary             1980-01-01Larceny_Theft        1991-01-01Vehicle_Theft        1991-01-01dtype: datetime64[ns]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#探索虚拟姓名数据(练习五)</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行以下代码</span></span><br><span class="line">raw_data_1 = &#123;</span><br><span class="line">        <span class="string">'subject_id'</span>: [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>],</span><br><span class="line">        <span class="string">'first_name'</span>: [<span class="string">'Alex'</span>, <span class="string">'Amy'</span>, <span class="string">'Allen'</span>, <span class="string">'Alice'</span>, <span class="string">'Ayoung'</span>], </span><br><span class="line">        <span class="string">'last_name'</span>: [<span class="string">'Anderson'</span>, <span class="string">'Ackerman'</span>, <span class="string">'Ali'</span>, <span class="string">'Aoni'</span>, <span class="string">'Atiches'</span>]&#125;</span><br><span class="line"></span><br><span class="line">raw_data_2 = &#123;</span><br><span class="line">        <span class="string">'subject_id'</span>: [<span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>],</span><br><span class="line">        <span class="string">'first_name'</span>: [<span class="string">'Billy'</span>, <span class="string">'Brian'</span>, <span class="string">'Bran'</span>, <span class="string">'Bryce'</span>, <span class="string">'Betty'</span>], </span><br><span class="line">        <span class="string">'last_name'</span>: [<span class="string">'Bonder'</span>, <span class="string">'Black'</span>, <span class="string">'Balwner'</span>, <span class="string">'Brice'</span>, <span class="string">'Btisan'</span>]&#125;</span><br><span class="line"></span><br><span class="line">raw_data_3 = &#123;</span><br><span class="line">        <span class="string">'subject_id'</span>: [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'10'</span>, <span class="string">'11'</span>],</span><br><span class="line">        <span class="string">'test_id'</span>: [<span class="number">51</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">61</span>, <span class="number">16</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">61</span>, <span class="number">16</span>]&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data1 = pd.DataFrame(raw_data_1,columns=[<span class="string">'subject_id'</span>,<span class="string">'first_name'</span>,<span class="string">'last_name'</span>])</span><br><span class="line">data2 = pd.DataFrame(raw_data_2,columns=[<span class="string">'subject_id'</span>,<span class="string">'first_name'</span>,<span class="string">'last_name'</span>])</span><br><span class="line">data3 = pd.DataFrame(raw_data_3,columns=[<span class="string">'subject_id'</span>,<span class="string">'test_id'</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">all_data = pd.concat([data1,data2])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">all_data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>subject_id</th>      <th>first_name</th>      <th>last_name</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>Alex</td>      <td>Anderson</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>Amy</td>      <td>Ackerman</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>Allen</td>      <td>Ali</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>Alice</td>      <td>Aoni</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>Ayoung</td>      <td>Atiches</td>    </tr>    <tr>      <th>0</th>      <td>4</td>      <td>Billy</td>      <td>Bonder</td>    </tr>    <tr>      <th>1</th>      <td>5</td>      <td>Brian</td>      <td>Black</td>    </tr>    <tr>      <th>2</th>      <td>6</td>      <td>Bran</td>      <td>Balwner</td>    </tr>    <tr>      <th>3</th>      <td>7</td>      <td>Bryce</td>      <td>Brice</td>    </tr>    <tr>      <th>4</th>      <td>8</td>      <td>Betty</td>      <td>Btisan</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">all_data_col = pd.concat([data1,data2],axis=<span class="number">1</span>)</span><br><span class="line">all_data_col</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>subject_id</th>      <th>first_name</th>      <th>last_name</th>      <th>subject_id</th>      <th>first_name</th>      <th>last_name</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>Alex</td>      <td>Anderson</td>      <td>4</td>      <td>Billy</td>      <td>Bonder</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>Amy</td>      <td>Ackerman</td>      <td>5</td>      <td>Brian</td>      <td>Black</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>Allen</td>      <td>Ali</td>      <td>6</td>      <td>Bran</td>      <td>Balwner</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>Alice</td>      <td>Aoni</td>      <td>7</td>      <td>Bryce</td>      <td>Brice</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>Ayoung</td>      <td>Atiches</td>      <td>8</td>      <td>Betty</td>      <td>Btisan</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data3</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>subject_id</th>      <th>test_id</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>51</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>15</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>15</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>61</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>16</td>    </tr>    <tr>      <th>5</th>      <td>7</td>      <td>14</td>    </tr>    <tr>      <th>6</th>      <td>8</td>      <td>15</td>    </tr>    <tr>      <th>7</th>      <td>9</td>      <td>1</td>    </tr>    <tr>      <th>8</th>      <td>10</td>      <td>61</td>    </tr>    <tr>      <th>9</th>      <td>11</td>      <td>16</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(all_data,data3,on=<span class="string">'subject_id'</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>subject_id</th>      <th>first_name</th>      <th>last_name</th>      <th>test_id</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>Alex</td>      <td>Anderson</td>      <td>51</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>Amy</td>      <td>Ackerman</td>      <td>15</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>Allen</td>      <td>Ali</td>      <td>15</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>Alice</td>      <td>Aoni</td>      <td>61</td>    </tr>    <tr>      <th>4</th>      <td>4</td>      <td>Billy</td>      <td>Bonder</td>      <td>61</td>    </tr>    <tr>      <th>5</th>      <td>5</td>      <td>Ayoung</td>      <td>Atiches</td>      <td>16</td>    </tr>    <tr>      <th>6</th>      <td>5</td>      <td>Brian</td>      <td>Black</td>      <td>16</td>    </tr>    <tr>      <th>7</th>      <td>7</td>      <td>Bryce</td>      <td>Brice</td>      <td>14</td>    </tr>    <tr>      <th>8</th>      <td>8</td>      <td>Betty</td>      <td>Btisan</td>      <td>15</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(data1,data2,on=<span class="string">'subject_id'</span>,how=<span class="string">'inner'</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>subject_id</th>      <th>first_name_x</th>      <th>last_name_x</th>      <th>first_name_y</th>      <th>last_name_y</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>4</td>      <td>Alice</td>      <td>Aoni</td>      <td>Billy</td>      <td>Bonder</td>    </tr>    <tr>      <th>1</th>      <td>5</td>      <td>Ayoung</td>      <td>Atiches</td>      <td>Brian</td>      <td>Black</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(data1,data2,on=<span class="string">'subject_id'</span>,how=<span class="string">'outer'</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>subject_id</th>      <th>first_name_x</th>      <th>last_name_x</th>      <th>first_name_y</th>      <th>last_name_y</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>Alex</td>      <td>Anderson</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>Amy</td>      <td>Ackerman</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>Allen</td>      <td>Ali</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>Alice</td>      <td>Aoni</td>      <td>Billy</td>      <td>Bonder</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>Ayoung</td>      <td>Atiches</td>      <td>Brian</td>      <td>Black</td>    </tr>    <tr>      <th>5</th>      <td>6</td>      <td>NaN</td>      <td>NaN</td>      <td>Bran</td>      <td>Balwner</td>    </tr>    <tr>      <th>6</th>      <td>7</td>      <td>NaN</td>      <td>NaN</td>      <td>Bryce</td>      <td>Brice</td>    </tr>    <tr>      <th>7</th>      <td>8</td>      <td>NaN</td>      <td>NaN</td>      <td>Betty</td>      <td>Btisan</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#探索风速数据（练习6）</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'wind.data'</span>,sep = <span class="string">'\s+'</span>,parse_dates = [[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Yr_Mo_Dy</th>      <th>RPT</th>      <th>VAL</th>      <th>ROS</th>      <th>KIL</th>      <th>SHA</th>      <th>BIR</th>      <th>DUB</th>      <th>CLA</th>      <th>MUL</th>      <th>CLO</th>      <th>BEL</th>      <th>MAL</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2061-01-01</td>      <td>15.04</td>      <td>14.96</td>      <td>13.17</td>      <td>9.29</td>      <td>NaN</td>      <td>9.87</td>      <td>13.67</td>      <td>10.25</td>      <td>10.83</td>      <td>12.58</td>      <td>18.50</td>      <td>15.04</td>    </tr>    <tr>      <th>1</th>      <td>2061-01-02</td>      <td>14.71</td>      <td>NaN</td>      <td>10.83</td>      <td>6.50</td>      <td>12.62</td>      <td>7.67</td>      <td>11.50</td>      <td>10.04</td>      <td>9.79</td>      <td>9.67</td>      <td>17.54</td>      <td>13.83</td>    </tr>    <tr>      <th>2</th>      <td>2061-01-03</td>      <td>18.50</td>      <td>16.88</td>      <td>12.33</td>      <td>10.13</td>      <td>11.17</td>      <td>6.17</td>      <td>11.25</td>      <td>NaN</td>      <td>8.50</td>      <td>7.67</td>      <td>12.75</td>      <td>12.71</td>    </tr>    <tr>      <th>3</th>      <td>2061-01-04</td>      <td>10.58</td>      <td>6.63</td>      <td>11.75</td>      <td>4.58</td>      <td>4.54</td>      <td>2.88</td>      <td>8.63</td>      <td>1.79</td>      <td>5.83</td>      <td>5.88</td>      <td>5.46</td>      <td>10.88</td>    </tr>    <tr>      <th>4</th>      <td>2061-01-05</td>      <td>13.33</td>      <td>13.25</td>      <td>11.42</td>      <td>6.17</td>      <td>10.71</td>      <td>8.21</td>      <td>11.92</td>      <td>6.54</td>      <td>10.92</td>      <td>10.34</td>      <td>12.92</td>      <td>11.83</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fix_century</span><span class="params">(x)</span>:</span></span><br><span class="line">    year = x.year - <span class="number">100</span> <span class="keyword">if</span> x.year &gt; <span class="number">1989</span> <span class="keyword">else</span> x.year</span><br><span class="line">    <span class="keyword">return</span> datetime.date(year,x.month,x.day)</span><br><span class="line">data[<span class="string">'Yr_Mo_Dy'</span>] = data[<span class="string">'Yr_Mo_Dy'</span>].apply(fix_century)</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Yr_Mo_Dy</th>      <th>RPT</th>      <th>VAL</th>      <th>ROS</th>      <th>KIL</th>      <th>SHA</th>      <th>BIR</th>      <th>DUB</th>      <th>CLA</th>      <th>MUL</th>      <th>CLO</th>      <th>BEL</th>      <th>MAL</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1961-01-01</td>      <td>15.04</td>      <td>14.96</td>      <td>13.17</td>      <td>9.29</td>      <td>NaN</td>      <td>9.87</td>      <td>13.67</td>      <td>10.25</td>      <td>10.83</td>      <td>12.58</td>      <td>18.50</td>      <td>15.04</td>    </tr>    <tr>      <th>1</th>      <td>1961-01-02</td>      <td>14.71</td>      <td>NaN</td>      <td>10.83</td>      <td>6.50</td>      <td>12.62</td>      <td>7.67</td>      <td>11.50</td>      <td>10.04</td>      <td>9.79</td>      <td>9.67</td>      <td>17.54</td>      <td>13.83</td>    </tr>    <tr>      <th>2</th>      <td>1961-01-03</td>      <td>18.50</td>      <td>16.88</td>      <td>12.33</td>      <td>10.13</td>      <td>11.17</td>      <td>6.17</td>      <td>11.25</td>      <td>NaN</td>      <td>8.50</td>      <td>7.67</td>      <td>12.75</td>      <td>12.71</td>    </tr>    <tr>      <th>3</th>      <td>1961-01-04</td>      <td>10.58</td>      <td>6.63</td>      <td>11.75</td>      <td>4.58</td>      <td>4.54</td>      <td>2.88</td>      <td>8.63</td>      <td>1.79</td>      <td>5.83</td>      <td>5.88</td>      <td>5.46</td>      <td>10.88</td>    </tr>    <tr>      <th>4</th>      <td>1961-01-05</td>      <td>13.33</td>      <td>13.25</td>      <td>11.42</td>      <td>6.17</td>      <td>10.71</td>      <td>8.21</td>      <td>11.92</td>      <td>6.54</td>      <td>10.92</td>      <td>10.34</td>      <td>12.92</td>      <td>11.83</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'Yr_Mo_Dy'</span>] = pd.to_datetime(data[<span class="string">'Yr_Mo_Dy'</span>])</span><br><span class="line">data = data.set_index(<span class="string">'Yr_Mo_Dy'</span>)</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>RPT</th>      <th>VAL</th>      <th>ROS</th>      <th>KIL</th>      <th>SHA</th>      <th>BIR</th>      <th>DUB</th>      <th>CLA</th>      <th>MUL</th>      <th>CLO</th>      <th>BEL</th>      <th>MAL</th>    </tr>    <tr>      <th>Yr_Mo_Dy</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>1961-01-01</th>      <td>15.04</td>      <td>14.96</td>      <td>13.17</td>      <td>9.29</td>      <td>NaN</td>      <td>9.87</td>      <td>13.67</td>      <td>10.25</td>      <td>10.83</td>      <td>12.58</td>      <td>18.50</td>      <td>15.04</td>    </tr>    <tr>      <th>1961-01-02</th>      <td>14.71</td>      <td>NaN</td>      <td>10.83</td>      <td>6.50</td>      <td>12.62</td>      <td>7.67</td>      <td>11.50</td>      <td>10.04</td>      <td>9.79</td>      <td>9.67</td>      <td>17.54</td>      <td>13.83</td>    </tr>    <tr>      <th>1961-01-03</th>      <td>18.50</td>      <td>16.88</td>      <td>12.33</td>      <td>10.13</td>      <td>11.17</td>      <td>6.17</td>      <td>11.25</td>      <td>NaN</td>      <td>8.50</td>      <td>7.67</td>      <td>12.75</td>      <td>12.71</td>    </tr>    <tr>      <th>1961-01-04</th>      <td>10.58</td>      <td>6.63</td>      <td>11.75</td>      <td>4.58</td>      <td>4.54</td>      <td>2.88</td>      <td>8.63</td>      <td>1.79</td>      <td>5.83</td>      <td>5.88</td>      <td>5.46</td>      <td>10.88</td>    </tr>    <tr>      <th>1961-01-05</th>      <td>13.33</td>      <td>13.25</td>      <td>11.42</td>      <td>6.17</td>      <td>10.71</td>      <td>8.21</td>      <td>11.92</td>      <td>6.54</td>      <td>10.92</td>      <td>10.34</td>      <td>12.92</td>      <td>11.83</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;DatetimeIndex: 6574 entries, 1961-01-01 to 1978-12-31Data columns (total 12 columns): #   Column  Non-Null Count  Dtype  ---  ------  --------------  -----   0   RPT     6568 non-null   float64 1   VAL     6571 non-null   float64 2   ROS     6572 non-null   float64 3   KIL     6569 non-null   float64 4   SHA     6572 non-null   float64 5   BIR     6574 non-null   float64 6   DUB     6571 non-null   float64 7   CLA     6572 non-null   float64 8   MUL     6571 non-null   float64 9   CLO     6573 non-null   float64 10  BEL     6574 non-null   float64 11  MAL     6570 non-null   float64dtypes: float64(12)memory usage: 667.7 KB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.isnull().sum()</span><br></pre></td></tr></table></figure><pre><code>RPT    6VAL    3ROS    2KIL    5SHA    2BIR    0DUB    3CLA    2MUL    3CLO    1BEL    0MAL    4dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.notnull().sum()</span><br></pre></td></tr></table></figure><pre><code>RPT    6568VAL    6571ROS    6572KIL    6569SHA    6572BIR    6574DUB    6571CLA    6572MUL    6571CLO    6573BEL    6574MAL    6570dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.mean().mean()</span><br></pre></td></tr></table></figure><pre><code>10.227982360836924</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">loc_stats = pd.DataFrame()</span><br><span class="line">loc_stats[<span class="string">'min'</span>] = data.min()</span><br><span class="line">loc_stats[<span class="string">'max'</span>] = data.max()</span><br><span class="line">loc_stats[<span class="string">'mean'</span>] = data.mean()</span><br><span class="line">loc_stats[<span class="string">'std'</span>] = data.std()</span><br><span class="line">loc_stats</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>min</th>      <th>max</th>      <th>mean</th>      <th>std</th>    </tr>  </thead>  <tbody>    <tr>      <th>RPT</th>      <td>0.67</td>      <td>35.80</td>      <td>12.362987</td>      <td>5.618413</td>    </tr>    <tr>      <th>VAL</th>      <td>0.21</td>      <td>33.37</td>      <td>10.644314</td>      <td>5.267356</td>    </tr>    <tr>      <th>ROS</th>      <td>1.50</td>      <td>33.84</td>      <td>11.660526</td>      <td>5.008450</td>    </tr>    <tr>      <th>KIL</th>      <td>0.00</td>      <td>28.46</td>      <td>6.306468</td>      <td>3.605811</td>    </tr>    <tr>      <th>SHA</th>      <td>0.13</td>      <td>37.54</td>      <td>10.455834</td>      <td>4.936125</td>    </tr>    <tr>      <th>BIR</th>      <td>0.00</td>      <td>26.16</td>      <td>7.092254</td>      <td>3.968683</td>    </tr>    <tr>      <th>DUB</th>      <td>0.00</td>      <td>30.37</td>      <td>9.797343</td>      <td>4.977555</td>    </tr>    <tr>      <th>CLA</th>      <td>0.00</td>      <td>31.08</td>      <td>8.495053</td>      <td>4.499449</td>    </tr>    <tr>      <th>MUL</th>      <td>0.00</td>      <td>25.88</td>      <td>8.493590</td>      <td>4.166872</td>    </tr>    <tr>      <th>CLO</th>      <td>0.04</td>      <td>28.21</td>      <td>8.707332</td>      <td>4.503954</td>    </tr>    <tr>      <th>BEL</th>      <td>0.13</td>      <td>42.38</td>      <td>13.121007</td>      <td>5.835037</td>    </tr>    <tr>      <th>MAL</th>      <td>0.67</td>      <td>42.54</td>      <td>15.599079</td>      <td>6.699794</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">loc_stats_col = pd.DataFrame()</span><br><span class="line">loc_stats_col[<span class="string">'min'</span>] = data.min(<span class="number">1</span>)</span><br><span class="line">loc_stats_col[<span class="string">'max'</span>] = data.max(<span class="number">1</span>)</span><br><span class="line">loc_stats_col[<span class="string">'mean'</span>] = data.mean(<span class="number">1</span>)</span><br><span class="line">loc_stats_col[<span class="string">'std'</span>] = data.std(<span class="number">1</span>)</span><br><span class="line">loc_stats_col.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>min</th>      <th>max</th>      <th>mean</th>      <th>std</th>    </tr>    <tr>      <th>Yr_Mo_Dy</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>1961-01-01</th>      <td>9.29</td>      <td>18.50</td>      <td>13.018182</td>      <td>2.808875</td>    </tr>    <tr>      <th>1961-01-02</th>      <td>6.50</td>      <td>17.54</td>      <td>11.336364</td>      <td>3.188994</td>    </tr>    <tr>      <th>1961-01-03</th>      <td>6.17</td>      <td>18.50</td>      <td>11.641818</td>      <td>3.681912</td>    </tr>    <tr>      <th>1961-01-04</th>      <td>1.79</td>      <td>11.75</td>      <td>6.619167</td>      <td>3.198126</td>    </tr>    <tr>      <th>1961-01-05</th>      <td>6.17</td>      <td>13.33</td>      <td>10.630000</td>      <td>2.445356</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'date'</span>] = data.index</span><br><span class="line">data[<span class="string">'month'</span>] = data[<span class="string">'date'</span>].apply(<span class="keyword">lambda</span> date:date.month)</span><br><span class="line">data[<span class="string">'year'</span>] = data[<span class="string">'date'</span>].apply(<span class="keyword">lambda</span> date:date.year)</span><br><span class="line">data[<span class="string">'day'</span>] = data[<span class="string">'date'</span>].apply(<span class="keyword">lambda</span> date:date.day)</span><br><span class="line"></span><br><span class="line">january_wind = data.query(<span class="string">'month == 1'</span>)</span><br><span class="line">january_wind</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>RPT</th>      <th>VAL</th>      <th>ROS</th>      <th>KIL</th>      <th>SHA</th>      <th>BIR</th>      <th>DUB</th>      <th>CLA</th>      <th>MUL</th>      <th>CLO</th>      <th>BEL</th>      <th>MAL</th>      <th>date</th>      <th>month</th>      <th>year</th>      <th>day</th>    </tr>    <tr>      <th>Yr_Mo_Dy</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>1961-01-01</th>      <td>15.04</td>      <td>14.96</td>      <td>13.17</td>      <td>9.29</td>      <td>NaN</td>      <td>9.87</td>      <td>13.67</td>      <td>10.25</td>      <td>10.83</td>      <td>12.58</td>      <td>18.50</td>      <td>15.04</td>      <td>1961-01-01</td>      <td>1</td>      <td>1961</td>      <td>1</td>    </tr>    <tr>      <th>1961-01-02</th>      <td>14.71</td>      <td>NaN</td>      <td>10.83</td>      <td>6.50</td>      <td>12.62</td>      <td>7.67</td>      <td>11.50</td>      <td>10.04</td>      <td>9.79</td>      <td>9.67</td>      <td>17.54</td>      <td>13.83</td>      <td>1961-01-02</td>      <td>1</td>      <td>1961</td>      <td>2</td>    </tr>    <tr>      <th>1961-01-03</th>      <td>18.50</td>      <td>16.88</td>      <td>12.33</td>      <td>10.13</td>      <td>11.17</td>      <td>6.17</td>      <td>11.25</td>      <td>NaN</td>      <td>8.50</td>      <td>7.67</td>      <td>12.75</td>      <td>12.71</td>      <td>1961-01-03</td>      <td>1</td>      <td>1961</td>      <td>3</td>    </tr>    <tr>      <th>1961-01-04</th>      <td>10.58</td>      <td>6.63</td>      <td>11.75</td>      <td>4.58</td>      <td>4.54</td>      <td>2.88</td>      <td>8.63</td>      <td>1.79</td>      <td>5.83</td>      <td>5.88</td>      <td>5.46</td>      <td>10.88</td>      <td>1961-01-04</td>      <td>1</td>      <td>1961</td>      <td>4</td>    </tr>    <tr>      <th>1961-01-05</th>      <td>13.33</td>      <td>13.25</td>      <td>11.42</td>      <td>6.17</td>      <td>10.71</td>      <td>8.21</td>      <td>11.92</td>      <td>6.54</td>      <td>10.92</td>      <td>10.34</td>      <td>12.92</td>      <td>11.83</td>      <td>1961-01-05</td>      <td>1</td>      <td>1961</td>      <td>5</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>1978-01-27</th>      <td>18.54</td>      <td>9.59</td>      <td>15.67</td>      <td>6.42</td>      <td>10.34</td>      <td>7.04</td>      <td>11.63</td>      <td>9.38</td>      <td>9.46</td>      <td>7.58</td>      <td>11.42</td>      <td>24.87</td>      <td>1978-01-27</td>      <td>1</td>      <td>1978</td>      <td>27</td>    </tr>    <tr>      <th>1978-01-28</th>      <td>35.38</td>      <td>29.88</td>      <td>18.00</td>      <td>15.96</td>      <td>26.92</td>      <td>15.67</td>      <td>15.87</td>      <td>26.34</td>      <td>15.04</td>      <td>17.75</td>      <td>34.42</td>      <td>35.83</td>      <td>1978-01-28</td>      <td>1</td>      <td>1978</td>      <td>28</td>    </tr>    <tr>      <th>1978-01-29</th>      <td>29.38</td>      <td>18.54</td>      <td>28.08</td>      <td>17.12</td>      <td>17.50</td>      <td>13.75</td>      <td>25.54</td>      <td>15.67</td>      <td>18.08</td>      <td>20.50</td>      <td>19.12</td>      <td>38.20</td>      <td>1978-01-29</td>      <td>1</td>      <td>1978</td>      <td>29</td>    </tr>    <tr>      <th>1978-01-30</th>      <td>9.62</td>      <td>8.71</td>      <td>9.59</td>      <td>2.71</td>      <td>7.58</td>      <td>3.54</td>      <td>6.08</td>      <td>6.08</td>      <td>5.33</td>      <td>4.46</td>      <td>10.41</td>      <td>12.83</td>      <td>1978-01-30</td>      <td>1</td>      <td>1978</td>      <td>30</td>    </tr>    <tr>      <th>1978-01-31</th>      <td>10.50</td>      <td>8.79</td>      <td>9.54</td>      <td>4.42</td>      <td>10.58</td>      <td>5.46</td>      <td>8.00</td>      <td>5.71</td>      <td>6.50</td>      <td>6.38</td>      <td>6.54</td>      <td>17.37</td>      <td>1978-01-31</td>      <td>1</td>      <td>1978</td>      <td>31</td>    </tr>  </tbody></table><p>558 rows × 16 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.query(<span class="string">'month == 1 and day == 1'</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>RPT</th>      <th>VAL</th>      <th>ROS</th>      <th>KIL</th>      <th>SHA</th>      <th>BIR</th>      <th>DUB</th>      <th>CLA</th>      <th>MUL</th>      <th>CLO</th>      <th>BEL</th>      <th>MAL</th>      <th>date</th>      <th>month</th>      <th>year</th>      <th>day</th>    </tr>    <tr>      <th>Yr_Mo_Dy</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>1961-01-01</th>      <td>15.04</td>      <td>14.96</td>      <td>13.17</td>      <td>9.29</td>      <td>NaN</td>      <td>9.87</td>      <td>13.67</td>      <td>10.25</td>      <td>10.83</td>      <td>12.58</td>      <td>18.50</td>      <td>15.04</td>      <td>1961-01-01</td>      <td>1</td>      <td>1961</td>      <td>1</td>    </tr>    <tr>      <th>1962-01-01</th>      <td>9.29</td>      <td>3.42</td>      <td>11.54</td>      <td>3.50</td>      <td>2.21</td>      <td>1.96</td>      <td>10.41</td>      <td>2.79</td>      <td>3.54</td>      <td>5.17</td>      <td>4.38</td>      <td>7.92</td>      <td>1962-01-01</td>      <td>1</td>      <td>1962</td>      <td>1</td>    </tr>    <tr>      <th>1963-01-01</th>      <td>15.59</td>      <td>13.62</td>      <td>19.79</td>      <td>8.38</td>      <td>12.25</td>      <td>10.00</td>      <td>23.45</td>      <td>15.71</td>      <td>13.59</td>      <td>14.37</td>      <td>17.58</td>      <td>34.13</td>      <td>1963-01-01</td>      <td>1</td>      <td>1963</td>      <td>1</td>    </tr>    <tr>      <th>1964-01-01</th>      <td>25.80</td>      <td>22.13</td>      <td>18.21</td>      <td>13.25</td>      <td>21.29</td>      <td>14.79</td>      <td>14.12</td>      <td>19.58</td>      <td>13.25</td>      <td>16.75</td>      <td>28.96</td>      <td>21.00</td>      <td>1964-01-01</td>      <td>1</td>      <td>1964</td>      <td>1</td>    </tr>    <tr>      <th>1965-01-01</th>      <td>9.54</td>      <td>11.92</td>      <td>9.00</td>      <td>4.38</td>      <td>6.08</td>      <td>5.21</td>      <td>10.25</td>      <td>6.08</td>      <td>5.71</td>      <td>8.63</td>      <td>12.04</td>      <td>17.41</td>      <td>1965-01-01</td>      <td>1</td>      <td>1965</td>      <td>1</td>    </tr>    <tr>      <th>1966-01-01</th>      <td>22.04</td>      <td>21.50</td>      <td>17.08</td>      <td>12.75</td>      <td>22.17</td>      <td>15.59</td>      <td>21.79</td>      <td>18.12</td>      <td>16.66</td>      <td>17.83</td>      <td>28.33</td>      <td>23.79</td>      <td>1966-01-01</td>      <td>1</td>      <td>1966</td>      <td>1</td>    </tr>    <tr>      <th>1967-01-01</th>      <td>6.46</td>      <td>4.46</td>      <td>6.50</td>      <td>3.21</td>      <td>6.67</td>      <td>3.79</td>      <td>11.38</td>      <td>3.83</td>      <td>7.71</td>      <td>9.08</td>      <td>10.67</td>      <td>20.91</td>      <td>1967-01-01</td>      <td>1</td>      <td>1967</td>      <td>1</td>    </tr>    <tr>      <th>1968-01-01</th>      <td>30.04</td>      <td>17.88</td>      <td>16.25</td>      <td>16.25</td>      <td>21.79</td>      <td>12.54</td>      <td>18.16</td>      <td>16.62</td>      <td>18.75</td>      <td>17.62</td>      <td>22.25</td>      <td>27.29</td>      <td>1968-01-01</td>      <td>1</td>      <td>1968</td>      <td>1</td>    </tr>    <tr>      <th>1969-01-01</th>      <td>6.13</td>      <td>1.63</td>      <td>5.41</td>      <td>1.08</td>      <td>2.54</td>      <td>1.00</td>      <td>8.50</td>      <td>2.42</td>      <td>4.58</td>      <td>6.34</td>      <td>9.17</td>      <td>16.71</td>      <td>1969-01-01</td>      <td>1</td>      <td>1969</td>      <td>1</td>    </tr>    <tr>      <th>1970-01-01</th>      <td>9.59</td>      <td>2.96</td>      <td>11.79</td>      <td>3.42</td>      <td>6.13</td>      <td>4.08</td>      <td>9.00</td>      <td>4.46</td>      <td>7.29</td>      <td>3.50</td>      <td>7.33</td>      <td>13.00</td>      <td>1970-01-01</td>      <td>1</td>      <td>1970</td>      <td>1</td>    </tr>    <tr>      <th>1971-01-01</th>      <td>3.71</td>      <td>0.79</td>      <td>4.71</td>      <td>0.17</td>      <td>1.42</td>      <td>1.04</td>      <td>4.63</td>      <td>0.75</td>      <td>1.54</td>      <td>1.08</td>      <td>4.21</td>      <td>9.54</td>      <td>1971-01-01</td>      <td>1</td>      <td>1971</td>      <td>1</td>    </tr>    <tr>      <th>1972-01-01</th>      <td>9.29</td>      <td>3.63</td>      <td>14.54</td>      <td>4.25</td>      <td>6.75</td>      <td>4.42</td>      <td>13.00</td>      <td>5.33</td>      <td>10.04</td>      <td>8.54</td>      <td>8.71</td>      <td>19.17</td>      <td>1972-01-01</td>      <td>1</td>      <td>1972</td>      <td>1</td>    </tr>    <tr>      <th>1973-01-01</th>      <td>16.50</td>      <td>15.92</td>      <td>14.62</td>      <td>7.41</td>      <td>8.29</td>      <td>11.21</td>      <td>13.54</td>      <td>7.79</td>      <td>10.46</td>      <td>10.79</td>      <td>13.37</td>      <td>9.71</td>      <td>1973-01-01</td>      <td>1</td>      <td>1973</td>      <td>1</td>    </tr>    <tr>      <th>1974-01-01</th>      <td>23.21</td>      <td>16.54</td>      <td>16.08</td>      <td>9.75</td>      <td>15.83</td>      <td>11.46</td>      <td>9.54</td>      <td>13.54</td>      <td>13.83</td>      <td>16.66</td>      <td>17.21</td>      <td>25.29</td>      <td>1974-01-01</td>      <td>1</td>      <td>1974</td>      <td>1</td>    </tr>    <tr>      <th>1975-01-01</th>      <td>14.04</td>      <td>13.54</td>      <td>11.29</td>      <td>5.46</td>      <td>12.58</td>      <td>5.58</td>      <td>8.12</td>      <td>8.96</td>      <td>9.29</td>      <td>5.17</td>      <td>7.71</td>      <td>11.63</td>      <td>1975-01-01</td>      <td>1</td>      <td>1975</td>      <td>1</td>    </tr>    <tr>      <th>1976-01-01</th>      <td>18.34</td>      <td>17.67</td>      <td>14.83</td>      <td>8.00</td>      <td>16.62</td>      <td>10.13</td>      <td>13.17</td>      <td>9.04</td>      <td>13.13</td>      <td>5.75</td>      <td>11.38</td>      <td>14.96</td>      <td>1976-01-01</td>      <td>1</td>      <td>1976</td>      <td>1</td>    </tr>    <tr>      <th>1977-01-01</th>      <td>20.04</td>      <td>11.92</td>      <td>20.25</td>      <td>9.13</td>      <td>9.29</td>      <td>8.04</td>      <td>10.75</td>      <td>5.88</td>      <td>9.00</td>      <td>9.00</td>      <td>14.88</td>      <td>25.70</td>      <td>1977-01-01</td>      <td>1</td>      <td>1977</td>      <td>1</td>    </tr>    <tr>      <th>1978-01-01</th>      <td>8.33</td>      <td>7.12</td>      <td>7.71</td>      <td>3.54</td>      <td>8.50</td>      <td>7.50</td>      <td>14.71</td>      <td>10.00</td>      <td>11.83</td>      <td>10.00</td>      <td>15.09</td>      <td>20.46</td>      <td>1978-01-01</td>      <td>1</td>      <td>1978</td>      <td>1</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#探索泰坦尼克号灾难数据（练习7）</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">titanic = pd.read_csv(<span class="string">'train.csv'</span>)</span><br><span class="line">titanic.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Name</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Ticket</th>      <th>Fare</th>      <th>Cabin</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>0</td>      <td>3</td>      <td>Braund, Mr. Owen Harris</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>A/5 21171</td>      <td>7.2500</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>1</td>      <td>1</td>      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>PC 17599</td>      <td>71.2833</td>      <td>C85</td>      <td>C</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>1</td>      <td>3</td>      <td>Heikkinen, Miss. Laina</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>STON/O2. 3101282</td>      <td>7.9250</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>1</td>      <td>1</td>      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>113803</td>      <td>53.1000</td>      <td>C123</td>      <td>S</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>0</td>      <td>3</td>      <td>Allen, Mr. William Henry</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>373450</td>      <td>8.0500</td>      <td>NaN</td>      <td>S</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> titanic[<span class="string">'Name'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic.set_index(<span class="string">'PassengerId'</span>).head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Survived</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Ticket</th>      <th>Fare</th>      <th>Cabin</th>      <th>Embarked</th>    </tr>    <tr>      <th>PassengerId</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>0</td>      <td>3</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>A/5 21171</td>      <td>7.2500</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>1</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>PC 17599</td>      <td>71.2833</td>      <td>C85</td>      <td>C</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>3</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>STON/O2. 3101282</td>      <td>7.9250</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <th>4</th>      <td>1</td>      <td>1</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>113803</td>      <td>53.1000</td>      <td>C123</td>      <td>S</td>    </tr>    <tr>      <th>5</th>      <td>0</td>      <td>3</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>373450</td>      <td>8.0500</td>      <td>NaN</td>      <td>S</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">males = (titanic[<span class="string">'Sex'</span>] == <span class="string">'male'</span>).sum()</span><br><span class="line">females = (titanic[<span class="string">'Sex'</span>] == <span class="string">'female'</span>).sum()</span><br><span class="line">proportions = [males,females]</span><br><span class="line">plt.pie(</span><br><span class="line">    proportions,</span><br><span class="line">    shadow =<span class="literal">False</span>,</span><br><span class="line">    colors=[<span class="string">'blue'</span>,<span class="string">'red'</span>],</span><br><span class="line">    explode=(<span class="number">0.15</span>,<span class="number">0</span>),</span><br><span class="line">    startangle=<span class="number">90</span>,</span><br><span class="line">    autopct=<span class="string">'%1.1f%%'</span></span><br><span class="line">)</span><br><span class="line">plt.axis(<span class="string">'equal'</span>)</span><br><span class="line">plt.title(<span class="string">'Sex Proportion'</span>)</span><br><span class="line"></span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2021/03/31/exercise/output_65_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lm = sns.lmplot(x=<span class="string">'Age'</span>,</span><br><span class="line">               y=<span class="string">'Fare'</span>,</span><br><span class="line">               data=titanic,</span><br><span class="line">                hue=<span class="string">'Sex'</span>,</span><br><span class="line">                fit_reg=<span class="literal">False</span></span><br><span class="line">               )</span><br><span class="line">lm.set(title=<span class="string">'Fare x Age'</span>)</span><br><span class="line">axes = lm.axes</span><br><span class="line">axes[<span class="number">0</span>,<span class="number">0</span>].set_ylim(<span class="number">-5</span>,)</span><br><span class="line">axes[<span class="number">0</span>,<span class="number">0</span>].set_xlim(<span class="number">-5</span>,<span class="number">85</span>)</span><br></pre></td></tr></table></figure><pre><code>(-5, 85)</code></pre><p><img src="/2021/03/31/exercise/output_66_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic.Survived.sum()</span><br></pre></td></tr></table></figure><pre><code>342</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">df = titanic.Fare.sort_values(ascending=<span class="literal">False</span>)</span><br><span class="line">df</span><br><span class="line"></span><br><span class="line">binsVal = np.arange(<span class="number">0</span>,<span class="number">600</span>,<span class="number">10</span>)</span><br><span class="line">binsVal</span><br><span class="line"></span><br><span class="line">plt.hist(df,bins=binsVal)</span><br><span class="line">plt.xlabel(<span class="string">'Fare'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Frequency'</span>)</span><br><span class="line">plt.title(<span class="string">'Fare Payed Histrogram'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2021/03/31/exercise/output_68_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#探索Pokemon数据(练习8)</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">raw_data = &#123;<span class="string">"name"</span>: [<span class="string">'Bulbasaur'</span>, <span class="string">'Charmander'</span>,<span class="string">'Squirtle'</span>,<span class="string">'Caterpie'</span>],</span><br><span class="line">            <span class="string">"evolution"</span>: [<span class="string">'Ivysaur'</span>,<span class="string">'Charmeleon'</span>,<span class="string">'Wartortle'</span>,<span class="string">'Metapod'</span>],</span><br><span class="line">            <span class="string">"type"</span>: [<span class="string">'grass'</span>, <span class="string">'fire'</span>, <span class="string">'water'</span>, <span class="string">'bug'</span>],</span><br><span class="line">            <span class="string">"hp"</span>: [<span class="number">45</span>, <span class="number">39</span>, <span class="number">44</span>, <span class="number">45</span>],</span><br><span class="line">            <span class="string">"pokedex"</span>: [<span class="string">'yes'</span>, <span class="string">'no'</span>,<span class="string">'yes'</span>,<span class="string">'no'</span>]                        </span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raw_data</span><br></pre></td></tr></table></figure><pre><code>{&apos;name&apos;: [&apos;Bulbasaur&apos;, &apos;Charmander&apos;, &apos;Squirtle&apos;, &apos;Caterpie&apos;], &apos;evolution&apos;: [&apos;Ivysaur&apos;, &apos;Charmeleon&apos;, &apos;Wartortle&apos;, &apos;Metapod&apos;], &apos;type&apos;: [&apos;grass&apos;, &apos;fire&apos;, &apos;water&apos;, &apos;bug&apos;], &apos;hp&apos;: [45, 39, 44, 45], &apos;pokedex&apos;: [&apos;yes&apos;, &apos;no&apos;, &apos;yes&apos;, &apos;no&apos;]}</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pokemon = pd.DataFrame(raw_data)</span><br><span class="line">pokemon.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>name</th>      <th>evolution</th>      <th>type</th>      <th>hp</th>      <th>pokedex</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Bulbasaur</td>      <td>Ivysaur</td>      <td>grass</td>      <td>45</td>      <td>yes</td>    </tr>    <tr>      <th>1</th>      <td>Charmander</td>      <td>Charmeleon</td>      <td>fire</td>      <td>39</td>      <td>no</td>    </tr>    <tr>      <th>2</th>      <td>Squirtle</td>      <td>Wartortle</td>      <td>water</td>      <td>44</td>      <td>yes</td>    </tr>    <tr>      <th>3</th>      <td>Caterpie</td>      <td>Metapod</td>      <td>bug</td>      <td>45</td>      <td>no</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pokemon = pokemon[[<span class="string">'name'</span>,<span class="string">'type'</span>,<span class="string">'hp'</span>,<span class="string">'evolution'</span>,<span class="string">'pokedex'</span>]]</span><br><span class="line">pokemon</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>name</th>      <th>type</th>      <th>hp</th>      <th>evolution</th>      <th>pokedex</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Bulbasaur</td>      <td>grass</td>      <td>45</td>      <td>Ivysaur</td>      <td>yes</td>    </tr>    <tr>      <th>1</th>      <td>Charmander</td>      <td>fire</td>      <td>39</td>      <td>Charmeleon</td>      <td>no</td>    </tr>    <tr>      <th>2</th>      <td>Squirtle</td>      <td>water</td>      <td>44</td>      <td>Wartortle</td>      <td>yes</td>    </tr>    <tr>      <th>3</th>      <td>Caterpie</td>      <td>bug</td>      <td>45</td>      <td>Metapod</td>      <td>no</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pokemon[<span class="string">'place'</span>] = [<span class="string">'park'</span>,<span class="string">'street'</span>,<span class="string">'lake'</span>,<span class="string">'forest'</span>]</span><br><span class="line">pokemon</span><br></pre></td></tr></table></figure><pre><code>/root/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.Try using .loc[row_indexer,col_indexer] = value insteadSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy  &quot;&quot;&quot;Entry point for launching an IPython kernel.</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>name</th>      <th>type</th>      <th>hp</th>      <th>evolution</th>      <th>pokedex</th>      <th>place</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Bulbasaur</td>      <td>grass</td>      <td>45</td>      <td>Ivysaur</td>      <td>yes</td>      <td>park</td>    </tr>    <tr>      <th>1</th>      <td>Charmander</td>      <td>fire</td>      <td>39</td>      <td>Charmeleon</td>      <td>no</td>      <td>street</td>    </tr>    <tr>      <th>2</th>      <td>Squirtle</td>      <td>water</td>      <td>44</td>      <td>Wartortle</td>      <td>yes</td>      <td>lake</td>    </tr>    <tr>      <th>3</th>      <td>Caterpie</td>      <td>bug</td>      <td>45</td>      <td>Metapod</td>      <td>no</td>      <td>forest</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pokemon.dtypes</span><br></pre></td></tr></table></figure><pre><code>name         objecttype         objecthp            int64evolution    objectpokedex      objectplace        objectdtype: object</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#探索Apple公司股价数据(练习9)</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apple = pd.read_csv(<span class="string">'Apple_stock.csv'</span>)</span><br><span class="line">apple.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Date</th>      <th>Open</th>      <th>High</th>      <th>Low</th>      <th>Close</th>      <th>Volume</th>      <th>Adj Close</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2014-07-08</td>      <td>96.27</td>      <td>96.80</td>      <td>93.92</td>      <td>95.35</td>      <td>65130000</td>      <td>95.35</td>    </tr>    <tr>      <th>1</th>      <td>2014-07-07</td>      <td>94.14</td>      <td>95.99</td>      <td>94.10</td>      <td>95.97</td>      <td>56305400</td>      <td>95.97</td>    </tr>    <tr>      <th>2</th>      <td>2014-07-03</td>      <td>93.67</td>      <td>94.10</td>      <td>93.20</td>      <td>94.03</td>      <td>22891800</td>      <td>94.03</td>    </tr>    <tr>      <th>3</th>      <td>2014-07-02</td>      <td>93.87</td>      <td>94.06</td>      <td>93.09</td>      <td>93.48</td>      <td>28420900</td>      <td>93.48</td>    </tr>    <tr>      <th>4</th>      <td>2014-07-01</td>      <td>93.52</td>      <td>94.07</td>      <td>93.13</td>      <td>93.52</td>      <td>38170200</td>      <td>93.52</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apple.shape</span><br></pre></td></tr></table></figure><pre><code>(8465, 7)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apple.dtypes</span><br></pre></td></tr></table></figure><pre><code>Date          objectOpen         float64High         float64Low          float64Close        float64Volume         int64Adj Close    float64dtype: object</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apple.Date = pd.to_datetime(apple.Date)</span><br><span class="line">apple.Date.head()</span><br></pre></td></tr></table></figure><pre><code>0   2014-07-081   2014-07-072   2014-07-033   2014-07-024   2014-07-01Name: Date, dtype: datetime64[ns]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apple = apple.set_index(<span class="string">'Date'</span>)</span><br><span class="line">apple.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Open</th>      <th>High</th>      <th>Low</th>      <th>Close</th>      <th>Volume</th>      <th>Adj Close</th>    </tr>    <tr>      <th>Date</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2014-07-08</th>      <td>96.27</td>      <td>96.80</td>      <td>93.92</td>      <td>95.35</td>      <td>65130000</td>      <td>95.35</td>    </tr>    <tr>      <th>2014-07-07</th>      <td>94.14</td>      <td>95.99</td>      <td>94.10</td>      <td>95.97</td>      <td>56305400</td>      <td>95.97</td>    </tr>    <tr>      <th>2014-07-03</th>      <td>93.67</td>      <td>94.10</td>      <td>93.20</td>      <td>94.03</td>      <td>22891800</td>      <td>94.03</td>    </tr>    <tr>      <th>2014-07-02</th>      <td>93.87</td>      <td>94.06</td>      <td>93.09</td>      <td>93.48</td>      <td>28420900</td>      <td>93.48</td>    </tr>    <tr>      <th>2014-07-01</th>      <td>93.52</td>      <td>94.07</td>      <td>93.13</td>      <td>93.52</td>      <td>38170200</td>      <td>93.52</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apple.index.is_unique</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apple.sort_index(ascending=<span class="literal">True</span>).head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Open</th>      <th>High</th>      <th>Low</th>      <th>Close</th>      <th>Volume</th>      <th>Adj Close</th>    </tr>    <tr>      <th>Date</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>1980-12-12</th>      <td>28.75</td>      <td>28.87</td>      <td>28.75</td>      <td>28.75</td>      <td>117258400</td>      <td>0.45</td>    </tr>    <tr>      <th>1980-12-15</th>      <td>27.38</td>      <td>27.38</td>      <td>27.25</td>      <td>27.25</td>      <td>43971200</td>      <td>0.42</td>    </tr>    <tr>      <th>1980-12-16</th>      <td>25.37</td>      <td>25.37</td>      <td>25.25</td>      <td>25.25</td>      <td>26432000</td>      <td>0.39</td>    </tr>    <tr>      <th>1980-12-17</th>      <td>25.87</td>      <td>26.00</td>      <td>25.87</td>      <td>25.87</td>      <td>21610400</td>      <td>0.40</td>    </tr>    <tr>      <th>1980-12-18</th>      <td>26.63</td>      <td>26.75</td>      <td>26.63</td>      <td>26.63</td>      <td>18362400</td>      <td>0.41</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#探索Iris纸鸢花数据（练习10）</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iris = pd.read_csv(<span class="string">'iris.csv'</span>)</span><br><span class="line">iris.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>5.1</th>      <th>3.5</th>      <th>1.4</th>      <th>0.2</th>      <th>Iris-setosa</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>4.9</td>      <td>3.0</td>      <td>1.4</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>1</th>      <td>4.7</td>      <td>3.2</td>      <td>1.3</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>2</th>      <td>4.6</td>      <td>3.1</td>      <td>1.5</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>3</th>      <td>5.0</td>      <td>3.6</td>      <td>1.4</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>4</th>      <td>5.4</td>      <td>3.9</td>      <td>1.7</td>      <td>0.4</td>      <td>Iris-setosa</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iris.describe()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>5.1</th>      <th>3.5</th>      <th>1.4</th>      <th>0.2</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>149.000000</td>      <td>149.000000</td>      <td>149.000000</td>      <td>149.000000</td>    </tr>    <tr>      <th>mean</th>      <td>5.848322</td>      <td>3.051007</td>      <td>3.774497</td>      <td>1.205369</td>    </tr>    <tr>      <th>std</th>      <td>0.828594</td>      <td>0.433499</td>      <td>1.759651</td>      <td>0.761292</td>    </tr>    <tr>      <th>min</th>      <td>4.300000</td>      <td>2.000000</td>      <td>1.000000</td>      <td>0.100000</td>    </tr>    <tr>      <th>25%</th>      <td>5.100000</td>      <td>2.800000</td>      <td>1.600000</td>      <td>0.300000</td>    </tr>    <tr>      <th>50%</th>      <td>5.800000</td>      <td>3.000000</td>      <td>4.400000</td>      <td>1.300000</td>    </tr>    <tr>      <th>75%</th>      <td>6.400000</td>      <td>3.300000</td>      <td>5.100000</td>      <td>1.800000</td>    </tr>    <tr>      <th>max</th>      <td>7.900000</td>      <td>4.400000</td>      <td>6.900000</td>      <td>2.500000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iris = pd.read_csv(<span class="string">'iris.csv'</span>,names = [<span class="string">'sepal_length'</span>,<span class="string">'sepal_width'</span>, <span class="string">'petal_length'</span>, <span class="string">'petal_width'</span>, <span class="string">'class'</span>])</span><br><span class="line">iris.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>sepal_length</th>      <th>sepal_width</th>      <th>petal_length</th>      <th>petal_width</th>      <th>class</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>5.1</td>      <td>3.5</td>      <td>1.4</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>1</th>      <td>4.9</td>      <td>3.0</td>      <td>1.4</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>2</th>      <td>4.7</td>      <td>3.2</td>      <td>1.3</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>3</th>      <td>4.6</td>      <td>3.1</td>      <td>1.5</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>4</th>      <td>5.0</td>      <td>3.6</td>      <td>1.4</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.isnull(iris).sum()</span><br></pre></td></tr></table></figure><pre><code>sepal_length    0sepal_width     0petal_length    0petal_width     0class           0dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iris.iloc[<span class="number">10</span>:<span class="number">20</span>,<span class="number">2</span>:<span class="number">3</span>] = np.nan</span><br><span class="line">iris.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>sepal_length</th>      <th>sepal_width</th>      <th>petal_length</th>      <th>petal_width</th>      <th>class</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>5.1</td>      <td>3.5</td>      <td>1.4</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>1</th>      <td>4.9</td>      <td>3.0</td>      <td>1.4</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>2</th>      <td>4.7</td>      <td>3.2</td>      <td>1.3</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>3</th>      <td>4.6</td>      <td>3.1</td>      <td>1.5</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>4</th>      <td>5.0</td>      <td>3.6</td>      <td>1.4</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iris.petal_length.fillna(<span class="number">1</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">iris</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>sepal_length</th>      <th>sepal_width</th>      <th>petal_length</th>      <th>petal_width</th>      <th>class</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>5.1</td>      <td>3.5</td>      <td>1.4</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>1</th>      <td>4.9</td>      <td>3.0</td>      <td>1.4</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>2</th>      <td>4.7</td>      <td>3.2</td>      <td>1.3</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>3</th>      <td>4.6</td>      <td>3.1</td>      <td>1.5</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>4</th>      <td>5.0</td>      <td>3.6</td>      <td>1.4</td>      <td>0.2</td>      <td>Iris-setosa</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>145</th>      <td>6.7</td>      <td>3.0</td>      <td>5.2</td>      <td>2.3</td>      <td>Iris-virginica</td>    </tr>    <tr>      <th>146</th>      <td>6.3</td>      <td>2.5</td>      <td>5.0</td>      <td>1.9</td>      <td>Iris-virginica</td>    </tr>    <tr>      <th>147</th>      <td>6.5</td>      <td>3.0</td>      <td>5.2</td>      <td>2.0</td>      <td>Iris-virginica</td>    </tr>    <tr>      <th>148</th>      <td>6.2</td>      <td>3.4</td>      <td>5.4</td>      <td>2.3</td>      <td>Iris-virginica</td>    </tr>    <tr>      <th>149</th>      <td>5.9</td>      <td>3.0</td>      <td>5.1</td>      <td>1.8</td>      <td>Iris-virginica</td>    </tr>  </tbody></table><p>150 rows × 5 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> iris[<span class="string">'class'</span>]</span><br><span class="line">iris.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>sepal_length</th>      <th>sepal_width</th>      <th>petal_length</th>      <th>petal_width</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>5.1</td>      <td>3.5</td>      <td>1.4</td>      <td>0.2</td>    </tr>    <tr>      <th>1</th>      <td>4.9</td>      <td>3.0</td>      <td>1.4</td>      <td>0.2</td>    </tr>    <tr>      <th>2</th>      <td>4.7</td>      <td>3.2</td>      <td>1.3</td>      <td>0.2</td>    </tr>    <tr>      <th>3</th>      <td>4.6</td>      <td>3.1</td>      <td>1.5</td>      <td>0.2</td>    </tr>    <tr>      <th>4</th>      <td>5.0</td>      <td>3.6</td>      <td>1.4</td>      <td>0.2</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Untitled 1</title>
    <link href="https://FWj1635387072.github.io/2021/03/30/Untitled%201/"/>
    <id>https://FWj1635387072.github.io/2021/03/30/Untitled 1/</id>
    <published>2021-03-30T13:44:10.255Z</published>
    <updated>2021-03-30T13:44:10.255Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Pandas学习笔记02</title>
    <link href="https://FWj1635387072.github.io/2021/03/27/pandas02/"/>
    <id>https://FWj1635387072.github.io/2021/03/27/pandas02/</id>
    <published>2021-03-27T01:46:22.342Z</published>
    <updated>2021-03-30T13:09:37.740Z</updated>
    
    <content type="html"><![CDATA[<pre><code>Pandas学习笔记02</code></pre><a id="more"></a><h1 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h1><p>分组要确定：分组依据，数据来源、操作及返回结果。</p><p><code>df.groupby(分组依据)[数据来源].操作</code></p><p>分组的三大操作，聚合、变换、过滤</p><p>groupby对象中<code>transform</code>、<code>filter</code>、<code>apply</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">'learn_pandas.csv'</span>)</span><br><span class="line">df.drop([<span class="string">'School'</span>,<span class="string">'Name'</span>] ,axis=<span class="number">1</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">df.head(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">df.groupby([<span class="string">'Grade'</span>,<span class="string">'Gender'</span>])[[<span class="string">'Height'</span>,<span class="string">'Weight'</span>]].mean()</span><br></pre></td></tr></table></figure><p><img src="/2021/03/27/pandas02/1616810927513.png" alt="1616810927513"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gb.agg(&#123;<span class="string">'Height'</span>:[<span class="string">'mean'</span>,<span class="string">'max'</span>],</span><br><span class="line">        <span class="string">'Weight'</span>:[<span class="string">'mean'</span>,<span class="string">'max'</span>]&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2021/03/27/pandas02/1616811967342.png" alt="1616811967342"></p><p>聚合结果重命名：将字典换位元组,第一个参数为名称，第二个为方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gb.agg([(<span class="string">'range'</span>,<span class="keyword">lambda</span> x:x.max() - x.min()),</span><br><span class="line">        (<span class="string">'my_sum'</span>,<span class="string">'sum'</span>)])</span><br></pre></td></tr></table></figure><p>归一化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gb = df.groupby(<span class="string">'Type'</span>)[<span class="string">'HP'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">(s)</span>:</span></span><br><span class="line">    s_min,s_max = s.min(),s.max()</span><br><span class="line">    res = (s - s_min)/(s_max - s_min)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">gb.apply(normalize)</span><br></pre></td></tr></table></figure><h1 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h1><p><code>pivot</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">'Class'</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>],</span><br><span class="line">    <span class="string">'Name'</span>:[<span class="string">'zhangsan'</span>,<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'lisi'</span>],</span><br><span class="line">    <span class="string">'Subject'</span>:[<span class="string">'Chinese'</span>,<span class="string">'Math'</span>,<span class="string">'Chinese'</span>,<span class="string">'Math'</span>],</span><br><span class="line">    <span class="string">'Grade'</span>:[<span class="number">80</span>,<span class="number">75</span>,<span class="number">90</span>,<span class="number">85</span>]</span><br><span class="line">&#125;)</span><br><span class="line">df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df.pivot(index=<span class="string">'Name'</span>,columns=<span class="string">'Subject'</span>,values=<span class="string">'Grade'</span>)</span><br></pre></td></tr></table></figure><p><code>pivot_table</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">'Class'</span>:[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">                   <span class="string">'Name'</span>:[<span class="string">'San Zhang'</span>, <span class="string">'San Zhang'</span>, <span class="string">'Si Li'</span>, <span class="string">'Si Li'</span>,</span><br><span class="line">                              <span class="string">'San Zhang'</span>, <span class="string">'San Zhang'</span>, <span class="string">'Si Li'</span>, <span class="string">'Si Li'</span>],</span><br><span class="line">                   <span class="string">'Examination'</span>: [<span class="string">'Mid'</span>, <span class="string">'Final'</span>, <span class="string">'Mid'</span>, <span class="string">'Final'</span>,</span><br><span class="line">                                    <span class="string">'Mid'</span>, <span class="string">'Final'</span>, <span class="string">'Mid'</span>, <span class="string">'Final'</span>],</span><br><span class="line">                   <span class="string">'Subject'</span>:[<span class="string">'Chinese'</span>, <span class="string">'Chinese'</span>, <span class="string">'Chinese'</span>, <span class="string">'Chinese'</span>,</span><br><span class="line">                                 <span class="string">'Math'</span>, <span class="string">'Math'</span>, <span class="string">'Math'</span>, <span class="string">'Math'</span>],</span><br><span class="line">                   <span class="string">'Grade'</span>:[<span class="number">80</span>, <span class="number">75</span>, <span class="number">85</span>, <span class="number">65</span>, <span class="number">90</span>, <span class="number">85</span>, <span class="number">92</span>, <span class="number">88</span>],</span><br><span class="line">                   <span class="string">'rank'</span>:[<span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">2</span>]&#125;)</span><br><span class="line">df</span><br><span class="line"></span><br><span class="line">pivot_multi = df.pivot(index=[<span class="string">'Class'</span>,<span class="string">'Name'</span>],</span><br><span class="line">                      columns=[<span class="string">'Subject'</span>,<span class="string">'Examination'</span>],</span><br><span class="line">                      values=[<span class="string">'Grade'</span>,<span class="string">'rank'</span>])</span><br><span class="line">pivot_multi</span><br></pre></td></tr></table></figure><p><code>pivot_table</code>中<code>margins</code></p><p>汇总</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df.pivot_table(index=<span class="string">'Name'</span>,</span><br><span class="line">              columns=<span class="string">'Subject'</span>,</span><br><span class="line">              values=<span class="string">'Grade'</span>,</span><br><span class="line">              aggfunc=<span class="string">'mean'</span>,</span><br><span class="line">              margins=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h1 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h1><h2 id="1-缺失值的查看"><a href="#1-缺失值的查看" class="headerlink" title="1.缺失值的查看"></a>1.缺失值的查看</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'learn_pandas.csv'</span>,</span><br><span class="line">                 usecols=[<span class="string">'Grade'</span>,<span class="string">'Name'</span>,<span class="string">'Gender'</span>,<span class="string">'Height'</span>,<span class="string">'Weight'</span>,<span class="string">'Transfer'</span>])</span><br><span class="line">df.head()</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看哪些属性有缺失</span></span><br><span class="line">df.isna().mean()</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看Height属性缺失的行</span></span><br><span class="line">df[df.Height.isna()].head()</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看全部缺失的</span></span><br><span class="line">sub_set = df[[<span class="string">'Height'</span>,<span class="string">'Weight'</span>,<span class="string">'Transfer'</span>]]</span><br><span class="line">df[sub_set.isna().all(<span class="number">1</span>)]</span><br><span class="line"><span class="comment">#查看任意缺失一个的</span></span><br><span class="line">df[sub_set.isna().any(<span class="number">1</span>)].head()</span><br><span class="line"><span class="comment">#查看没有缺失的</span></span><br><span class="line">df[sub_set.notna().all(<span class="number">1</span>)].head()</span><br></pre></td></tr></table></figure><h2 id="2-缺失信息的删除"><a href="#2-缺失信息的删除" class="headerlink" title="2. 缺失信息的删除"></a>2. 缺失信息的删除</h2><p>数据处理中经常需要根据缺失值的大小、比例或其他特征来进行行样本或列特征的删除，<code>pandas</code>中提供了<code>dropna</code>函数来进行操作。</p><p><code>dropna</code>的主要参数为轴方向<code>axis</code>（默认为0，即删除行）、删除方式<code>how</code>、删除的非缺失值个数阈值<code>thresh</code>（<strong>非缺失值</strong>没有达到这个数量的相应维度会被删除）、备选的删除子集<code>subset</code>，其中<code>how</code>主要有<code>any</code>和<code>all</code>两种参数可以选择。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除身高体重至少有一个缺失的行：</span></span><br><span class="line">res = df.dropna(how = <span class="string">'any'</span>,</span><br><span class="line">               subset=[<span class="string">'Height'</span>,<span class="string">'Weight'</span>])</span><br><span class="line">res.shape</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除缺失值超过15的列</span></span><br><span class="line">res = df.dropna(<span class="number">1</span>,thresh=df.shape[<span class="number">0</span>]<span class="number">-15</span>)</span><br><span class="line">res.head()</span><br></pre></td></tr></table></figure><h2 id="3-缺失值的填充"><a href="#3-缺失值的填充" class="headerlink" title="3.缺失值的填充"></a>3.缺失值的填充</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#fillna()，value 填充值，method填充方法，limit 连续缺失值的最大填充次数</span></span><br><span class="line">s = pd.Series([np.nan, <span class="number">1</span>, np.nan, np.nan, <span class="number">2</span>, np.nan], list(<span class="string">'aaabcd'</span>))</span><br><span class="line"><span class="comment">#ffill 用后面的值填充到前面</span></span><br><span class="line">s.fillna(method=<span class="string">'ffill'</span>)</span><br><span class="line"><span class="comment">#用均值填充</span></span><br><span class="line">s.fillna(s.mean())</span><br><span class="line"><span class="comment">#有时候为了更合理，先分组后填充</span></span><br><span class="line">df.groupby(<span class="string">'Grade'</span>)[<span class="string">'Height'</span>].transform(<span class="keyword">lambda</span> x:x.fillna(x.mean())).head()</span><br></pre></td></tr></table></figure><h2 id="2-插值函数"><a href="#2-插值函数" class="headerlink" title="2. 插值函数"></a>2. 插值函数</h2><p>​    在关于<code>interpolate</code>函数的<a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.interpolate.html#pandas.Series.interpolate" target="_blank" rel="noopener">文档</a>描述中，列举了许多插值法，包括了大量<code>Scipy</code>中的方法。由于很多插值方法涉及到比较复杂的数学知识，因此这里只讨论比较常用且简单的三类情况，即线性插值、最近邻插值和索引插值。</p><p>​    对于<code>interpolate</code>而言，除了插值方法（默认为<code>linear</code>线性插值）之外，有与<code>fillna</code>类似的两个常用参数，一个是控制方向的<code>limit_direction</code>，另一个是控制最大连续缺失值插值个数的<code>limit</code>。其中，限制插值的方向默认为<code>forward</code>，这与<code>fillna</code>的<code>method</code>中的<code>ffill</code>是类似的，若想要后向限制插值或者双向限制插值可以指定为<code>backward</code>或<code>both</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([np.nan, np.nan, <span class="number">1</span>, np.nan, np.nan, np.nan, <span class="number">2</span>, np.nan, np.nan])</span><br><span class="line">s</span><br><span class="line"><span class="comment">#在默认线性插值法下分别进行`backward`和双向限制插值，同时限制最大连续条数为1：</span></span><br><span class="line">res = s.interpolate(limit_direction=<span class="string">'backward'</span>,limit=<span class="number">1</span>)</span><br><span class="line">res</span><br><span class="line">res = s.interpolate(limit_direction=<span class="string">'both'</span>,limit=<span class="number">1</span>)</span><br><span class="line">res</span><br></pre></td></tr></table></figure><p>第二种常见的插值是最近邻插补，即缺失值的元素和离它最近的非缺失值元素一样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.interpolate(<span class="string">'nearest'</span>)</span><br></pre></td></tr></table></figure><p>最后来介绍索引插值，即根据索引大小进行线性插值。例如，构造不等间距的索引进行演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">0</span>,np.nan,<span class="number">10</span>],index=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>])</span><br><span class="line">s</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认线性插值，等价于计算中点的值</span></span><br><span class="line">s.interpolate()</span><br><span class="line"><span class="comment"># 和索引有关的线性插值，计算相应索引大小对应的值</span></span><br><span class="line">s.interpolate(method=<span class="string">'index'</span>)</span><br></pre></td></tr></table></figure><h1 id="分类数据"><a href="#分类数据" class="headerlink" title="分类数据"></a>分类数据</h1><h2 id="一、cat对象"><a href="#一、cat对象" class="headerlink" title="一、cat对象"></a>一、cat对象</h2><h3 id="1-cat对象的属性"><a href="#1-cat对象的属性" class="headerlink" title="1. cat对象的属性"></a>1. cat对象的属性</h3><p>在<code>pandas</code>中提供了<code>category</code>类型，使用户能够处理分类类型的变量，将一个普通序列转换成分类变量可以使用<code>astype</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">'learn_pandas.csv'</span>,</span><br><span class="line">                 usecols=[<span class="string">'Grade'</span>,<span class="string">'Name'</span>,<span class="string">'Gender'</span>,<span class="string">'Height'</span>,<span class="string">'Weight'</span>])</span><br><span class="line">s = df.Grade.astype(<span class="string">'category'</span>)</span><br><span class="line">s.head()</span><br></pre></td></tr></table></figure><p>每一个序列的类别会被赋予唯一的整数编号，它们的编号取决于<code>cat.categories</code>中的顺序，该属性可以通过<code>codes</code>访问：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.cat.codes.head()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = s.cat.add_categories(<span class="string">'Graduate'</span>)</span><br><span class="line">s = s.cat.remove_categories(<span class="string">'Freshman'</span>)</span><br></pre></td></tr></table></figure><h2 id="二、有序分类"><a href="#二、有序分类" class="headerlink" title="二、有序分类"></a>二、有序分类</h2><h3 id="1-序的建立"><a href="#1-序的建立" class="headerlink" title="1. 序的建立"></a>1. 序的建立</h3><p>​    有序类别和无序类别可以通过<code>as_unordered</code>和<code>reorder_categories</code>互相转化，需要注意的是后者传入的参数必须是由当前序列的无序类别构成的列表，不能够增加新的类别，也不能缺少原来的类别，并且必须指定参数<code>ordered=True</code>，否则方法无效。例如，对年级高低进行相对大小的类别划分，然后再恢复无序状态：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = df.Grade.astype(<span class="string">'category'</span>)</span><br><span class="line">s = s.cat.reorder_categories([<span class="string">'Freshman'</span>, <span class="string">'Sophomore'</span>, <span class="string">'Junior'</span>, <span class="string">'Senior'</span>],ordered=<span class="literal">True</span>)</span><br><span class="line">s.head()</span><br></pre></td></tr></table></figure><p>排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df.Grade = df.Grade.astype(<span class="string">'category'</span>)</span><br><span class="line">df.Grade = df.Grade.cat.reorder_categories([<span class="string">'Freshman'</span>,<span class="string">'Sophomore'</span>,<span class="string">'Junior'</span>,<span class="string">'Senior'</span>],</span><br><span class="line">                                           ordered=<span class="literal">True</span>)</span><br><span class="line">df.sort_values(<span class="string">'Grade'</span>).head()</span><br></pre></td></tr></table></figure><h2 id="三、区间类别"><a href="#三、区间类别" class="headerlink" title="三、区间类别"></a>三、区间类别</h2><h3 id="1-利用cut和qcut进行区间构造"><a href="#1-利用cut和qcut进行区间构造" class="headerlink" title="1. 利用cut和qcut进行区间构造"></a>1. 利用cut和qcut进行区间构造</h3><p>​        区间是一种特殊的类别，在实际数据分析中，区间序列往往是通过<code>cut</code>和<code>qcut</code>方法进行构造的，这两个函数能够把原序列的数值特征进行装箱，即用区间位置来代替原来的具体数值。</p><p>首先介绍<code>cut</code>的常见用法：</p><p>​        其中，最重要的参数是<code>bins</code>，如果传入整数<code>n</code>，则代表把整个传入数组的按照最大和最小值等间距地分为<code>n</code>段。由于区间默认是左开右闭，需要在调整时把最小值包含进去，在<code>pandas</code>中的解决方案是在值最小的区间左端点再减去<code>0.001*(max-min)</code>，因此如果对序列<code>[1,2]</code>划分为2个箱子时，第一个箱子的范围<code>(0.999,1.5]</code>，第二个箱子的范围是<code>(1.5,2]</code>。如果需要指定左闭右开时，需要把<code>right</code>参数设置为<code>False</code>，相应的区间调整方法是在值最大的区间右端点再加上<code>0.001*(max-min)</code>。</p><p>…</p><h2 id="一、时序中的基本对象"><a href="#一、时序中的基本对象" class="headerlink" title="一、时序中的基本对象"></a>一、时序中的基本对象</h2><p>时间序列的概念在日常生活中十分常见，但对于一个具体的时序事件而言，可以从多个时间对象的角度来描述。例如2020年9月7日周一早上8点整需要到教室上课，这个课会在当天早上10点结束，其中包含了哪些时间概念？</p><ul><li><p>第一，会出现时间戳（Date times）的概念，即’2020-9-7 08:00:00’和’2020-9-7 10:00:00’这两个时间点分别代表了上课和下课的时刻，在<code>pandas</code>中称为<code>Timestamp</code>。同时，一系列的时间戳可以组成<code>DatetimeIndex</code>，而将它放到<code>Series</code>中后，<code>Series</code>的类型就变为了<code>datetime64[ns]</code>，如果有涉及时区则为<code>datetime64[ns, tz]</code>，其中tz是timezone的简写。</p></li><li><p>第二，会出现时间差（Time deltas）的概念，即上课需要的时间，两个<code>Timestamp</code>做差就得到了时间差，pandas中利用<code>Timedelta</code>来表示。类似的，一系列的时间差就组成了<code>TimedeltaIndex</code>， 而将它放到<code>Series</code>中后，<code>Series</code>的类型就变为了<code>timedelta64[ns]</code>。</p></li><li><p>第三，会出现时间段（Time spans）的概念，即在8点到10点这个区间都会持续地在上课，在<code>pandas</code>利用<code>Period</code>来表示。类似的，一系列的时间段就组成了<code>PeriodIndex</code>， 而将它放到<code>Series</code>中后，<code>Series</code>的类型就变为了<code>Period</code>。</p></li><li><p>第四，会出现日期偏置（Date offsets）的概念，假设你只知道9月的第一个周一早上8点要去上课，但不知道具体的日期，那么就需要一个类型来处理此类需求。再例如，想要知道2020年9月7日后的第30个工作日是哪一天，那么时间差就解决不了你的问题，从而<code>pandas</code>中的<code>DateOffset</code>就出现了。同时，<code>pandas</code>中没有为一列时间偏置专门设计存储类型，理由也很简单，因为需求比较奇怪，一般来说我们只需要对一批时间特征做一个统一的特殊日期偏置。</p></li></ul><p>通过这个简单的例子，就能够容易地总结出官方文档中的这个<a href="https://pandas.pydata.org/docs/user_guide/timeseries.html#overview" target="_blank" rel="noopener">表格</a>：</p><table><thead><tr><th align="left">概念</th><th align="left">单元素类型</th><th align="left">数组类型</th><th align="left">pandas数据类型</th></tr></thead><tbody><tr><td align="left">Date times</td><td align="left"><code>Timestamp</code></td><td align="left"><code>DatetimeIndex</code></td><td align="left"><code>datetime64[ns]</code></td></tr><tr><td align="left">Time deltas</td><td align="left"><code>Timedelta</code></td><td align="left"><code>TimedeltaIndex</code></td><td align="left"><code>timedelta64[ns]</code></td></tr><tr><td align="left">Time spans</td><td align="left"><code>Period</code></td><td align="left"><code>PeriodIndex</code></td><td align="left"><code>period[freq]</code></td></tr><tr><td align="left">Date offsets</td><td align="left"><code>DateOffset</code></td><td align="left"><code>None</code></td><td align="left"><code>None</code></td></tr></tbody></table><p>由于时间段对象<code>Period/PeriodIndex</code>的使用频率并不高，因此将不进行讲解，而只涉及时间戳序列、时间差序列和日期偏置的相关内容。</p><h2 id="二、时间戳"><a href="#二、时间戳" class="headerlink" title="二、时间戳"></a>二、时间戳</h2><h3 id="1-Timestamp的构造与属性"><a href="#1-Timestamp的构造与属性" class="headerlink" title="1. Timestamp的构造与属性"></a>1. Timestamp的构造与属性</h3><p>单个时间戳的生成利用<code>pd.Timestamp</code>实现，一般而言的常见日期格式都能被成功地转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ts = pd.Timestamp(<span class="string">'2020/1/1'</span>) </span><br><span class="line">ts</span><br><span class="line"></span><br><span class="line">ts = pd.Timestamp(<span class="string">'2020-1-1 08:10:30'</span>)</span><br><span class="line">ts</span><br></pre></td></tr></table></figure><p><code>date_range</code>是一种生成连续间隔时间的一种方法，其重要的参数为<code>start, end, freq, periods</code>，它们分别表示开始时间，结束时间，时间间隔，时间戳个数。其中，四个中的三个参数决定了，那么剩下的一个就随之确定了。这里要注意，开始或结束日期如果作为端点则它会被包含：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.date_range(<span class="string">'2020-1-1'</span>,<span class="string">'2020-1-21'</span>,freq=<span class="string">'2D'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;Pandas学习笔记02&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://FWj1635387072.github.io/categories/Python/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="https://FWj1635387072.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Pandas学习笔记01</title>
    <link href="https://FWj1635387072.github.io/2021/03/14/pandas/"/>
    <id>https://FWj1635387072.github.io/2021/03/14/pandas/</id>
    <published>2021-03-14T14:49:13.253Z</published>
    <updated>2021-03-27T01:46:19.837Z</updated>
    
    <content type="html"><![CDATA[<pre><code>Pandas的用法的总结</code></pre><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">food_info = pd.read_csv(<span class="string">"food_info.csv"</span>)</span><br><span class="line">print(food_info.dtypes)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">NDB_No               int64</span><br><span class="line">Shrt_Desc           object</span><br><span class="line">Water_(g)          float64</span><br><span class="line">Energ_Kcal           int64</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>得到前5行数据</p><p><code>head(n)</code>   n默认为5</p><p><code>column</code>得到列名</p><p><code>shape</code>得到维数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">first_rows = food_info.head()</span><br><span class="line">print(first_rows)</span><br><span class="line">print(food_info.columns)</span><br><span class="line">print(food_info.shape)</span><br></pre></td></tr></table></figure><p><code>loc[]</code>得到指定的行，可以使用切片,也可以传入list得到指定的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(food_info.loc[<span class="number">0</span>])</span><br><span class="line">print(food_info.loc[<span class="number">1</span>:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">two_five_ten = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>]</span><br><span class="line">print(food_info.loc[two_five_ten])</span><br><span class="line">print(food_info.loc[[<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>]])</span><br></pre></td></tr></table></figure><p>直接获得某行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(food_info[<span class="string">"NDB_No"</span>])</span><br><span class="line"></span><br><span class="line">columns = [<span class="string">"Zinc_(mg)"</span>,<span class="string">"Copper_(mg)"</span>]</span><br><span class="line">print(food_info[columns])</span><br><span class="line">print(food_info[[<span class="string">"Zinc_(mg)"</span>,<span class="string">"Copper_(mg)"</span>]])</span><br></pre></td></tr></table></figure><p>案例：获得后缀为”(g)”的所有行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">col_name = food_info.columns.tolist()</span><br><span class="line">gram_column = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cn <span class="keyword">in</span> col_name:</span><br><span class="line">    <span class="keyword">if</span> cn.endswith(<span class="string">"(g)"</span>):</span><br><span class="line">        gram_column.append(cn)</span><br><span class="line">gram_column = food_info[gram_column]</span><br><span class="line">print(gram_column)</span><br></pre></td></tr></table></figure><p>对某列直接进行运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">water_energy = food_info[<span class="string">"Water_(g)"</span>] * food_info[<span class="string">"Energ_Kcal"</span>]</span><br><span class="line">iron_grams = food_info[<span class="string">"Iron_(mg)"</span>] / <span class="number">1000</span></span><br><span class="line">food_info[<span class="string">"Iron_(g)"</span>] = iron_grams</span><br><span class="line">print(food_info.columns)</span><br><span class="line"><span class="comment">#如果没有某列，会直接在后面加上</span></span><br></pre></td></tr></table></figure><p>获取某列最大的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">max_calories = food_info[<span class="string">"Energ_Kcal"</span>].max()</span><br><span class="line">print(max_calories)</span><br></pre></td></tr></table></figure><p>对某列进行排序 <code>sort_values()</code></p><p><code>inplace</code>：是否替代，否，将创建另外的对象存储</p><p><code>ascending</code>：默认True，升序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">food_info.sort_values(<span class="string">"Sodium_(mg)"</span>,inplace = <span class="literal">True</span>)</span><br><span class="line">print(food_info[<span class="string">"Sodium_(mg)"</span>])</span><br><span class="line">food_info.sort_values(<span class="string">"Sodium_(mg)"</span>,inplace=<span class="literal">True</span>,ascending=<span class="literal">False</span>)</span><br><span class="line">print(food_info[<span class="string">"Sodium_(mg)"</span>])</span><br></pre></td></tr></table></figure><hr><p>案例：泰坦尼克号</p><p>数据读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">titanic_survival = pd.read_csv(<span class="string">"titanic_train.csv"</span>)</span><br><span class="line">titanic_survival.head()</span><br></pre></td></tr></table></figure><p>计算每列的空值个数（自定义函数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_null_count</span><span class="params">(column)</span>:</span></span><br><span class="line">    column_null = pd.isnull(column)</span><br><span class="line">    null = column[column_null]</span><br><span class="line">    <span class="keyword">return</span> len(null)</span><br><span class="line"></span><br><span class="line">column_null_count = titanic_survival.apply(not_null_count)</span><br><span class="line">print(column_null_count)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------------------</span></span><br><span class="line">age = titanic_survival[<span class="string">"Age"</span>]</span><br><span class="line">age_is_null = pd.isnull(age)</span><br><span class="line">age_null_count = len(age[age_is_null])</span><br><span class="line">print(age_null_count)</span><br></pre></td></tr></table></figure><p>计算平均年龄</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">good_age = titanic_survival[<span class="string">"Age"</span>][age_is_null == <span class="literal">False</span>]</span><br><span class="line">print(good_age)</span><br><span class="line">mean_age = good_age.mean()</span><br><span class="line">print(mean_age)</span><br></pre></td></tr></table></figure><p>删除某列（某几列）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic_survival.drop([<span class="string">"Name"</span>],axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>计算各个等级舱的平均船票价格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#类似于聚类</span></span><br><span class="line">pclass = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">fares_by_class = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pclass:</span><br><span class="line">    row_class = titanic_survival[titanic_survival[<span class="string">"Pclass"</span>] == i]</span><br><span class="line">    fares_class = row_class[<span class="string">"Fare"</span>]</span><br><span class="line">    fares_by_class[i] = fares_class.mean()</span><br><span class="line">print(fares_by_class)</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以使用透视表</span></span><br><span class="line">passage_fare_by_class = titanic_survival.pivot_table(index=<span class="string">"Pclass"</span>,values=<span class="string">"Fare"</span>,aggfunc=np.mean)</span><br><span class="line">print(passage_fare_by_class)</span><br></pre></td></tr></table></figure><p>透视图<code>piovt_table</code></p><p>计算每个等级船舱获救比例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">passage_survival_age = titanic_survival.pivot_table(index=<span class="string">"Pclass"</span>,values=<span class="string">"Survived"</span>,aggfunc=np.mean)</span><br><span class="line">print(passage_survival_age)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算有多少个上船地点，在某个上船地点的船费是多少</span></span><br><span class="line">port_stats = titanic_survival.pivot_table(index=<span class="string">"Embarked"</span>,values=[<span class="string">"Fare"</span>,<span class="string">"Survived"</span>],aggfunc=np.sum)</span><br><span class="line">print(port_stats)</span><br></pre></td></tr></table></figure><p>缺失值处理。。。。。。。</p><p><code>dropna</code> <code>fillna</code> ‘’ </p><hr><p><code>loc</code>获取指定元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">row_index_83_age = titanic_survival.loc[<span class="number">83</span>,<span class="string">"Age"</span>]</span><br><span class="line">row_index_1000_pclass = titanic_survival.loc[<span class="number">766</span>,<span class="string">"Pclass"</span>]</span><br><span class="line">print(row_index_1000_pclass)</span><br><span class="line">print(row_index_83_age)</span><br></pre></td></tr></table></figure><p>处理数据后将index重置<code>reset_index()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new_titanic_survival = titanic_survival.sort_values(<span class="string">"Age"</span>,ascending=<span class="literal">False</span>)</span><br><span class="line">print(new_titanic_survival)</span><br><span class="line">titanic_reindexed = new_titanic_survival.reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">print(titanic_reindexed.iloc[<span class="number">0</span>:<span class="number">10</span>])</span><br></pre></td></tr></table></figure><p>自定义函数：输出第100行元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hundred_row</span><span class="params">(column)</span>:</span></span><br><span class="line">    hundred_item = column.iloc[<span class="number">99</span>]</span><br><span class="line">    <span class="keyword">return</span> hundred_item</span><br><span class="line"></span><br><span class="line">hundred_row = titanic_survival.apply(hundred_row)</span><br><span class="line">print(hundred_row)</span><br></pre></td></tr></table></figure><p>将Class列按基数打印,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">which_class</span><span class="params">(row)</span>:</span></span><br><span class="line">    pclass = row[<span class="string">'Pclass'</span>]</span><br><span class="line">    <span class="keyword">if</span> pd.isnull(pclass):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Unknown"</span></span><br><span class="line">    <span class="keyword">elif</span> pclass == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"First Class"</span></span><br><span class="line">    <span class="keyword">elif</span> pclass == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Second Class"</span></span><br><span class="line">    <span class="keyword">elif</span> pclass == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Third Class"</span></span><br><span class="line">    </span><br><span class="line">classes = titanic_survival.apply(which_class,axis = <span class="number">1</span>)</span><br><span class="line">print(classes)</span><br></pre></td></tr></table></figure><hr><h1 id="Python基础部分"><a href="#Python基础部分" class="headerlink" title="Python基础部分"></a>Python基础部分</h1><h2 id="列表推导式和条件赋值"><a href="#列表推导式和条件赋值" class="headerlink" title="列表推导式和条件赋值"></a>列表推导式和条件赋值</h2><p>生成数字序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*x</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    L.append(my_func(i))</span><br><span class="line">L</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L = [my_func(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L = [m + <span class="string">'_'</span> + n <span class="keyword">for</span> m <span class="keyword">in</span> [<span class="string">'a'</span>,<span class="string">'b'</span>] <span class="keyword">for</span> n <span class="keyword">in</span> [<span class="string">'c'</span>,<span class="string">'d'</span>]]</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><p>语法糖带有if选择的条件赋值<code>value = A if condition else b</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">value = <span class="string">'cat'</span> <span class="keyword">if</span> <span class="number">2</span> &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">'dog'</span></span><br><span class="line">print(value)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将列表中超过5的元素用5替换</span></span><br><span class="line">L = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">L = [i <span class="keyword">if</span> i &lt; <span class="number">5</span> <span class="keyword">else</span> <span class="number">5</span> <span class="keyword">for</span> i <span class="keyword">in</span> L]</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><h2 id="匿名函数和map方法"><a href="#匿名函数和map方法" class="headerlink" title="匿名函数和map方法"></a>匿名函数和map方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_func = <span class="keyword">lambda</span> x : <span class="number">2</span>*x</span><br><span class="line">my_func(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">multi_para_func = <span class="keyword">lambda</span> a,b : a + b</span><br><span class="line">multi_para_func(<span class="number">10</span>,<span class="number">11</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="keyword">lambda</span> x : <span class="number">2</span>*x)(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br></pre></td></tr></table></figure><p>对于列表推导式的匿名函数映射，可用map函数完成，返回map对象，用list转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(<span class="keyword">lambda</span> x: <span class="number">2</span>*x,range(<span class="number">5</span>)))</span><br></pre></td></tr></table></figure><p>多值输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(<span class="keyword">lambda</span> x,y: str(x)+<span class="string">'_'</span>+y , range(<span class="number">5</span>),list(<span class="string">'abcde'</span>)))</span><br></pre></td></tr></table></figure><h2 id="zip对象和enumerate方法"><a href="#zip对象和enumerate方法" class="headerlink" title="zip对象和enumerate方法"></a>zip对象和enumerate方法</h2><p>zip可将多个可迭代对象打包成一个元组构成的可迭代对象，返回一个zip对象，通过tuple，list可以得到相应的打包结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">L1,L2,L3 = list(<span class="string">'abc'</span>),list(<span class="string">'def'</span>),list(<span class="string">'hij'</span>)</span><br><span class="line">list(zip(L1,L2,L3))</span><br><span class="line">tuple(zip(L1,L2,L3))</span><br><span class="line">out：</span><br><span class="line">[(<span class="string">'a'</span>, <span class="string">'d'</span>, <span class="string">'h'</span>), (<span class="string">'b'</span>, <span class="string">'e'</span>, <span class="string">'i'</span>), (<span class="string">'c'</span>, <span class="string">'f'</span>, <span class="string">'j'</span>)]</span><br><span class="line">((<span class="string">'a'</span>, <span class="string">'d'</span>, <span class="string">'h'</span>), (<span class="string">'b'</span>, <span class="string">'e'</span>, <span class="string">'i'</span>), (<span class="string">'c'</span>, <span class="string">'f'</span>, <span class="string">'j'</span>))</span><br></pre></td></tr></table></figure><p>迭代的时候使用zip</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i,j,k <span class="keyword">in</span> zip(L1,L2,L3):</span><br><span class="line">    print(i,j,k)</span><br></pre></td></tr></table></figure><p>enumerate特殊的打包，在迭代时绑定元素的遍历序号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">L = list(<span class="string">'abcd'</span>)</span><br><span class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> enumerate(L):</span><br><span class="line">    print(index,value)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> zip(range(len(L)),L):</span><br><span class="line">    print(index,value)</span><br></pre></td></tr></table></figure><p>两个列表建立字典映射时，可用zip对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict(zip(L1,L2))</span><br></pre></td></tr></table></figure><p>解压：zip和*配合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zipped = list(zip(L1,L2,L3))</span><br><span class="line">print(zipped)</span><br><span class="line">list(zip(*zipped))</span><br></pre></td></tr></table></figure><h2 id="练习1："><a href="#练习1：" class="headerlink" title="练习1："></a>练习1：</h2><p>列表推导式写矩阵乘法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">M1 = np.random.rand(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">M2 = np.random.rand(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">ans = [[sum([M1[i][k] * M2[k,j] <span class="keyword">for</span> k <span class="keyword">in</span> range(M1.shape[<span class="number">1</span>])]) <span class="keyword">for</span> j <span class="keyword">in</span> range(M2.shape[<span class="number">1</span>])]<span class="keyword">for</span> i <span class="keyword">in</span> range(M1.shape[<span class="number">0</span>])]</span><br><span class="line"></span><br><span class="line">ans1 = np.dot(M1,M2)</span><br><span class="line">print(ans)</span><br><span class="line">print(ans1)</span><br></pre></td></tr></table></figure><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><p><code>read_csv()  read_txt()   read_excel()</code>等，参数：</p><p><code>header=None</code>：第一行不做列名</p><p><code>index_col</code>：表示把某一列或几列作为索引</p><p><code>usecols</code>：读取列的集合，默认读所有列</p><p><code>parse_dates</code>：表示需要转换为时间的列</p><p><code>nrows</code>：表示读取的行数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pd.read_csv(<span class="string">'my_csv.csv'</span>,index_col=[<span class="string">'col1'</span>,<span class="string">'col2'</span>])</span><br><span class="line"></span><br><span class="line">pd.read_table(<span class="string">'my_table.txt'</span>,usecols=[<span class="string">'col1'</span>,<span class="string">'col2'</span>])</span><br><span class="line">pd.read_csv(<span class="string">'my_csv.csv'</span>,parse_dates=[<span class="string">'col5'</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#读取txt文件时，遇到非空格，自定义分割符</span></span><br><span class="line"><span class="comment"># sep</span></span><br><span class="line">pd.read_table(<span class="string">'my_table_special_sep.txt'</span>,sep=<span class="string">'\|\|\|\|'</span>,engine=<span class="string">'python'</span>)</span><br></pre></td></tr></table></figure><p>数据写入</p><p>​    常用的操作是把index设置为False,特别当索引没有特殊意义的时候</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_csv.to_csv(<span class="string">'my_csv_saved.csv'</span>,index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>​    python中没有<code>to_table()</code>但是<code>to_csv</code>可以保存txt文件，<code>sep</code>指定分割符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_txt.to_csv(<span class="string">'../data/my_txt_saved.txt'</span>, sep=<span class="string">'\t'</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">'learn_pandas.csv'</span>)</span><br><span class="line">df.columns</span><br><span class="line"><span class="comment">#取前7列</span></span><br><span class="line">df = df[df.columns[:<span class="number">7</span>]]</span><br><span class="line">df</span><br></pre></td></tr></table></figure><h3 id="汇总函数"><a href="#汇总函数" class="headerlink" title="汇总函数"></a>汇总函数</h3><p><code>head</code> 、<code>tail</code>、<code>info()</code>、<code>describe()</code></p><p><code>info</code>和<code>describe</code>返回表中信息概况和对应主要统计量，</p><p>如果想对一份数据集进行全面而有效的观察，特别是在列较多的情况下，推荐使用pandas-profiling包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">'learn_pandas.csv'</span>)</span><br><span class="line">df.info()</span><br><span class="line">df.describe()</span><br></pre></td></tr></table></figure><h3 id="特征统计函数"><a href="#特征统计函数" class="headerlink" title="特征统计函数"></a>特征统计函数</h3><p><code>mean  sum  median  var  std  max  min</code></p><p><code>quantile，count，indxmax</code>:分位数、非缺失值个数、最大值对应索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_demo = df[[<span class="string">'Height'</span>,<span class="string">'Weight'</span>]]</span><br><span class="line">print(df_demo.quantile(<span class="number">0.75</span>))</span><br><span class="line">print(df_demo.count())</span><br><span class="line">print(df_demo.idxmax())</span><br></pre></td></tr></table></figure><h3 id="唯一值函数"><a href="#唯一值函数" class="headerlink" title="唯一值函数"></a>唯一值函数</h3><p><code>unique</code>和<code>nunique</code>可以分别得到其唯一值组成的列表和唯一值的个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(df[<span class="string">'School'</span>].unique())</span><br><span class="line">print(df[<span class="string">'School'</span>].nunique())</span><br></pre></td></tr></table></figure><p><code>value_counts</code>可以得到<strong>唯一值</strong>和其对应出现的<strong>频数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'School'</span>].value_counts()</span><br></pre></td></tr></table></figure><p>如果想要观察多个列组合的唯一值，可以使用<code>drop_duplicates</code>。其中的关键参数是<code>keep</code>，默认值<code>first</code>表示每个组合保留第一次出现的所在行，<code>last</code>表示保留最后一次出现的所在行，<code>False</code>表示把所有重复组合所在的行剔除。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df_demo = df[[<span class="string">'Gender'</span>,<span class="string">'Transfer'</span>,<span class="string">'Name'</span>]]</span><br><span class="line">df_demo.drop_duplicates([<span class="string">'Gender'</span>,<span class="string">'Transfer'</span>])</span><br><span class="line"></span><br><span class="line">df_demo.drop_duplicates([<span class="string">'Gender'</span>, <span class="string">'Transfer'</span>], keep=<span class="string">'last'</span>)</span><br><span class="line"></span><br><span class="line">df_demo.drop_duplicates([<span class="string">'Name'</span>, <span class="string">'Gender'</span>], keep=<span class="literal">False</span>).head() <span class="comment"># 保留只出现过一次的性别和姓名组合</span></span><br></pre></td></tr></table></figure><h3 id="替换函数"><a href="#替换函数" class="headerlink" title="替换函数"></a>替换函数</h3><p>​    一般而言，替换操作是针对某一个列进行的，因此下面的例子都以<code>Series</code>举例。<code>pandas</code>中的替换函数可以归纳为三类：映射替换、逻辑替换、数值替换。其中映射替换包含<code>replace</code>方法、第八章中的<code>str.replace</code>方法以及第九章中的<code>cat.codes</code>方法，此处介绍<code>replace</code>的用法。</p><p>​    在<code>replace</code>中，可以通过字典构造，或者传入两个列表来进行替换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'Gender'</span>].replace(&#123;<span class="string">'Female'</span>:<span class="number">0</span>,<span class="string">'Male'</span>:<span class="number">1</span>&#125;).head()</span><br><span class="line">df[<span class="string">'Gender'</span>].replace([<span class="number">0</span>,<span class="number">1</span>],[<span class="string">'Female'</span>,<span class="string">'Male'</span>]).head()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;Pandas的用法的总结&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://FWj1635387072.github.io/categories/Python/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="https://FWj1635387072.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Numpy学习笔记</title>
    <link href="https://FWj1635387072.github.io/2021/03/13/numpy/"/>
    <id>https://FWj1635387072.github.io/2021/03/13/numpy/</id>
    <published>2021-03-13T11:05:27.073Z</published>
    <updated>2021-03-21T08:40:24.778Z</updated>
    
    <content type="html"><![CDATA[<pre><code>numpy的用法的总结</code></pre><a id="more"></a><p><code>genfromtext()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#从txt文件中读取数据，分割符为，</span></span><br><span class="line"></span><br><span class="line">world_alcohol = np.genfromtext(<span class="string">"world_alcohol.txt"</span>,delimiter=<span class="string">","</span>)</span><br><span class="line">print(type(world_alcohol))</span><br></pre></td></tr></table></figure><p><code>np.array()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vector = np.array([<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#传入两个list作为输入，构造numpy数组</span></span><br><span class="line"></span><br><span class="line">matrix = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line">print(vector)</span><br><span class="line">print(matrix)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出numpy数组的维数，例如（4,）(2,3)</span></span><br><span class="line">print(vector.shape)</span><br><span class="line">print(matrix.shape)</span><br></pre></td></tr></table></figure><p><code>dtype</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">numbers = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4.0</span>])</span><br><span class="line">print(numbers)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出numbers中元素的类型（保证元素类型一致）</span></span><br><span class="line">numbers.dtype</span><br></pre></td></tr></table></figure><p>切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vector = np.array([<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>])</span><br><span class="line">print(vector)</span><br><span class="line">print(vector[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#切片</span></span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[ <span class="number">5</span> <span class="number">10</span> <span class="number">15</span> <span class="number">20</span>]</span><br><span class="line">[ <span class="number">5</span> <span class="number">10</span> <span class="number">15</span>]</span><br></pre></td></tr></table></figure><p>多维切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">matrix = np.array([</span><br><span class="line">            [<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>],</span><br><span class="line">            [<span class="number">20</span>,<span class="number">25</span>,<span class="number">40</span>],</span><br><span class="line">            [<span class="number">35</span>,<span class="number">40</span>,<span class="number">45</span>]</span><br><span class="line">            ])</span><br><span class="line">print(matrix[:,<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[ <span class="number">5</span> <span class="number">10</span>]</span><br><span class="line"> [<span class="number">20</span> <span class="number">25</span>]</span><br><span class="line"> [<span class="number">35</span> <span class="number">40</span>]]</span><br></pre></td></tr></table></figure><p>查找是否存在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vector = np.array([<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>])</span><br><span class="line">vector == <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#判断数组中哪个数为所示数</span></span><br><span class="line">out:</span><br><span class="line">array([<span class="literal">False</span>,  <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">matrix = np.array([</span><br><span class="line">    [<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>],</span><br><span class="line">    [<span class="number">20</span>,<span class="number">25</span>,<span class="number">30</span>],</span><br><span class="line">    [<span class="number">35</span>,<span class="number">40</span>,<span class="number">45</span>]</span><br><span class="line">])</span><br><span class="line">matrix == <span class="number">25</span></span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">array([[<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>],</span><br><span class="line">       [<span class="literal">False</span>,  <span class="literal">True</span>, <span class="literal">False</span>],</span><br><span class="line">       [<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>]])</span><br></pre></td></tr></table></figure><p>通过是否存在输出指定值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">equal_to_ten = (vector == <span class="number">10</span>)</span><br><span class="line">print(equal_to_ten)</span><br><span class="line">print(vector[equal_to_ten])</span><br><span class="line"></span><br><span class="line"><span class="comment">#如何找到指定值</span></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[<span class="literal">False</span>  <span class="literal">True</span> <span class="literal">False</span> <span class="literal">False</span>]</span><br><span class="line">[<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">equal_to_ten = (matrix == <span class="number">10</span>)</span><br><span class="line">print(equal_to_ten)</span><br><span class="line">print(matrix[equal_to_ten])</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">equal_to_ten = (matrix == <span class="number">10</span>)</span><br><span class="line">print(equal_to_ten)</span><br><span class="line">print(matrix[equal_to_ten])</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[[<span class="literal">False</span>  <span class="literal">True</span> <span class="literal">False</span>]</span><br><span class="line"> [<span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span>]</span><br><span class="line"> [<span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span>]]</span><br><span class="line">[<span class="number">10</span>]</span><br></pre></td></tr></table></figure><p>输出指定条件下的指定元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">matrix = np.array([</span><br><span class="line">    [<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>],</span><br><span class="line">    [<span class="number">20</span>,<span class="number">25</span>,<span class="number">30</span>],</span><br><span class="line">    [<span class="number">35</span>,<span class="number">40</span>,<span class="number">45</span>]</span><br><span class="line">])</span><br><span class="line">second_column_25 = (matrix[:,<span class="number">1</span>]==<span class="number">25</span>)</span><br><span class="line">print(second_column_25)</span><br><span class="line">print(matrix[second_column_25,:])</span><br><span class="line"></span><br><span class="line"><span class="comment">#找到第二列中25所在行，输出该行所有元素</span></span><br><span class="line">out：</span><br><span class="line">[<span class="literal">False</span>  <span class="literal">True</span> <span class="literal">False</span>]</span><br><span class="line">[[<span class="number">20</span> <span class="number">25</span> <span class="number">30</span>]]</span><br></pre></td></tr></table></figure><p>查找指定元素时，可以使用逻辑运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vector = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>])</span><br><span class="line">be_divided_by_2_and_3 = (vector % <span class="number">2</span> == <span class="number">0</span>) &amp; (vector % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">print(be_divided_by_2_and_3)</span><br><span class="line">print(vector[be_divided_by_2_and_3])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[<span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span>  <span class="literal">True</span> <span class="literal">False</span>]</span><br><span class="line">[<span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>将第二列中，值为25的元素改为10</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">matrix = np.array([</span><br><span class="line">    [<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>],</span><br><span class="line">    [<span class="number">20</span>,<span class="number">25</span>,<span class="number">30</span>],</span><br><span class="line">    [<span class="number">35</span>,<span class="number">40</span>,<span class="number">45</span>]</span><br><span class="line">])</span><br><span class="line">second_column_equal_25 = (matrix[:,<span class="number">1</span>] == <span class="number">25</span>)</span><br><span class="line">print(second_column_equal_25)</span><br><span class="line">matrix[second_column_equal_25,<span class="number">1</span>]=<span class="number">10</span></span><br><span class="line">print(matrix)</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[<span class="literal">False</span>  <span class="literal">True</span> <span class="literal">False</span>]</span><br><span class="line">[[ <span class="number">5</span> <span class="number">10</span> <span class="number">15</span>]</span><br><span class="line"> [<span class="number">20</span> <span class="number">10</span> <span class="number">30</span>]</span><br><span class="line"> [<span class="number">35</span> <span class="number">40</span> <span class="number">45</span>]]</span><br></pre></td></tr></table></figure><p>numpy元素转换<code>astype()</code>        </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vector = np.array([<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>])</span><br><span class="line">print(vector.dtype)</span><br><span class="line">print(vector)</span><br><span class="line">vector = vector.astype(float)</span><br><span class="line">print(vector)</span><br><span class="line">print(vector.dtype)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">&lt;U1</span><br><span class="line">[<span class="string">'1'</span> <span class="string">'2'</span> <span class="string">'3'</span>]</span><br><span class="line">[<span class="number">1.</span> <span class="number">2.</span> <span class="number">3.</span>]</span><br><span class="line">float64</span><br></pre></td></tr></table></figure><p><code>sum()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector =  np.array([<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>])</span><br><span class="line">print(vector.sum())</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    <span class="number">50</span></span><br></pre></td></tr></table></figure><p>多维向量分别对行和列进行求和</p><p><code>axis=1</code>表示列</p><p><code>axis=0</code>表示行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">matrix = np.array([</span><br><span class="line">    [<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>],</span><br><span class="line">    [<span class="number">20</span>,<span class="number">25</span>,<span class="number">30</span>],</span><br><span class="line">    [<span class="number">35</span>,<span class="number">40</span>,<span class="number">45</span>]</span><br><span class="line">])</span><br><span class="line">print(matrix.sum(axis=<span class="number">0</span>))</span><br><span class="line">print(matrix.sum(axis=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[<span class="number">60</span> <span class="number">75</span> <span class="number">90</span>]</span><br><span class="line">[ <span class="number">30</span>  <span class="number">75</span> <span class="number">120</span>]</span><br></pre></td></tr></table></figure><p><code>isnan</code></p><p>将得到数据，第四行为空值的设置为均值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">world_alcohol = np.genfromtxt(<span class="string">"world_alcohol.txt"</span>,delimiter=<span class="string">','</span>)</span><br><span class="line"><span class="comment">#print(world_alcohol)</span></span><br><span class="line">is_value_null = np.isnan(world_alcohol[:,<span class="number">4</span>])</span><br><span class="line"><span class="comment">#print(is_value_null)</span></span><br><span class="line">world_alcohol[is_value_null,<span class="number">4</span>] = <span class="string">'0'</span></span><br><span class="line">alcohol_comsumption = world_alcohol[:,<span class="number">4</span>]</span><br><span class="line">alcohol_comsumption = alcohol_comsumption.astype(float)</span><br><span class="line">alcohol_total = alcohol_comsumption.sum();</span><br><span class="line">alcohol_mean = alcohol_comsumption.mean();</span><br><span class="line">print(alcohol_total)</span><br><span class="line">print(alcohol_mean)</span><br><span class="line">world_alcohol[is_value_null,<span class="number">4</span>] = alcohol_mean</span><br><span class="line">print(world_alcohol)</span><br></pre></td></tr></table></figure><p><code>arrange(begin,end,internal)</code>,默认begin从0开始，左闭右开。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(np.arange(<span class="number">10</span>,<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[<span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span>]</span><br></pre></td></tr></table></figure><p><code>reshape(row,col)</code>：将numpy数组改变为指定的形状，-1表示自动改变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">10</span>).reshape(<span class="number">2</span>,<span class="number">-1</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">0</span>,<span class="number">10</span>,<span class="number">1</span>).reshape(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]]</span><br></pre></td></tr></table></figure><p><code>ones((row,col),dtype= )    zeros(...)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = np.ones((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">print(a)</span><br><span class="line">print(a.dtype)</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[[<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]]</span><br><span class="line">float64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b = np.zeros((<span class="number">2</span>,<span class="number">3</span>),dtype=np.int32)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]]</span><br></pre></td></tr></table></figure><p>​    <code>random</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = np.random.random((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[<span class="number">0.25455831</span> <span class="number">0.21875025</span> <span class="number">0.9586944</span> ]</span><br><span class="line"> [<span class="number">0.03249533</span> <span class="number">0.525685</span>   <span class="number">0.64446951</span>]]</span><br></pre></td></tr></table></figure><p>numpy数组运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>])</span><br><span class="line">b = np.arange(<span class="number">4</span>)</span><br><span class="line">print(a + b)</span><br><span class="line">print(a - b)</span><br><span class="line">print(a * b)</span><br><span class="line">print(a**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[<span class="number">10</span> <span class="number">21</span> <span class="number">32</span> <span class="number">43</span>]</span><br><span class="line">[<span class="number">10</span> <span class="number">19</span> <span class="number">28</span> <span class="number">37</span>]</span><br><span class="line">[  <span class="number">0</span>  <span class="number">20</span>  <span class="number">60</span> <span class="number">120</span>]</span><br><span class="line">[ <span class="number">100</span>  <span class="number">400</span>  <span class="number">900</span> <span class="number">1600</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">A = np.array([</span><br><span class="line">    [<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">])</span><br><span class="line">B = np.array([</span><br><span class="line">    [<span class="number">2</span>,<span class="number">0</span>],</span><br><span class="line">    [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">])</span><br><span class="line">print(A)</span><br><span class="line">print(B)</span><br><span class="line">print(<span class="string">"*"</span> * <span class="number">6</span>)</span><br><span class="line">print(A*B)</span><br><span class="line">print(<span class="string">"*"</span> * <span class="number">6</span>)</span><br><span class="line">print(A.dot(B))</span><br><span class="line">print(<span class="string">"*"</span> * <span class="number">6</span>)</span><br><span class="line">print(np.dot(A,B))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[[<span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span>]]</span><br><span class="line">[[<span class="number">2</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]]</span><br><span class="line">******</span><br><span class="line">[[<span class="number">2</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">4</span>]]</span><br><span class="line">******</span><br><span class="line">[[<span class="number">5</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]]</span><br><span class="line">******</span><br><span class="line">[[<span class="number">5</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]]</span><br></pre></td></tr></table></figure><p>数组合并和拆分</p><p><code>hstack()</code>：横向合并</p><p><code>vstack()</code>：纵向合并</p><p><code>hsplit()</code>：横向拆分</p><p><code>vsplit()</code>：纵向拆分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">2</span>,<span class="number">2</span>)))</span><br><span class="line">b = np.floor(<span class="number">10</span>*np.random.random((<span class="number">2</span>,<span class="number">2</span>)))</span><br><span class="line">print(a)</span><br><span class="line">print(<span class="string">"*"</span> * <span class="number">10</span>)</span><br><span class="line">print(b)</span><br><span class="line">print(<span class="string">"*"</span> * <span class="number">10</span>)</span><br><span class="line">print(np.vstack((a,b)))</span><br><span class="line">print(<span class="string">"*"</span> * <span class="number">10</span>)</span><br><span class="line">print(np.hstack((a,b)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    [[<span class="number">1.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">6.</span> <span class="number">6.</span>]]</span><br><span class="line">**********</span><br><span class="line">[[<span class="number">6.</span> <span class="number">6.</span>]</span><br><span class="line"> [<span class="number">3.</span> <span class="number">9.</span>]]</span><br><span class="line">**********</span><br><span class="line">[[<span class="number">1.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">6.</span> <span class="number">6.</span>]</span><br><span class="line"> [<span class="number">6.</span> <span class="number">6.</span>]</span><br><span class="line"> [<span class="number">3.</span> <span class="number">9.</span>]]</span><br><span class="line">**********</span><br><span class="line">[[<span class="number">1.</span> <span class="number">0.</span> <span class="number">6.</span> <span class="number">6.</span>]</span><br><span class="line"> [<span class="number">6.</span> <span class="number">6.</span> <span class="number">3.</span> <span class="number">9.</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">2</span>,<span class="number">6</span>)))</span><br><span class="line">print(a)</span><br><span class="line">print(np.hsplit(a,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[[<span class="number">8.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">8.</span> <span class="number">6.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">8.</span> <span class="number">1.</span> <span class="number">3.</span> <span class="number">6.</span> <span class="number">1.</span>]]</span><br><span class="line">[array([[<span class="number">8.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">8.</span>]]), array([[<span class="number">0.</span>, <span class="number">8.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">3.</span>]]), array([[<span class="number">6.</span>, <span class="number">1.</span>],</span><br><span class="line">       [<span class="number">6.</span>, <span class="number">1.</span>]])]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">2</span>,<span class="number">6</span>)))</span><br><span class="line">print(a)</span><br><span class="line">print(np.hsplit(a,(<span class="number">3</span>,<span class="number">5</span>)))</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[[<span class="number">8.</span> <span class="number">4.</span> <span class="number">1.</span> <span class="number">8.</span> <span class="number">5.</span> <span class="number">2.</span>]</span><br><span class="line"> [<span class="number">6.</span> <span class="number">4.</span> <span class="number">2.</span> <span class="number">0.</span> <span class="number">7.</span> <span class="number">9.</span>]]</span><br><span class="line">[array([[<span class="number">8.</span>, <span class="number">4.</span>, <span class="number">1.</span>],</span><br><span class="line">       [<span class="number">6.</span>, <span class="number">4.</span>, <span class="number">2.</span>]]), array([[<span class="number">8.</span>, <span class="number">5.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">7.</span>]]), array([[<span class="number">2.</span>],</span><br><span class="line">       [<span class="number">9.</span>]])]</span><br></pre></td></tr></table></figure><p><code>r_</code>：上下合并</p><p><code>c_</code>：左右合并</p><p>引用地址:</p><p>​    使用copy（）,开辟新的内存空间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">b = a.view();</span><br><span class="line">print(str(a) + <span class="string">"\n"</span> +str(b))</span><br><span class="line">a[<span class="number">2</span>] = <span class="number">111</span></span><br><span class="line">print(str(a) + <span class="string">"\n"</span> +str(b))</span><br><span class="line">b[<span class="number">2</span>] = <span class="number">3</span></span><br><span class="line">print(str(a) + <span class="string">"\n"</span> +str(b))</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[  <span class="number">1</span>   <span class="number">2</span> <span class="number">111</span>]</span><br><span class="line">[  <span class="number">1</span>   <span class="number">2</span> <span class="number">111</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">b = a.copy();</span><br><span class="line">print(str(a) + <span class="string">"\n"</span> +str(b))</span><br><span class="line">a[<span class="number">2</span>] = <span class="number">111</span></span><br><span class="line">print(str(a) + <span class="string">"\n"</span> +str(b))</span><br><span class="line">b[<span class="number">2</span>] = <span class="number">3</span></span><br><span class="line">print(str(a) + <span class="string">"\n"</span> +str(b))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[  <span class="number">1</span>   <span class="number">2</span> <span class="number">111</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[  <span class="number">1</span>   <span class="number">2</span> <span class="number">111</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p><code>tile()平铺</code>：将传入的矩阵看作元素，复制为指定的矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">0</span>,<span class="number">40</span>,<span class="number">10</span>)</span><br><span class="line">b= np.tile(a,(<span class="number">3</span>,<span class="number">5</span>))</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[ <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>]</span><br><span class="line">[[ <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>]</span><br><span class="line"> [ <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>]</span><br><span class="line"> [ <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>]]</span><br></pre></td></tr></table></figure><p><code>argsort()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">j = np.argsort(a)</span><br><span class="line">print(j)</span><br><span class="line">print(a[j])</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[<span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">0</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>交换矩阵的其中两行/列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">25</span>).reshape(<span class="number">5</span>,<span class="number">-1</span>)</span><br><span class="line">print(a)</span><br><span class="line">a[[<span class="number">2</span>,<span class="number">1</span>],:] = a[[<span class="number">1</span>,<span class="number">2</span>],:]</span><br><span class="line"></span><br><span class="line"><span class="comment">#a[:,[1,2]] = a[:,[2,1]]</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>]</span><br><span class="line"> [ <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span>]</span><br><span class="line"> [<span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span>]</span><br><span class="line"> [<span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span>]]</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span>]</span><br><span class="line"> [ <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>]</span><br><span class="line"> [<span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span>]</span><br><span class="line"> [<span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span>]]</span><br></pre></td></tr></table></figure><p>找出数组中与给定值最接近的数的下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">z = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">55</span>],[<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">1</span>]])</span><br><span class="line">a = <span class="number">5.1</span></span><br><span class="line">print(np.abs(z-a).argmin())</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p>Numpy中更好的遍历方式<code>apply_along_axis</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">11</span>,<span class="number">36</span>).reshape(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y = np.apply_along_axis(np.sum, <span class="number">0</span>, x)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line">y = np.apply_along_axis(np.sum,<span class="number">1</span>,x)</span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure><p>矩阵转置<code>transpose()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">10</span>).reshape(<span class="number">2</span>,<span class="number">5</span>).transpose()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>使用numpy计算移动平均数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">100</span>)</span><br><span class="line">z = np.random.randint(<span class="number">10</span>,size = <span class="number">10</span>)</span><br><span class="line">print(z)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MovingAverage</span><span class="params">(arr, n = <span class="number">3</span>)</span>:</span></span><br><span class="line">    a = np.cumsum(arr)</span><br><span class="line">    a[n:] = a[n:] - a[:-n]</span><br><span class="line">    <span class="keyword">return</span> a[n - <span class="number">1</span>:] / n     </span><br><span class="line">    </span><br><span class="line">r = MovingAverage(z,<span class="number">3</span>)</span><br><span class="line">print(np.around(r,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>对5*5的矩阵进行归一化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Z = np.random.random((<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">Zmax,Zmin = Z.max(),Z.min()</span><br><span class="line">Z = (Z - Zmin) / (Zmax - Zmin)</span><br><span class="line">print(Z)</span><br></pre></td></tr></table></figure><p>排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获得排序后的下标  argsort()</span></span><br><span class="line">np.random.seed(<span class="number">20200612</span>)</span><br><span class="line">x = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">y = np.argsort(x)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line">print(x[y])</span><br><span class="line"></span><br><span class="line">y = np.argsort(-x)</span><br><span class="line">print(y)</span><br><span class="line">print(x[y])</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照某列或行对整体进行排序  lexsort()</span></span><br><span class="line">x = np.random.rand(<span class="number">5</span>,<span class="number">5</span>) * <span class="number">10</span></span><br><span class="line">x = np.around(x,<span class="number">2</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">index = np.lexsort([x[:,<span class="number">0</span>]])</span><br><span class="line">print(index)</span><br><span class="line">y = x[index]</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#partition()，以下标为kth的元素为基准</span></span><br><span class="line"><span class="comment">#将元素分为两部分，小于某元素放前面，大于放后面。</span></span><br><span class="line">x = np.random.randint(<span class="number">1</span>,<span class="number">20</span>,[<span class="number">1</span>,<span class="number">15</span>])</span><br><span class="line">print(x)</span><br><span class="line">y = np.partition(x,kth=<span class="number">3</span>)</span><br><span class="line">print(y)</span><br><span class="line"><span class="comment">#取出每一列第三小的元素</span></span><br><span class="line">x = np.random.randint(<span class="number">1</span>,<span class="number">20</span>,[<span class="number">5</span>,<span class="number">3</span>])</span><br><span class="line">y = np.partition(x,kth=<span class="number">3</span>,axis=<span class="number">0</span>)</span><br><span class="line">print(y)</span><br><span class="line">print(y[<span class="number">2</span>,:])</span><br><span class="line"></span><br><span class="line"><span class="comment">#count_nonzero()记录非零元素个数</span></span><br></pre></td></tr></table></figure><p>numpy中和线性代数相关的函数</p><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">diag</td><td align="center">将一个方阵的对角元素作为一位数组返回，或将一个一位数组转换为方阵，并在非对角线上有零点。</td></tr><tr><td align="center">dot</td><td align="center">矩阵点乘</td></tr><tr><td align="center">trace</td><td align="center">计算对角元素和</td></tr><tr><td align="center">det</td><td align="center">计算行列式</td></tr><tr><td align="center">eig</td><td align="center">计算方阵的特征值和特征向量</td></tr><tr><td align="center">inv</td><td align="center">计算方针的逆矩阵</td></tr><tr><td align="center">pinv</td><td align="center">计算方阵的Moore-Penrose伪逆</td></tr><tr><td align="center">qr</td><td align="center">计算QR分解</td></tr><tr><td align="center">svd</td><td align="center">计算奇异值分解</td></tr><tr><td align="center">solve</td><td align="center">求解x的线性系统Ax=b，其中A为方阵</td></tr><tr><td align="center">lstsq</td><td align="center">计算Ax=B的最小二乘解</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">b = np.diag(a)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[<span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算对角元素和</span></span><br><span class="line">print(np.trace(b))</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算行列式</span></span><br><span class="line">print(np.linalg.det(b))</span><br><span class="line">out：</span><br><span class="line"><span class="number">23.999999999999993</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算方阵的特征向量</span></span><br><span class="line">c = np.linalg.eig(b)</span><br><span class="line">print(c[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">out</span><br><span class="line">[[<span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算方针的逆矩阵</span></span><br><span class="line">print(np.linalg.inv(b))</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[[<span class="number">1.</span>         <span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.</span>        ]</span><br><span class="line"> [<span class="number">0.</span>         <span class="number">0.5</span>        <span class="number">0.</span>         <span class="number">0.</span>        ]</span><br><span class="line"> [<span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.33333333</span> <span class="number">0.</span>        ]</span><br><span class="line"> [<span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.25</span>      ]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#求解x的线性系统</span></span><br><span class="line">print(np.linalg.solve(b,a.T))</span><br><span class="line">out：</span><br><span class="line">[<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br></pre></td></tr></table></figure><p>伪随机数生成</p><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">seed</td><td align="center">随机数种子</td></tr><tr><td align="center">permutation</td><td align="center">返回一个序列的随机排列，或者返回一个乱序的整数范围序列</td></tr><tr><td align="center">shuffle</td><td align="center">随机排列一个序列</td></tr><tr><td align="center">rand</td><td align="center">从均匀分布中抽取样本</td></tr><tr><td align="center">randint</td><td align="center">根据给定的由低到高的范围抽取整数</td></tr><tr><td align="center">randn</td><td align="center">从均值0，方差1的正太分布中抽取样本</td></tr><tr><td align="center">binomial</td><td align="center">从二项分布中抽取样本</td></tr><tr><td align="center">normal</td><td align="center">从正态（高斯）分布中抽取样本</td></tr><tr><td align="center">beta</td><td align="center">从beta分布中抽取样本</td></tr><tr><td align="center">chisquare</td><td align="center">从卡方分布中抽取样本</td></tr><tr><td align="center">gamma</td><td align="center">从伽马分布中抽取样本</td></tr><tr><td align="center">uniform</td><td align="center">从均匀[0，1）分布中抽取样本</td></tr></tbody></table><p>常用函数：</p><p><code>where</code>、<code>nonzero</code>、<code>argmax</code>、<code>argmin</code>、<code>any</code>、<code>all</code>、<code>cumprod  cumsum diff</code></p><p>常用统计函数：</p><p><code>max min  mean  median  std  var  sum  quantile</code>，略过缺失值对应有<code>nan*</code>函数</p><p>协方差和相关系数</p><p><code>cov</code> 、<code>corrcoef</code></p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;numpy的用法的总结&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://FWj1635387072.github.io/categories/Python/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="https://FWj1635387072.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Shell学习</title>
    <link href="https://FWj1635387072.github.io/2021/03/13/Shell/"/>
    <id>https://FWj1635387072.github.io/2021/03/13/Shell/</id>
    <published>2021-03-12T23:46:56.124Z</published>
    <updated>2021-04-06T12:04:00.178Z</updated>
    
    <content type="html"><![CDATA[<p>​    Shell简单的学习</p><a id="more"></a><h1 id="基本认识"><a href="#基本认识" class="headerlink" title="基本认识"></a>基本认识</h1><p>Linux提供的Shell解析器</p><p><code>cat /etc/shells</code></p><p>/bin/bash</p><p>/bin/sh</p><p>CentOS默认的解析器是bash</p><p><code>echo $SHELL</code></p><h1 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h1><h2 id="脚本格式"><a href="#脚本格式" class="headerlink" title="脚本格式"></a>脚本格式</h2><p><code>#！/bin/bash</code>    指定解析器</p><h2 id="HelloWorld案例"><a href="#HelloWorld案例" class="headerlink" title="HelloWorld案例"></a>HelloWorld案例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">touch helloworld.sh</span><br><span class="line">vi helloworld.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo "helloWorld!"</span><br></pre></td></tr></table></figure><p>执行</p><p><code>sh 脚本相对/绝对路径</code></p><p><code>bash 脚本相对/绝对路径</code></p><p>给文件赋予执行权限，直接运行，注意一般为</p><p><code>./helloworld.sh</code></p><h1 id="Shell中变量"><a href="#Shell中变量" class="headerlink" title="Shell中变量"></a>Shell中变量</h1><h2 id="常用系统变量"><a href="#常用系统变量" class="headerlink" title="常用系统变量"></a>常用系统变量</h2><p><code>$HOME</code> <code>$PWD</code>  <code>$SHELL</code>  <code>$USER</code></p><h2 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h2><p>1、基本语法</p><p>​    1）定义变量：变量=值</p><p>​    2）撤销变量：unset 变量</p><p>​    3）声明静态变量：readonly 变量，注意：静态不能unset，重启的时候清除</p><p>2、变量定义规则</p><p>​    1）变量名称可以由字母、数字和下划线组成，但是不能以数字开头，环境变量名建议大写。</p><p>​    2）<strong>等号两侧不能有空格</strong>。</p><p>​    3）<strong>在bash中，变量类型默认均为字符串类型，无法直接进行数值运算</strong>。</p><p>​    4）<strong>变量的值如果有空格，需要用双引号或单引号引起来</strong>。</p><p>案例</p><p>​    1）定义变量A,并输出A</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A=5</span><br><span class="line">echo $A</span><br></pre></td></tr></table></figure><p>​    2）给A重新赋值，并输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A=6</span><br><span class="line">echo $A</span><br></pre></td></tr></table></figure><p>​    3）撤销变量A</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset A</span><br></pre></td></tr></table></figure><p>​    4）声明静态变量B</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readonly B=1</span><br></pre></td></tr></table></figure><p>​    5）变量有空格</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A="a b c"</span><br></pre></td></tr></table></figure><p>​    6）全局环境变量，可供其他Shell程序使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export b</span><br></pre></td></tr></table></figure><h2 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h2><p><code>$n</code>：n为数字，$0代表该脚本名称，$1-$9代表第一到第九个参数，十以上的参数需要用大括号包含，如${10}</p><p>输入该脚本文件名称、输入参数1和输入参数2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo $1 $2</span><br></pre></td></tr></table></figure><p><code>$#</code>：获取所有输入参数的个数</p><p><code>$*</code>：代表命令行所有的参数，把所有参数看作一个整体。</p><p><code>$@</code>：代表所有参数，不过$@把每个参数区分对待</p><p><code>$?</code>：最后一次执行的命令的返回状态。0表示上一个命令正确执行，非零执行不正确。</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p><code>$((运算式))</code>或者<code>$[运算式]</code></p><p>expr    +   -     \*    /    %</p><p>计算2+3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A=$[2+3]</span><br><span class="line">echo $A</span><br></pre></td></tr></table></figure><h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><p><code>[ condition ]</code>   (condition前后均有空格)</p><p>条件非空即为true，[ aaa ] :true  []: false</p><p>常用判断条件</p><p>（1）两个整数之间比较</p><p>​        = 字符串比较</p><p>​        -lt 小于（less than）           -le 小于等于（less equal）</p><p>​        -eq 等于（equal）             -gt 大于（greater than）</p><p>​        -ge 大于等于（greater equal）  -ne 不等于（Not equal）</p><p>（2）按照文件权限进行判断</p><p>​        -r 有读的权限（read）         -w 有写的权限（write）</p><p>​        -x 有执行的权限（execute）</p><p>（3）按照文件类型进行判断</p><p>​        -f 文件存在并且是一个常规的文件（file）</p><p>​        -e 文件存在（existence）       -d 文件存在并是一个目录（directory）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//23是否大于等于22</span><br><span class="line"></span><br><span class="line">[ 23 -ge 22 ]</span><br><span class="line"><span class="meta">$</span><span class="bash">?</span></span><br><span class="line"></span><br><span class="line">//helloworld是否有写的权限</span><br><span class="line">[ -w helloworld ]</span><br><span class="line"><span class="meta">$</span><span class="bash">?</span></span><br></pre></td></tr></table></figure><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><h2 id="case"><a href="#case" class="headerlink" title="case"></a>case</h2><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><h1 id="read读取控制台输入"><a href="#read读取控制台输入" class="headerlink" title="read读取控制台输入"></a>read读取控制台输入</h1><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h1 id="Shell工具"><a href="#Shell工具" class="headerlink" title="Shell工具"></a>Shell工具</h1><h2 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h2><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    Shell简单的学习&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="https://FWj1635387072.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Shell" scheme="https://FWj1635387072.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>CentOS实操</title>
    <link href="https://FWj1635387072.github.io/2021/01/18/CentOS/"/>
    <id>https://FWj1635387072.github.io/2021/01/18/CentOS/</id>
    <published>2021-01-18T00:37:09.817Z</published>
    <updated>2021-03-29T13:36:18.774Z</updated>
    
    <content type="html"><![CDATA[<p> CentOS一些基本操作</p><a id="more"></a><h2 id="vim快捷键"><a href="#vim快捷键" class="headerlink" title="vim快捷键"></a>vim快捷键</h2><table><thead><tr><th align="center">快捷键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>x yy</code></td><td align="center">复制x行</td></tr><tr><td align="center"><code>x dd</code></td><td align="center">删除x行</td></tr><tr><td align="center"><code>:set nu</code></td><td align="center">显示行号</td></tr><tr><td align="center"><code>/str</code></td><td align="center">查找str</td></tr><tr><td align="center"><code>G</code></td><td align="center">跳转到最后</td></tr><tr><td align="center"><code>gg</code></td><td align="center">跳转到最前</td></tr><tr><td align="center"><code>n G</code></td><td align="center">跳转到第n行</td></tr><tr><td align="center"><code>u</code></td><td align="center">撤销</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="开机重启"><a href="#开机重启" class="headerlink" title="开机重启"></a>开机重启</h2><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>shutdown -h now</code></td><td align="center">立刻关机</td></tr><tr><td align="center"><code>shutdown -h 1</code></td><td align="center">1分钟后关机</td></tr><tr><td align="center"><code>shutdown -r now</code></td><td align="center">立刻重启</td></tr><tr><td align="center"><code>halt</code></td><td align="center">立刻关机</td></tr><tr><td align="center"><code>reboot</code></td><td align="center">立刻重启</td></tr><tr><td align="center"><code>sync</code></td><td align="center">把内存中信息写入磁盘</td></tr></tbody></table><p>使用细节：</p><p>​    当重启或关机时，一般要先执行   <code>sync</code>    保存数据。</p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>​    /etc/passwd  </p><p>​            用户的配置文件，记录用户的各种信息。</p><p>​            每行的含义：用户名：口令：用户标识号：组标识号：注释性描述：主目录：登录                                shell</p><p>​    /etc/shadow</p><p>​            口令配置文件（加密过的用户密码）</p><p>​    /etc/group</p><p>​            组配置文件，记录Linux包含的组的信息。</p><p>​            每行含义：组名，组id，隐藏信息。</p><p><code>logout</code>:注销用户</p><p><code>useradd 用户名</code>:添加一个用户，</p><p>​            用户创建成功后，会自动创建和用户名同名的home目录。</p><p>​            也可以通过<code>useradd -d  指定目录  用户名</code>给新创建的用户指定home目录</p><p>​            创建时，直接指定组。</p><p>​            <code>useradd -g 组名 用户名</code></p><p><code>passwd 用户名</code>：给用户指定或修改密码。</p><p><code>userdel 用户名</code>:    删除用户</p><p>​        删除用户但保留home目录</p><p>​            <code>userdel 用户名</code></p><p>​        删除用户不保留home目录</p><p>​            <code>userdel -r 用户名</code></p><p><code>id 用户名</code>:  查看用户信息。</p><p>​            uid：用户id号</p><p>​            gid：所在组的id号</p><p>​            groups：所在组名称</p><p><code>su -</code> ：切换用户</p><p>​            权限高到权限低，不需密码。</p><p>​            反之，需要。</p><p>​            退出返回原用户，exit</p><p><code>groupadd 组名</code>：增加组.    </p><p><code>groupdel 组名</code>：删除组</p><p><code>usermod -g 用户组 用户名</code>：修改用户组，更换用户组</p><h2 id="实用指令"><a href="#实用指令" class="headerlink" title="实用指令"></a>实用指令</h2><h3 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h3><p>​    </p><table><thead><tr><th align="center">级别</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">关机</td></tr><tr><td align="center">1</td><td align="center">单用户（类似安全模式，可以帮助找回root密码）</td></tr><tr><td align="center">2</td><td align="center">多用户无网络级别</td></tr><tr><td align="center">3</td><td align="center">多用户有网络（<strong>使用最多</strong>）</td></tr><tr><td align="center">4</td><td align="center">系统未使用保留给用户（保留级别）</td></tr><tr><td align="center">5</td><td align="center">图形界面</td></tr><tr><td align="center">6</td><td align="center">系统重启</td></tr></tbody></table><p>常用运行级别时3和5，要修改默认的运行级别可改文件<code>/etc/inittab</code></p><p><code>init 级别</code></p><p>找回root密码</p><p>​        思路：进入单用户模式，修改root、密码。因为进入单用户模式，root不需要密码就可登录。</p><h3 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h3><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>pwd</code></td><td align="center">显示当前工作目录的觉得路</td></tr><tr><td align="center"><code>ls [选项] [目录或文件]</code></td><td align="center">-a：显示当前所有文件和目录（包括隐藏）<br>-l：以列表的方式显示</td></tr><tr><td align="center"><code>cd [参数]</code></td><td align="center"><code>cd ~或者cd</code>：返回自己的home目录<br><code>cd ..</code>：返回当前目录的上一级目录</td></tr><tr><td align="center"><code>mkdir [参数]</code></td><td align="center">-p：创建多级目录</td></tr><tr><td align="center"><code>rmdir</code></td><td align="center">删除空目录</td></tr><tr><td align="center"><code>rm -rf</code></td><td align="center">可删除非空目录<br>-f  不提示</td></tr><tr><td align="center"><code>echo</code>指令</td><td align="center">echo 输出内容到控制台</td></tr><tr><td align="center"><code>head</code>指令</td><td align="center">显示文件开头部分，默认显示文件的前10行，<br><code>hear -n 5 文件</code>，显示文件的前5行</td></tr><tr><td align="center"><code>tail</code>指令</td><td align="center">输出文件尾部的内容。<br><code>tail -f 文件名</code><strong>实时监控</strong>文件的修改情况</td></tr><tr><td align="center"><code>ln</code>指令</td><td align="center">软链接<br>类似于快捷方式，主要存放链接了其他文件的路径。<br><code>ln -s [源文件/目录][软链接名]</code></td></tr></tbody></table><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>touch</code></td><td align="center">创建</td></tr><tr><td align="center"><code>cp [-r] 源目录 目标目录</code></td><td align="center">复制，-r 表示递归拷贝<br>/cp 表示强制覆盖不提示</td></tr><tr><td align="center"><code>mv 源文件 目标文件</code></td><td align="center">移动文件或目录或重命名</td></tr><tr><td align="center">`cat -n 文件</td><td align="center">more`</td></tr></tbody></table><p>​    <code>more  文件名</code></p><p>more指令是一个基于vi编辑器的文本过滤器，它以全屏的方式按页显示文本文件的内容，more命令中内置了若干快捷键：</p><p>​    </p><table><thead><tr><th align="center">快捷键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>space</code></td><td align="center">向下翻一页</td></tr><tr><td align="center"><code>Enter</code></td><td align="center">向下翻一行</td></tr><tr><td align="center"><code>q</code></td><td align="center">立刻离开more</td></tr><tr><td align="center"><code>Ctrl+F</code></td><td align="center">向下滚动一屏</td></tr><tr><td align="center"><code>Ctrl+B</code></td><td align="center">返回上一屏</td></tr><tr><td align="center"><code>=</code></td><td align="center">输出当前行号</td></tr><tr><td align="center"><code>:f</code></td><td align="center">输出文件名和当前行号</td></tr></tbody></table><p>​    <code>less 文件名</code></p><p>​    less指令用来分屏查看文件内容，他的功能与more类似，但比more更加强大，支持各种显示终端，less指令在显示文件内容时，并不是一次将整个文件加载后才显示，而是根据需要加载内容，对于<strong>大型文件具有较高的效率</strong>。常用于查看<strong>日志文件</strong>。</p><p>​    快捷键</p><table><thead><tr><th align="center">快捷键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>space</code></td><td align="center">向下翻一页</td></tr><tr><td align="center"><code>pageDown</code></td><td align="center">向下翻一页</td></tr><tr><td align="center"><code>pageUp</code></td><td align="center">向上翻一页</td></tr><tr><td align="center"><code>/字符</code></td><td align="center">向下搜索，n：向下查找  N:向上查找</td></tr><tr><td align="center"><code>?字符</code></td><td align="center">向上搜索，n：向上查找 N：向下查找</td></tr></tbody></table><p><code>&gt;</code> 和 <code>&gt;&gt;</code> ：输出重定向和追加 </p><p><code>&gt;</code>输出重定向：将原来的文件覆盖</p><p><code>&gt;&gt;</code>追加：不会覆盖原来文件的内容，而是追加到文件的尾部。</p><p><code>ls -l &gt; a.txt</code>：将目前文件夹的内容覆盖写入到a.txt，若a.txt不存在，创建a.txt</p><p><code>ls -l &gt;&gt; a.txt</code>：追加到a.txt</p><p><code>cat a &gt;&gt; a.txt</code></p><p><code>echo &quot;hello world &gt;&gt; a.txt&quot;</code>：将hello world追加到a.txt后面</p><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><p><code>date</code></p><p><code>date &quot;+%Y-%m-%d&quot;</code></p><p><code>date  &quot;+%Y年%m月%d日&quot;</code></p><p>设置日期</p><p><code>date -s &quot;字符时间&quot;</code></p><p>查看日历时间</p><p><code>cal</code></p><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><p><code>find [搜索范围][选项]</code></p><p><code>find 目录 -name 文件名</code>：查找指定目录下指定文件</p><p><code>find 目录 -size +20M</code>：查找指定目录下大于20M的文件</p><p><code>locate</code> 可以快速定位文件路径，利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件。locate指令无需遍历整个文件系统，查询速度较快，为保证查询结果准确，管理员必须定期更新locate时刻。</p><p>​    <code>locate 搜索文件</code></p><p>​    locate基于数据库进行查询，第一次运行前，必须使用updatedb指令创建locate数据库。</p><p><strong>grep指令和管道符号</strong></p><p>​    <code>grep</code>过滤查找，管道符号<code>|</code>表示前一个命令的处理结果输出传递给后面的命令处理</p><p>​    <code>grep [选项]查找内容 源文件</code></p><p>​        -n：显示匹配行及行号</p><p>​        -i：忽略字母大小写</p><p>zip和unzip    压缩和解压缩 </p><p>​    -r：递归压缩</p><p><strong><code>tar</code>打包指令</strong>，最后打包的文件时.tar.gz文件</p><p>​    -c：产生.tar打包文件</p><p>​    -v：显示详细信息</p><p>​    -f：指定压缩后的文件名</p><p>​    -z：打包同时压缩</p><p>​    -x：解包.tar文件</p><p><code>tar -zcvf 结果文件 打包文件名/目录</code></p><p><code>tar -zxvf 解压文件 -C 指定目录</code> 解压文件到指定目录</p><h2 id="组管理和权限管理"><a href="#组管理和权限管理" class="headerlink" title="组管理和权限管理"></a>组管理和权限管理</h2><p>文件：所有者、所在组，其他组</p><p>文件/目录所有者一般为文件的创建者</p><p>​    查看文件所有组</p><p>​        <code>ls -ahl</code>：a–all 、  h—human 、 l–list </p><p>​    改变文件所有者</p><p>​        <code>chown 所有者 文件名</code>    并没有改变文件的所在组</p><p>​    组的创建</p><p>​        <code>groupadd 组名</code></p><p>​    修改文件所在组</p><p>​        <code>chgrp 组名 文件名</code></p><p>​    改变用户所在组</p><p>​        <code>usermod -g 组名 用户名</code></p><p>​        ·</p><p>权限管理</p><p>​        </p><table><thead><tr><th align="center">文件类型</th><th align="center">具体</th></tr></thead><tbody><tr><td align="center"><code>-</code></td><td align="center">普通文件</td></tr><tr><td align="center"><code>d</code></td><td align="center">目录</td></tr><tr><td align="center"><code>l</code></td><td align="center">软链接</td></tr><tr><td align="center"><code>c</code></td><td align="center">字符设备</td></tr></tbody></table><p>前三个文件<strong>所有者</strong>权限、中间三个文件<strong>所在组</strong>权限、最后三个<strong>其他组</strong>的权限</p><p><code>r</code>：可读 </p><p><code>w</code>：可写，不代表可删除，删除一个文件的前提条件是对该文件所在目录有写的权限</p><p><code>x</code>：可执行文件（execute）:可以进入该目录</p><p><code>数字</code>：文件表示硬链接数，如果是目录，表示该目录的子目录的个数</p><p><code>4096</code>：表示目录</p><h2 id="chmod：修改文件或者目录的权限。"><a href="#chmod：修改文件或者目录的权限。" class="headerlink" title="chmod：修改文件或者目录的权限。"></a><code>chmod</code>：修改文件或者目录的权限。</h2><h3 id="第一种方式："><a href="#第一种方式：" class="headerlink" title="第一种方式："></a>第一种方式：</h3><p>​        <code>+-=</code>变更权限</p><p>​            u：所有者    o：其他人    a：所有人（a、g、o  的总和）</p><p>​            <code>chomd u = rwx,g=rx,o=x 文件目录名</code></p><p>​            <code>chomd o+w 文件目录名</code>    </p><p>​            <code>chmod a-x 文件目录名</code></p><p>​        演示：</p><p>​            1）给abc文件的所有者读写执行的权限，给所在组读和执行的权限，其他组读和执行的权限</p><p>​                    <code>chmod u=rwx,g=rx,o=rx abc</code></p><p>​            2）给abc文件的所有者除去执行权限，增加读写的权限</p><p>​                    <code>chmod u-x+rw abc</code></p><p>​            3）给abc文件的所有用户添加读的权限         </p><p>​                    <code>chmod o+r abc</code></p><h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><p>​            通过数字变更权限</p><p>​            <code>r = 4 ,w = 2 ,x = 1</code></p><p>​            <code>chmod u=rwx,g=rw,o=x 文件目录名</code>相当于<code>chmod 751 文件目录名</code></p><p>​            案例：将/home/abc.txt文件的权限修改为 rwxr-xr-x</p><p>​                    <code>chmod 755 /home/abc.txt</code></p><h2 id="修改文件所有者-chown"><a href="#修改文件所有者-chown" class="headerlink" title="修改文件所有者-chown"></a>修改文件所有者-chown</h2><p>​    <code>chown newowner file</code></p><p>​    <code>chown newowner:newgroupowner file</code></p><p>​    <code>-R</code>  如果是目录，则使其下所有子文件或目录递归生效</p><p>​    案例：</p><p>​        1）将/home/abc.txt文件的所有者改为tom</p><p>​            <code>chown tom  /home/abc.txt</code></p><p>​        2）将/home/kkk目录下所有文件和目录都修改为tom</p><p>​            <code>chown -R  tom  kkk/</code></p><h2 id="修改文件所在组-chgrp"><a href="#修改文件所在组-chgrp" class="headerlink" title="修改文件所在组-chgrp"></a>修改文件所在组-chgrp</h2><p>​    <code>chgrp newgroup file 改变文件的所有组</code></p><p>​    案例：</p><p>​        1）将/home/abc.txt文件的所在组改为shaolin</p><p>​            <code>chgrp shaolin /home/abc.txt</code></p><p>​        2）将/home/kkk目录下所有文件和目录的所在组都修改为shaolin         </p><p>​            <code>chgrp -R shaolin /home/kkk</code></p><h2 id="定时任务调度"><a href="#定时任务调度" class="headerlink" title="定时任务调度"></a>定时任务调度</h2><p>定时的调度我们的脚本或者代码—》机制crontab，定时调用 脚本/代码，完成某项任务，比如备份mysql数据</p><p>​    如果是简单的任务，可以不写脚本，对于比较复杂的任务，需要写脚本（Shell）完成。</p><p>​    任务调度：是指系统在某个时间执行的特定的命令或程序。</p><p>​    任务调度分类：</p><p>​        1、系统工作：有些重要的工作必须周而复始的执行，如病毒扫描等</p><p>​        2、个别用户工作：个别用户可能希望执行某些程序，比如对数据库的备份</p><p>​    </p><p>​    <code>crontab</code>：</p><p>​        <code>-e</code>：编辑crontab定时任务</p><p>​        <code>-l</code>：查询crontab任务</p><p>​        <code>-r</code>：删除当前用户的所有crontab任务</p><p>​    <code>*/1 * * * * ls -l /etc &gt;&gt; /tmp/to.txt</code>每分钟将/etc下文件名写入to.txt</p><h3 id="任务调度的几个应用实例"><a href="#任务调度的几个应用实例" class="headerlink" title="任务调度的几个应用实例"></a>任务调度的几个应用实例</h3><p>1、每隔一分钟，将当前的日期信息，追加到/tmp/mydate 文件中</p><p>​        先写一个脚本<code>date &gt;&gt; /tmp/mydate</code>，给脚本权限，<code>crontab -e</code> ,写入<code>*/1 * * * * /home/mytask1.sh</code></p><p>2、每隔一分钟，将当前日期和日历都追加到/tmp/mycal文件中</p><p>3、每天凌晨2：00，将mysql数据库testdb,备份到文件中</p><h2 id="linux磁盘分区和挂载"><a href="#linux磁盘分区和挂载" class="headerlink" title="linux磁盘分区和挂载"></a>linux磁盘分区和挂载</h2><h3 id="分区基础知识"><a href="#分区基础知识" class="headerlink" title="分区基础知识"></a>分区基础知识</h3><p>1、mbr分区</p><p>​        1）最多支持四个主分区</p><p>​        2）系统只能安装在主分区</p><p>​        3）扩展分区要占一个主分区</p><p>​        4）mbr最大只能支持2TB，但拥有最好的兼容性</p><p>2、gtp分区</p><p>​        1）支持无限多个主分区（但操作系统可能限制，比如windows下最多128个分区）</p><p>​        2）最大支持18EB的大容量（1EB=1024PB，1PB=1024TB）</p><p>​        3）windows7 64位以后支持gtp        </p><h3 id="linux分区"><a href="#linux分区" class="headerlink" title="linux分区"></a>linux分区</h3><p>原理介绍：</p><p>​    Linux无论有几个分区，分给哪一目录使用，它归根到底就只有一个根目录，一个独立且唯一的文件结构，Linux中每个分区都是用来组成整个文件系统的一部分。</p><p>​    Linux采用了一种叫“载入”的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来，这时要载入的一个分区将使它的存储空间在一个目录下获得。mount挂载，unmount卸载</p><p>​    linux硬盘分为IDE硬盘和SCSI硬盘，目前基本上都是SCSI硬盘。</p><p>​    对于IDE硬盘，驱动器标识符为“hdx”，其中，“hd”表明分区所在设备的类型，这里是指IDE硬盘了，“x”为盘号（a为基本盘，b为基本从属盘，c为辅助主盘，d为辅助从属盘），“~”代表分区，前四个分区用数字1-4表示，他们是主分区或者扩展分区，从5开始就是逻辑分区，例，hda3表示为第一个IDE硬盘上的第三个主分区或者扩展分区，hdb2表示为第二个IDE硬盘上的第二个主分区或扩展分区。</p><p>​    对于SCSI硬盘则标识为“sdx”，SCSI硬盘是用“sd”来表示分区所在设备的类型的，其余则和IDE硬盘的表示方法一样。</p><p><img src="/2021/01/18/CentOS/1615378123021.png" alt="1615378123021"></p><p><code>lsblk -f</code> 查看系统的分区和挂载的情况。</p><p><code>lsblk</code>  可以看到硬盘的大小。</p><p>vda2   vda1  表示分区情况。</p><p>ext4    vfat表示分区类型，后面的为唯一标识分区的40位不重复的字符串。</p><p>boot/efi   为挂载点（文件系统）。</p><h2 id="磁盘情况查询"><a href="#磁盘情况查询" class="headerlink" title="磁盘情况查询"></a>磁盘情况查询</h2><p><code>df -lh</code>：查询系统整体的磁盘使用情况。</p><p><img src="/2021/01/18/CentOS/1615379069514.png" alt="1615379069514"></p><p><code>du -h /目录</code>：查询指定目录的磁盘占用情况，默认为当前目录。</p><p>​    <code>-s</code>：指定目录占用大小汇总</p><p>​    <code>-h</code>：带计量单位</p><p>​    <code>-a</code>：含文件</p><p>​    <code>--max-depth=1</code>：子目录深度</p><p>​    <code>-c</code>：列出明细的同时，增加汇总值</p><p><strong>实例</strong></p><p>​    1）统计/home 文件夹下文件的个数</p><p>​            <code>ls -l /home | grep &quot;^-&quot; | wc -l</code></p><p>​            先列举，在过滤，然后wc 统计</p><p>​    2）统计/home文件夹下目录的个数</p><p>​            <code>ls -l /home | grep &quot;^d&quot; | wc -l</code></p><p>​            将定位符^后的-改为d</p><p>​    3）统计/home文件夹下文件的个数，包括子文件夹里的</p><p>​            <code>ls -lR /home | grep &quot;^-&quot; | wc -l</code></p><p>​            多了-R</p><p>​    4）统计文件夹下目录的个数，包括子文件夹里的</p><p>​            <code>ls -lR /home | grep &quot;^d&quot; | wc -l</code></p><p>​    5）以树状结构显示目录结构</p><p>​            安装tree，然后使用</p><p>​            <code>yum install tree</code>              <code>tree  /home</code></p><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>在Linux中，每个执行的程序（代码）都称为一个进程。每个进程都分配一个ID号。</p><p>每个进程，都会对应一个父进程，而这个父进程可以复制多个子进程。例如WWW服务器。</p><p>每个进程都可能以两种方式存在。前台和后台，所谓前台进程就是用户目前的屏幕上可以进行操作的。后台进程则是实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式执行。</p><p>一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中。直到关机才会结束。</p><p><code>ps</code>    一般来说是-aux，</p><p>​        -a显示当前终端的所有进程信息 。</p><p>​        -u以用户的格式显示进程信息。</p><p>​        -x    显示后台进程运行的参数。    </p><p><img src="/2021/01/18/CentOS/1615454625973.png" alt="1615454625973"></p><table><thead><tr><th align="center">标题</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">%MEM</td><td align="center">占用物理内存百分比</td></tr><tr><td align="center">VSZ</td><td align="center">进程占用的虚拟内存的大小</td></tr><tr><td align="center">RSS</td><td align="center">进程占用的物理内存大小</td></tr><tr><td align="center">TT</td><td align="center">终端名称</td></tr><tr><td align="center">STAT</td><td align="center">进程状态：S-睡眠，s-表示该进程是会话的先导进程，N-表示进程拥有比普通优先级更低的优先级，R-正在运行，D-短期等待，Z-僵死进程，T-被跟踪或者被停止</td></tr><tr><td align="center">STARTED</td><td align="center">进程的启动时间</td></tr><tr><td align="center">TIME</td><td align="center">CPU时间，即进程使用CPU的总时间</td></tr><tr><td align="center">COMMAND</td><td align="center">启动进程所用的命令和参数，过长会被截断显示</td></tr></tbody></table><p><code>ps -aux | grep xxx</code>    查看指定的进程</p><p><code>ps -ef</code> 以全格式显示当前所有的进程，查看进程的父进程。</p><p>​    -e查看所有进程，-f 全格式</p><p><img src="/2021/01/18/CentOS/1615456098238.png" alt="1615456098238"></p><table><thead><tr><th align="center">标题</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">PID</td><td align="center">进程</td></tr><tr><td align="center">PPID</td><td align="center">父进程</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h3><p><code>kill</code> 和 <code>killall</code></p><p><code>kill 【选项】 进程号</code>：通过进程号杀死进程</p><p><code>kill all 进程名称</code>：通过进程名杀死进程，支持通配符</p><p><code>-9</code> 强迫进程立即停止</p><p>案例：</p><p>​    1）踢掉非法用户</p><p>​        先查找到非法用户的PID<code>ps -aux | grep sshd</code></p><p>​        再kill掉进程    <code>kill xxx</code></p><p>​    2）终止远程登陆服务sshd</p><p>​    3）终止多个gedit编辑器（killall,通过进程名来终止进程）</p><p>​        <code>killall gedit</code></p><p>​    4）强制杀掉一个终端</p><p>​        <code>kill -9 xxxx</code></p><h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><p>服务（service）本质是一个进程，但是运行在后台，通常监听某个端口，等待其他程序的请求，比如mysql、sshd、防护墙等。因此我们又称为守护进程。</p><p><img src="/2021/01/18/CentOS/1615520427929.png" alt="1615520427929"></p><p>service管理指令</p><p><code>service 服务名 start | stop | restart | reload | status</code></p><p>CentOS7.0后用systemctl</p><p><code>systemctl</code></p><p>案例:</p><p>​        查看当前防火墙状况，关闭防火墙和重启防火墙。</p><p>​            <code>systemctl stauts iptables</code> 查看防火墙状态</p><p>​            <code>systemctl stop iptables</code></p><p>​            <code>systemctl start iptables</code></p><p>细节：</p><p>​        1）关闭或启用防火墙后，立即生效。【talnet 测试某个端口即可】</p><p>​        2）这种方式只是临时生效，当重启系统后，还是回归以前对服务的设置。</p><p>​        3）如果希望设置某个服务自启动或关闭永久生效，要使用<code>chkconfig</code>指令</p><h3 id="动态监控进程"><a href="#动态监控进程" class="headerlink" title="动态监控进程"></a>动态监控进程</h3><p>​        top和ps相似，军用来显示正在执行的进程。top和ps最大的不同之处，在于top在执行一段时间可以更新正在运行的进程</p><p>​        <code>top</code></p><p>​        -d</p><p>​        -i</p><p>​        -p</p><p>​        交互操作</p><p>​            P：按CPU使用率排序（默认）</p><p>​            M：内存使用率        </p><p>​            N：PID</p><p>​            q：退出</p><p>案例：</p><p>​    1)监视特定用户</p><p>​            top，输入u，输入指定的用户名</p><p>​    2)指定系统状态更新的时间（每隔十秒更新）</p><p>​            <code>top -d 10</code></p><p>​    </p><h3 id="监控网络服务"><a href="#监控网络服务" class="headerlink" title="监控网络服务"></a>监控网络服务</h3><p>​        <code>netstat -anp</code></p><p>​            -an 按一定顺序输出。</p><p>​            -p显示那个进程在调用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; CentOS一些基本操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://FWj1635387072.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="CentOs" scheme="https://FWj1635387072.github.io/tags/CentOs/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记1</title>
    <link href="https://FWj1635387072.github.io/2021/01/12/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%901/"/>
    <id>https://FWj1635387072.github.io/2021/01/12/Python数据分析1/</id>
    <published>2021-01-12T08:15:50.541Z</published>
    <updated>2021-01-12T12:30:33.398Z</updated>
    
    <content type="html"><![CDATA[<p>​    《使用Python进行数据分析》中的点。</p><a id="more"></a><p><code>tuple()</code>将任意序列或迭代器转换为元组。</p><p>元组内容长度不可变，常用的方法 <code>count(value)</code>  统计元组中包含多少个value</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">tuple([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">输出</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">tuple(<span class="string">'String'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">输出</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">(<span class="string">'S'</span>, <span class="string">'t'</span>, <span class="string">'r'</span>, <span class="string">'i'</span>, <span class="string">'n'</span>, <span class="string">'g'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = tuple(<span class="string">'stringing'</span>)</span><br><span class="line">a.count(<span class="string">'i'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">输出，count</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p><code>list()</code>  与元组类似，得到列表对象，列表长度和内容可以修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">A = (<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>)</span><br><span class="line">map1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> i ,v <span class="keyword">in</span> enumerate(A):</span><br><span class="line">     map1[i] = v;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">map1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">输出</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">&#123;<span class="number">0</span>: <span class="string">'one'</span>, <span class="number">1</span>: <span class="string">'two'</span>, <span class="number">2</span>: <span class="string">'three'</span>&#125;</span><br></pre></td></tr></table></figure><p><code>zip()</code></p><p>将元组，列表和其他序列的元素配对，形成新的列表，也可用于解包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">seq1 = [<span class="string">'f1'</span>,<span class="string">'f2'</span>,<span class="string">'f3'</span>]</span><br><span class="line">seq2 = [<span class="string">'l1'</span>,<span class="string">'l2'</span>,<span class="string">'l3'</span>]</span><br><span class="line">name = zip(seq1,seq2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name</span><br><span class="line">&lt;zip object at <span class="number">0x0000018E38297880</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list(name)</span><br><span class="line">[(<span class="string">'f1'</span>, <span class="string">'l1'</span>), (<span class="string">'f2'</span>, <span class="string">'l2'</span>), (<span class="string">'f3'</span>, <span class="string">'l3'</span>)]</span><br><span class="line"></span><br><span class="line">first_name,last_name = zip(*name)</span><br><span class="line">first_name</span><br><span class="line">(<span class="string">'f1'</span>, <span class="string">'f2'</span>, <span class="string">'f3'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">last_name</span><br><span class="line">(<span class="string">'l1'</span>, <span class="string">'l2'</span>, <span class="string">'l3'</span>)</span><br></pre></td></tr></table></figure><p><code>dict()</code></p><p>生成字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mapping = &#123;&#125;</span><br><span class="line">mapping = dict(zip(range(<span class="number">5</span>),reversed(range(<span class="number">5</span>))))</span><br><span class="line">mapping</span><br><span class="line">&#123;<span class="number">0</span>: <span class="number">4</span>, <span class="number">1</span>: <span class="number">3</span>, <span class="number">2</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><p><code>set()</code></p><p>生成集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set1 = set([<span class="number">2</span>,<span class="number">32</span>,<span class="number">42</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">312</span>,<span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line">set1</span><br><span class="line">&#123;<span class="number">32</span>, <span class="number">2</span>, <span class="number">312</span>, <span class="number">42</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">b = &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;</span><br><span class="line">a.union(b)</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line"></span><br><span class="line">a|b</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line"></span><br><span class="line">a.intersection(b)</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">a &amp; b</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><p><code>列表集合推导式</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">strings = [<span class="string">'a'</span>,<span class="string">'AS'</span>,<span class="string">'bat'</span>,<span class="string">'car'</span>,<span class="string">'dove'</span>,<span class="string">'python'</span>]</span><br><span class="line">[x.lower() <span class="keyword">for</span> x <span class="keyword">in</span> strings <span class="keyword">if</span> <span class="string">'a'</span> <span class="keyword">in</span> x <span class="keyword">or</span> <span class="string">'A'</span> <span class="keyword">in</span> x]</span><br><span class="line"></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'as'</span>, <span class="string">'bat'</span>, <span class="string">'car'</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    《使用Python进行数据分析》中的点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="https://FWj1635387072.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="https://FWj1635387072.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Untitled</title>
    <link href="https://FWj1635387072.github.io/2020/12/26/Untitled/"/>
    <id>https://FWj1635387072.github.io/2020/12/26/Untitled/</id>
    <published>2020-12-26T10:39:02.688Z</published>
    <updated>2020-12-26T10:39:05.964Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> statsmodels <span class="keyword">as</span> sm</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring_04</title>
    <link href="https://FWj1635387072.github.io/2020/12/16/Spring_04/"/>
    <id>https://FWj1635387072.github.io/2020/12/16/Spring_04/</id>
    <published>2020-12-16T11:50:32.835Z</published>
    <updated>2021-04-28T08:53:28.165Z</updated>
    
    <content type="html"><![CDATA[<p>​    Spring学习04</p><a id="more"></a><h1 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h1><p>手动装配：以value或ref的方式明确指定属性值是手动装配</p><p>自动装配：根据指定的装配规则，不需要明确指定，Spring自动将匹配的属性注入bean中</p><h2 id="装配模式"><a href="#装配模式" class="headerlink" title="装配模式"></a>装配模式</h2><p>1、根据类型自动装配：</p><p>​        与IOC容器bean的class进行匹配，唯一配置则装配，否则抛异常</p><p>2、根据名称自动装配：</p><p>​        使用bean的属性名与IOC容器中bean的ID值进行匹配，成功则装配，否则null</p><p>​    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Person</span></span><br><span class="line"><span class="comment">自动装配:只能装配对象</span></span><br><span class="line"><span class="comment">1、byName：使用bean的属性名与IOC容器中bean的ID值进行匹配，成功则装配，否则null</span></span><br><span class="line"><span class="comment">2、byType：与IOC容器bean的class进行匹配，唯一配置则装配，否则抛异常</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.autowire.Person"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"tom"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="通过注解进行装配bean"><a href="#通过注解进行装配bean" class="headerlink" title="通过注解进行装配bean"></a>通过注解进行装配bean</h1><p>使用注解进行装配更加简洁，与MVC组件化开发理念契合，常用。</p><ol><li><p>普通组件：@Component</p><p> ​    标识一个受Spring IOC容器管理的组件。</p></li><li><p>持久化层组件：@Repository</p><p> ​    标识一个受Spring IOC容器管理的持久化层组件。</p></li><li><p>业务逻辑层组件：@Service</p><p> ​    标识一个受Spring IOC容器管理的业务逻辑层组件。</p></li><li><p>表述层组件：@Controller</p><p> ​    标识一个受Spring IOC容器管理的表述层组件。</p></li><li><p>组件命名规则</p></li></ol><pre><code>导入`jar包 `     aop<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注解作用，相当于在配置文件中：</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * &lt;bean id="userController" class="com.Controller.UserController"&gt;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> FWJ</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com"</span> &gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="指定扫描和排除扫描"><a href="#指定扫描和排除扫描" class="headerlink" title="指定扫描和排除扫描"></a>指定扫描和排除扫描</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 指定扫描 --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 1 --&gt;</span><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 2 --&gt;</span><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"assignable"</span> <span class="attr">expression</span>=<span class="string">"com.Controller.UserController"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com"</span> <span class="attr">use-default-filters</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 排除扫描 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">""</span>/&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    Spring学习04&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://FWj1635387072.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="学习" scheme="https://FWj1635387072.github.io/categories/%E6%A1%86%E6%9E%B6/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring" scheme="https://FWj1635387072.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring_03</title>
    <link href="https://FWj1635387072.github.io/2020/12/13/Spring_03/"/>
    <id>https://FWj1635387072.github.io/2020/12/13/Spring_03/</id>
    <published>2020-12-13T12:32:01.430Z</published>
    <updated>2020-12-16T11:49:06.617Z</updated>
    
    <content type="html"><![CDATA[<p>​        Spring学习03</p><a id="more"></a><h2 id="依赖注入List和数组"><a href="#依赖注入List和数组" class="headerlink" title="依赖注入List和数组"></a>依赖注入List和数组</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--list集合  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--array 和 set 同理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"personList"</span> <span class="attr">class</span> = <span class="string">"com.test.DI.PersonList"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Tom"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"cars"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 构造集合 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ref引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car1"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 内部bean --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;bean&gt;&lt;/bean&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ClassPathXmlApplicationContext clt = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-di.xml"</span>);</span><br><span class="line">List bean = clt.getBean(<span class="string">"personList"</span>, List<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- map --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">""</span>  <span class="attr">value-ref</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="定义集合bean"><a href="#定义集合bean" class="headerlink" title="定义集合bean"></a>定义集合bean</h2><p>首先设置eclipse，namespace中勾选util</p><p><img src="/2020/12/13/Spring_03/1607863838402.png" alt="1607863838402"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义集合bean,可引用多次--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span> = <span class="string">"listbean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h2><p>Spring中有两种类型的bean，一种为普通bean，另一种是工厂bean，即FactoryBean</p><p>工厂bean跟普通bean不同，其返回的对象不是一个指定的实例，返回的是该工厂bean的getObject方法返回的对象</p><p>工厂bean要实现org.springframework.beans.factory.FactoryBean接口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过FactoryBean 来配置bean</span></span><br><span class="line"><span class="comment">具体返回的对象为getObject()返回的bean</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span> = <span class="string">"com.test.factorybean.CarFactoryBean"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.factorybean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.DI.Car;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Car</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂bean具体创建的bean对象是由getObject()方法获得的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Car <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Car(<span class="string">"五菱宏光"</span>, <span class="string">"五菱"</span>, <span class="number">50000.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回具体的bean对象类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line"><span class="keyword">return</span> Car<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bean可以是单例的，也可以是原型的（非单例）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.factorybean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.DI.Car;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFactory</span> </span>&#123;</span><br><span class="line">ApplicationContext ac;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-factorybean.xml"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCarFac</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Car bean = ac.getBean(<span class="string">"car"</span>, Car<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(bean);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bean的继承关系"><a href="#bean的继承关系" class="headerlink" title="bean的继承关系"></a>bean的继承关系</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- bean的继承关系</span></span><br><span class="line"><span class="comment">parent=""父类</span></span><br><span class="line"><span class="comment">abstract="true"抽象bean，不能创建对象，class属性可以不配置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">继承可以从父bean中继承一些配置，但是id、abstract、autowire不能被继承</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"address1"</span> <span class="attr">class</span> = <span class="string">"com.test.relation.Address"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">value</span>=<span class="string">"Beijing"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"street"</span> <span class="attr">value</span>=<span class="string">"ChangAnJie"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"address2"</span> <span class="attr">class</span> = <span class="string">"com.test.relation.Address"</span> <span class="attr">parent</span>=<span class="string">"address1"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name="city" value="Beijing"&gt;&lt;/property&gt;  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"street"</span> <span class="attr">value</span>=<span class="string">"WuDaoKou"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.relation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRelation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExtends</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ClassPathXmlApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-relation.xml"</span>);</span><br><span class="line">Address c1 = ctx.getBean(<span class="string">"address1"</span>, Address<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(c1);</span><br><span class="line">Address c2 = ctx.getBean(<span class="string">"address2"</span>, Address<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(c2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h2><p>​    在Spring中，可以在<bean>元素的scope属性中设置bean的作用域，以决定这个bean是单例的还是多实例的。</bean></p><p>​    默认情况下，Spring只为每个在IOC容器中声明的bean创建唯一一个实例，这个IOC容器范围内都能享受该实例：后续所有的getBean()调用和bean引用都将返回这个唯一的bean实例。该作用域被称为singleton，它是所有bean的默认作用域。</p><p>​    当bean的作用域为单例时，Spring会在容器对象创建时就创建bean的对象实例，而当bean的作用域为prototype时，IOC容器在获取实例时创建bean的实例对象。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">bean的作用域：</span></span><br><span class="line"><span class="comment">singleton：单例（默认）,在整个IOC容器中只能存在一个Bean对象，</span></span><br><span class="line"><span class="comment">而且在创建IOC容器时已经创建，后续获得的均为同一个bean</span></span><br><span class="line"><span class="comment">prototype: 原型/多例的，scope属性，每次获得对象时创建。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.scope.Car"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brand"</span> <span class="attr">value</span>=<span class="string">"宝马"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"10000.0"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car1"</span> <span class="attr">class</span>=<span class="string">"com.scope.Car"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brand"</span> <span class="attr">value</span>=<span class="string">"宝马"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"10000.0"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h2><p>SpringIOC容器可以管理bean的生命周期，Spring允许在bean的生命周期内特定的时间节点执行指定的任务。</p><p>SpringIOC容器对bean的生命周期进行管理的过程：</p><p>​    1、通过构造器或工厂方法创建bean实例（调用构造器）</p><p>​    2、为bean的属性设置值和对其他bean的引用（调用set方法）</p><p>​    3、调用bean的初始化方法</p><p>​    4、bean可以使用</p><p>​    5、容器关闭时，调用bean的销毁方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.leftcycle.Car"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destory"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brand"</span> <span class="attr">value</span>=<span class="string">"宝马"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"100000.0"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leftcycle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String brand;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"1、调用构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 通过init-method来指定初始化方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"3、调用初始化方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 销毁方法：IOC容器关闭，bean对象被销毁</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"5、销毁"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> brand;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"2、调用set方法"</span>);</span><br><span class="line"><span class="keyword">this</span>.brand = brand;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Car [brand="</span> + brand + <span class="string">", price="</span> + price + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leftcycle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">testCircle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ConfigurableApplicationContext al = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-leftcycle.xml"</span>);</span><br><span class="line">Car car = al.getBean(<span class="string">"car"</span>, Car<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(<span class="string">"4、使用"</span> + car);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭容器</span></span><br><span class="line">al.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bean的后置处理器"><a href="#bean的后置处理器" class="headerlink" title="bean的后置处理器"></a>bean的后置处理器</h3><p>​    1、bean的后置处理器允许在调用初始化方法前后对bean进行额外的处理</p><p>​    2、bean后置处理器对IOC容器里的所有bean实例逐一处理，而非单一实例。其典型应用是：检查bean属性的正确性或根据特定的标准更改bean的属性。</p><p>​    3、bean后置处理器需要实现接口：</p><p>​            <code>org.springframework.beans.factory.config.BeanPostProcessor。</code></p><p>​            在初始化方法被调用前后，Spring将把每个bean实例分别传递给上述接口的一下两个方法</p><p>​        postProcessBeforeInitialization(Object, String)</p><p>​        postProcessAfterInitialization(Object, String)</p><p>​    4、添加bean后置处理器后bean的生命周期</p><p>​            1、通过构造器或工厂方法创建bean实例</p><p>​            2、为bean的属性设置值和对其他bean的引用。</p><p>​            3、将bean的实例传递给bean后置处理器的postProcessBeforeInitialization()方法</p><p>​            4、调用bean的初始化方法</p><p>​            5、将bean实例传递给bean后置处理器的postProcessAfterInitialization()方法</p><p>​            6、bean的使用</p><p>​            7、当容器关闭时调用bean的销毁方法</p><h3 id="引用外部属性文件"><a href="#引用外部属性文件" class="headerlink" title="引用外部属性文件"></a>引用外部属性文件</h3><p>​    C3P0连接池的配置</p><p>​    直接配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 直接配置c3p0连接池 ComboPooledDataSource--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mysql"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span> <span class="attr">value</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    当bean的配置信息逐渐增多时，查找和修改一些bean的配置信息就会变得困难。这时可以将一部分信息提取到bean配置文件的外部，以properties格式的属性文件保存起来，同时在bean的配置文件中引用properties属性文件中的内容，从而实现一部分属性值在发生变化时仅修改properties属性文件即可。这种技术多用于连接数据库的基本信息的配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过引入外部的属性文件配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath*:db.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 推荐使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置C3P0连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"%&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"%&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"%&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"%&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​        Spring学习03&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://FWj1635387072.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="学习" scheme="https://FWj1635387072.github.io/categories/%E6%A1%86%E6%9E%B6/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring" scheme="https://FWj1635387072.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习02</title>
    <link href="https://FWj1635387072.github.io/2020/12/09/Spring_02/"/>
    <id>https://FWj1635387072.github.io/2020/12/09/Spring_02/</id>
    <published>2020-12-09T11:51:35.774Z</published>
    <updated>2020-12-09T14:35:09.944Z</updated>
    
    <content type="html"><![CDATA[<p>​    Spring学习02</p><a id="more"></a><h2 id="IOC容器在Spring中的实现"><a href="#IOC容器在Spring中的实现" class="headerlink" title="IOC容器在Spring中的实现"></a>IOC容器在Spring中的实现</h2><ol><li><p>在通过IOC容器读取Bean的实例前，需要将IOC容器本身实例化。</p></li><li><p>Spring提供了两种IOC容器的实现方法</p><pre><code>BeanFactory：IOC容器的基本实现，是Spring容器的内部实现，是Spring内部的基础设施，面向Spring本身，不是给开发人员使用的。</code></pre><p> ​    ApplicationContext：BeanFactory的子接口，提供了更多高级特性，面向Spring的使用者，几乎所有的场合都使用ApplicationContext，而不是使用BeanFactory。<img src="/2020/12/09/Spring_02/1607515291242.png" alt="1607515291242"></p></li><li><p>Navigator：查看类路径(ClassPathXmlApplicationContext使用类路径）</p></li></ol><p><img src="/2020/12/09/Spring_02/1607515399990.png" alt="1607515399990"></p><p><img src="/2020/12/09/Spring_02/1607515419791.png" alt="1607515419791"></p><p>close()、refresh() 方法是在ConfigurableApplicationContext容器中的方法。（后面会用到）</p><h2 id="获取bean对象"><a href="#获取bean对象" class="headerlink" title="获取bean对象"></a>获取bean对象</h2><p><img src="/2020/12/09/Spring_02/1607515779141.png" alt="1607515779141"></p><p>getBean() 重载的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.HelloWorld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取到Person对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、创建Spring的IOC容器对象</span></span><br><span class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、获取Person对象</span></span><br><span class="line"><span class="comment">// (1)、通过id获取对象</span></span><br><span class="line"><span class="comment">// Person p = (Person) ctx.getBean("person");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (2)、通过对象类型获取对象</span></span><br><span class="line"><span class="comment">// 第二种方法，如果在xml文件中有两个不同value的同类型对象，会出错</span></span><br><span class="line"><span class="comment">// Person p = ctx.getBean(Person.class);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (3)、通过id和类型获取对象(避免了配置中相同类型对象和强制转换)</span></span><br><span class="line">Person p = ctx.getBean(<span class="string">"person"</span>, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">p.sayHello();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="依赖注入的方法（DI依赖注入）"><a href="#依赖注入的方法（DI依赖注入）" class="headerlink" title="依赖注入的方法（DI依赖注入）"></a>依赖注入的方法（DI依赖注入）</h2><h3 id="通过bean的setXxx-方法赋值"><a href="#通过bean的setXxx-方法赋值" class="headerlink" title="通过bean的setXxx()方法赋值"></a>通过bean的setXxx()方法赋值</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置bean</span></span><br><span class="line"><span class="comment">  配置方式：基于XML的方式，使用的全类名的方式</span></span><br><span class="line"><span class="comment"> &lt;bean&gt;：受Spring管理的JavaBean对象</span></span><br><span class="line"><span class="comment"> id：&lt;bean&gt;的唯一标识，在整个IOC容器中唯一、不重复</span></span><br><span class="line"><span class="comment"> class:指定JavaBean的全类名。目的：通过反射创建对象。</span></span><br><span class="line"><span class="comment"> Class cls = Class.forName("com.test.HelloWorld.Person");</span></span><br><span class="line"><span class="comment"> Object obj = cls.newInstance();  必须提供无参数的构造器 </span></span><br><span class="line"><span class="comment"> &lt;property&gt;：给对象的属性赋值</span></span><br><span class="line"><span class="comment"> name：指定属性名，指定set风格的属性名。</span></span><br><span class="line"><span class="comment"> value：指定属性值。赋值时调用的是set（）方法</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.test.HelloWorld.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"HanMeiMei"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person1"</span> <span class="attr">class</span>=<span class="string">"com.test.HelloWorld.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"lilei"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DI依赖注入的方式：set方法注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.test.DI.Car"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brand"</span> <span class="attr">value</span>=<span class="string">"奥迪"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"crop"</span> <span class="attr">value</span>=<span class="string">"一汽"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"400000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通过bean的构造器赋值"><a href="#通过bean的构造器赋值" class="headerlink" title="通过bean的构造器赋值"></a>通过bean的构造器赋值</h3><p>​    Spring默认将xml中所有对象进行实例化。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DI依赖注入的方式：构造器方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car1"</span> <span class="attr">class</span> = <span class="string">"com.test.DI.Car"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span> =<span class="string">"宝马"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"华晨"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"450000"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    index指定参数的位置，type指定参数类型（多个构造参数重载）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DI依赖注入的方式：构造器方式</span></span><br><span class="line"><span class="comment">index指定参数位置 </span></span><br><span class="line"><span class="comment">type指定参数类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car2"</span> <span class="attr">class</span> = <span class="string">"com.test.DI.Car"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span> =<span class="string">"宝马"</span> <span class="attr">index</span> =<span class="string">"0"</span> &gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"450000"</span> <span class="attr">index</span> =<span class="string">"2"</span> <span class="attr">type</span>=<span class="string">"java.lang.Double"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"华晨"</span> <span class="attr">index</span> =<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="p名称空间"><a href="#p名称空间" class="headerlink" title="p名称空间"></a>p名称空间</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用p命名空间的语法配置bean :使用的是set方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car3"</span> <span class="attr">class</span> =<span class="string">"com.test.DI.Car"</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">p:brand</span>=<span class="string">"福特"</span> <span class="attr">p:crop</span>=<span class="string">"长安"</span> <span class="attr">p:price</span>=<span class="string">"100000"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 字面量</span></span><br><span class="line"><span class="comment">特殊字符：</span></span><br><span class="line"><span class="comment">1、使用实体    &amp;nbsp;空格</span></span><br><span class="line"><span class="comment">&amp;：&amp;amp</span></span><br><span class="line"><span class="comment">&lt;: &amp;lt</span></span><br><span class="line"><span class="comment">&gt;: &amp;gt</span></span><br><span class="line"><span class="comment">": &amp;quot</span></span><br><span class="line"><span class="comment">2、&lt;![CDATA[ 任意字符 ]]&gt;此时必须使用&lt;value&gt;&lt;/value&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">"car4"</span> <span class="attr">class</span>=<span class="string">"com.test.DI.Car"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brand"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>奥迪11&lt;![CDATA[&amp;&amp;&gt;&gt;&lt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"crop"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>一汽<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>400000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>给内部bean赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.test.DI.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span><br><span class="line">                ...</span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用其他的Bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引用其他的Bean</span></span><br><span class="line"><span class="comment">ref :reference</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">"person"</span> <span class="attr">class</span> =<span class="string">"com.test.DI.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"101"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"aaa"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">ref</span>=<span class="string">"car"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>空置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"bookName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    Spring学习02&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://FWj1635387072.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="学习" scheme="https://FWj1635387072.github.io/categories/%E6%A1%86%E6%9E%B6/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring" scheme="https://FWj1635387072.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习01</title>
    <link href="https://FWj1635387072.github.io/2020/12/07/Spring_01/"/>
    <id>https://FWj1635387072.github.io/2020/12/07/Spring_01/</id>
    <published>2020-12-07T12:59:49.341Z</published>
    <updated>2020-12-07T15:05:46.819Z</updated>
    
    <content type="html"><![CDATA[<p>​    Spring学习01。</p><a id="more"></a><h2 id="Spring框架概述"><a href="#Spring框架概述" class="headerlink" title="Spring框架概述"></a>Spring框架概述</h2><ol><li><p>开源框架。</p></li><li><p>为简化企业级（JavaEE）开发。</p></li><li><p>Spring是一个<strong>IOC</strong>（DI）和<strong>AOP</strong>容器框架。</p></li><li><p>Spring的优良特性</p><p>  <strong>非侵入式</strong>（<strong>轻量级</strong>）：基于Spring开发的应用中的对象可以不依赖于Spring的API</p><p> <strong>依赖注入</strong>：DI——Dependency Injection，反转控制（IOC）最经典的实现</p><p> <strong>面向切面编程</strong>：Aspect Oriented Programming ——AOP</p><p> <strong>容器</strong>：Spring是一个容器，因为它包含并且管理应用对象的生命周期</p><p> <strong>组件化</strong>（解耦）：Spring实现了使用简单的组件配置组合成一个复杂的应用。在Spring中可以使用XML和Java注解组合这些对象</p></li><li><p>一站式：在IOC和AOP基础上可以整合各种企业应用的开源框架和优秀的第三方类库（Spring本身也提供了表述层的SpringMVC和持久层的SpringJDBC）</p></li><li><p>Spring模块</p></li></ol><p><img src="/2020/12/07/Spring_01/1607347094519.png" alt="1607347094519"></p><h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><ol><li><p>导入jar包</p><ul><li>spring-bean-4.0.0.RELEASE.jar</li><li>spring-context-4.0.0.RELEASE.jar</li><li>spring-core-4.0.0.RELEASE.jar</li><li>spring-expression-4.0.0.RELEASE.jar</li><li>commons-logging-1.1.1.jar<img src="/2020/12/07/Spring_01/1607349617010.png" alt="1607349617010"></li></ul></li><li><p>在src下创建applicationContext.xml文件（新建Spring bean Configure File）</p></li><li><p>新建Person类</p></li><li><p>在applicationContext.xml文件中添加配置</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.test.HelloWorld.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"HanMeiMei"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>测试</p><ul><li><p>创建Spring的IOC容器对象</p></li><li><p>获取Person对象</p></li><li><p>调用方法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.HelloWorld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取到Person对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、创建Spring的IOC容器对象</span></span><br><span class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、获取Person对象</span></span><br><span class="line">Person p = (Person) ctx.getBean(<span class="string">"person"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、调用方法</span></span><br><span class="line">p.sayHello();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="xml中bean的配置"><a href="#xml中bean的配置" class="headerlink" title="xml中bean的配置"></a>xml中bean的配置</h3>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置bean</span></span><br><span class="line"><span class="comment">  配置方式：基于XML的方式，使用的全类名的方式</span></span><br><span class="line"><span class="comment"> &lt;bean&gt;：受Spring管理的JavaBean对象</span></span><br><span class="line"><span class="comment"> id：&lt;bean&gt;的唯一标识，在整个IOC容器中唯一、不重复</span></span><br><span class="line"><span class="comment"> class:指定JavaBean的全类名。目的：通过反射创建对象。</span></span><br><span class="line"><span class="comment"> Class cls = Class.forName("com.test.HelloWorld.Person");</span></span><br><span class="line"><span class="comment"> Object obj = cls.newInstance();  必须提供无参数的构造器 </span></span><br><span class="line"><span class="comment"> &lt;property&gt;：给对象的属性赋值</span></span><br><span class="line"><span class="comment"> name：指定属性名，指定set风格的属性名。</span></span><br><span class="line"><span class="comment"> value：指定属性值。赋值时调用的是set（）方法</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.test.HelloWorld.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"HanMeiMei"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="IOC容器和Bean的配置"><a href="#IOC容器和Bean的配置" class="headerlink" title="IOC容器和Bean的配置"></a>IOC容器和Bean的配置</h2><h3 id="IOC（Inversion-of-Control）：反转控制"><a href="#IOC（Inversion-of-Control）：反转控制" class="headerlink" title="IOC（Inversion of Control）：反转控制"></a>IOC（Inversion of Control）：反转控制</h3><p>​    在应用程序中的组件获取资源时，传统方式是组件主动的从容器中获取所需要的资源，在这样的模式下开发人员往往需要知道在具体容器中特定资源的获取方式，增加了学习成本，同时降低了开发效率。</p><p>​    反转控制的思想完全颠覆了应用程序组件获取资源的传统方式：反转了资源的获取方向——改由容器主动将资源推送给需要的组件，开发人员不需要知道容器是如何创建资源对象的，只需要提供接收资源的方式即可，极大的降低了学习成本，提高了开发效率。这种行为也被称为<strong>查找的被动形式</strong>。</p><h3 id="DI（Dependency-Injection）：依赖注入"><a href="#DI（Dependency-Injection）：依赖注入" class="headerlink" title="DI（Dependency Injection）：依赖注入"></a>DI（Dependency Injection）：依赖注入</h3><p>​    IOC的另一种表述方式，即组件以一些预先定义好的方式（例如：setter方法）接受来自容器的资源注入。相对于IOC而言，表述更为直接。</p><p>​    <strong>ps：IOC描述的是一种思想，而DI是对IOC思想的具体实现</strong></p><h3 id="IOC容器在Spring中的实现"><a href="#IOC容器在Spring中的实现" class="headerlink" title="IOC容器在Spring中的实现"></a>IOC容器在Spring中的实现</h3><ol><li><p>通过IOC容器读取Bean的实例之前，需要先将IOC容器本身实例化</p></li><li><p>Spring提供了IOC容器的两种实现方式</p><p> ​    BeanFactory：IOC容器的基本实现，是Spring内部的基础设施</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    Spring学习01。&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://FWj1635387072.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="学习" scheme="https://FWj1635387072.github.io/categories/%E6%A1%86%E6%9E%B6/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring" scheme="https://FWj1635387072.github.io/tags/Spring/"/>
    
  </entry>
  
</feed>
