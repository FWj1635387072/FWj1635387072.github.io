<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>付文杰的博客</title>
  
  <subtitle>个人博客  |  日常</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://FWj1635387072.github.io/"/>
  <updated>2021-03-18T06:30:02.078Z</updated>
  <id>https://FWj1635387072.github.io/</id>
  
  <author>
    <name>付文杰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>matploblib学习笔记</title>
    <link href="https://FWj1635387072.github.io/2021/03/18/matplotlib/"/>
    <id>https://FWj1635387072.github.io/2021/03/18/matplotlib/</id>
    <published>2021-03-18T06:24:32.835Z</published>
    <updated>2021-03-18T06:30:02.078Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="Python" scheme="https://FWj1635387072.github.io/categories/Python/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="https://FWj1635387072.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Pandas学习笔记</title>
    <link href="https://FWj1635387072.github.io/2021/03/14/pandas/"/>
    <id>https://FWj1635387072.github.io/2021/03/14/pandas/</id>
    <published>2021-03-14T14:49:13.253Z</published>
    <updated>2021-03-22T12:56:04.957Z</updated>
    
    <content type="html"><![CDATA[<pre><code>Pandas的用法的总结</code></pre><a id="more"></a><p><code>readcsv()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">food_info = pd.read_csv(<span class="string">"food_info.csv"</span>)</span><br><span class="line">print(food_info.dtypes)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">NDB_No               int64</span><br><span class="line">Shrt_Desc           object</span><br><span class="line">Water_(g)          float64</span><br><span class="line">Energ_Kcal           int64</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>得到前5行数据</p><p><code>head(n)</code>   n默认为5</p><p><code>column</code>得到列名</p><p><code>shape</code>得到维数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">first_rows = food_info.head()</span><br><span class="line">print(first_rows)</span><br><span class="line">print(food_info.columns)</span><br><span class="line">print(food_info.shape)</span><br></pre></td></tr></table></figure><p><code>loc[]</code>得到指定的行，可以使用切片,也可以传入list得到指定的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(food_info.loc[<span class="number">0</span>])</span><br><span class="line">print(food_info.loc[<span class="number">1</span>:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">two_five_ten = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>]</span><br><span class="line">print(food_info.loc[two_five_ten])</span><br><span class="line">print(food_info.loc[[<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>]])</span><br></pre></td></tr></table></figure><p>直接获得某行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(food_info[<span class="string">"NDB_No"</span>])</span><br><span class="line"></span><br><span class="line">columns = [<span class="string">"Zinc_(mg)"</span>,<span class="string">"Copper_(mg)"</span>]</span><br><span class="line">print(food_info[columns])</span><br><span class="line">print(food_info[[<span class="string">"Zinc_(mg)"</span>,<span class="string">"Copper_(mg)"</span>]])</span><br></pre></td></tr></table></figure><p>案例：获得后缀为”(g)”的所有行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">col_name = food_info.columns.tolist()</span><br><span class="line">gram_column = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cn <span class="keyword">in</span> col_name:</span><br><span class="line">    <span class="keyword">if</span> cn.endswith(<span class="string">"(g)"</span>):</span><br><span class="line">        gram_column.append(cn)</span><br><span class="line">gram_column = food_info[gram_column]</span><br><span class="line">print(gram_column)</span><br></pre></td></tr></table></figure><p>对某列直接进行运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">water_energy = food_info[<span class="string">"Water_(g)"</span>] * food_info[<span class="string">"Energ_Kcal"</span>]</span><br><span class="line">iron_grams = food_info[<span class="string">"Iron_(mg)"</span>] / <span class="number">1000</span></span><br><span class="line">food_info[<span class="string">"Iron_(g)"</span>] = iron_grams</span><br><span class="line">print(food_info.columns)</span><br><span class="line"><span class="comment">#如果没有某列，会直接在后面加上</span></span><br></pre></td></tr></table></figure><p>获取某列最大的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">max_calories = food_info[<span class="string">"Energ_Kcal"</span>].max()</span><br><span class="line">print(max_calories)</span><br></pre></td></tr></table></figure><p>对某列进行排序 <code>sort_values()</code></p><p><code>inplace</code>：是否替代，否，将创建另外的对象存储</p><p><code>ascending</code>：默认True，升序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">food_info.sort_values(<span class="string">"Sodium_(mg)"</span>,inplace = <span class="literal">True</span>)</span><br><span class="line">print(food_info[<span class="string">"Sodium_(mg)"</span>])</span><br><span class="line">food_info.sort_values(<span class="string">"Sodium_(mg)"</span>,inplace=<span class="literal">True</span>,ascending=<span class="literal">False</span>)</span><br><span class="line">print(food_info[<span class="string">"Sodium_(mg)"</span>])</span><br></pre></td></tr></table></figure><hr><p>案例：泰坦尼克号</p><p>数据读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">titanic_survival = pd.read_csv(<span class="string">"titanic_train.csv"</span>)</span><br><span class="line">titanic_survival.head()</span><br></pre></td></tr></table></figure><p>计算每列的空值个数（自定义函数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_null_count</span><span class="params">(column)</span>:</span></span><br><span class="line">    column_null = pd.isnull(column)</span><br><span class="line">    null = column[column_null]</span><br><span class="line">    <span class="keyword">return</span> len(null)</span><br><span class="line"></span><br><span class="line">column_null_count = titanic_survival.apply(not_null_count)</span><br><span class="line">print(column_null_count)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------------------</span></span><br><span class="line">age = titanic_survival[<span class="string">"Age"</span>]</span><br><span class="line">age_is_null = pd.isnull(age)</span><br><span class="line">age_null_count = len(age[age_is_null])</span><br><span class="line">print(age_null_count)</span><br></pre></td></tr></table></figure><p>计算平均年龄</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">good_age = titanic_survival[<span class="string">"Age"</span>][age_is_null == <span class="literal">False</span>]</span><br><span class="line">print(good_age)</span><br><span class="line">mean_age = good_age.mean()</span><br><span class="line">print(mean_age)</span><br></pre></td></tr></table></figure><p>删除某列（某几列）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic_survival.drop([<span class="string">"Name"</span>],axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>计算各个等级舱的平均船票价格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#类似于聚类</span></span><br><span class="line">pclass = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">fares_by_class = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pclass:</span><br><span class="line">    row_class = titanic_survival[titanic_survival[<span class="string">"Pclass"</span>] == i]</span><br><span class="line">    fares_class = row_class[<span class="string">"Fare"</span>]</span><br><span class="line">    fares_by_class[i] = fares_class.mean()</span><br><span class="line">print(fares_by_class)</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以使用透视表</span></span><br><span class="line">passage_fare_by_class = titanic_survival.pivot_table(index=<span class="string">"Pclass"</span>,values=<span class="string">"Fare"</span>,aggfunc=np.mean)</span><br><span class="line">print(passage_fare_by_class)</span><br></pre></td></tr></table></figure><p>透视图<code>piovt_table</code></p><p>计算每个等级船舱获救比例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">passage_survival_age = titanic_survival.pivot_table(index=<span class="string">"Pclass"</span>,values=<span class="string">"Survived"</span>,aggfunc=np.mean)</span><br><span class="line">print(passage_survival_age)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算有多少个上船地点，在某个上船地点的船费是多少</span></span><br><span class="line">port_stats = titanic_survival.pivot_table(index=<span class="string">"Embarked"</span>,values=[<span class="string">"Fare"</span>,<span class="string">"Survived"</span>],aggfunc=np.sum)</span><br><span class="line">print(port_stats)</span><br></pre></td></tr></table></figure><p>缺失值处理。。。。。。。</p><p><code>dropna</code> <code>fillna</code> ‘’ </p><hr><p><code>loc</code>获取指定元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">row_index_83_age = titanic_survival.loc[<span class="number">83</span>,<span class="string">"Age"</span>]</span><br><span class="line">row_index_1000_pclass = titanic_survival.loc[<span class="number">766</span>,<span class="string">"Pclass"</span>]</span><br><span class="line">print(row_index_1000_pclass)</span><br><span class="line">print(row_index_83_age)</span><br></pre></td></tr></table></figure><p>处理数据后将index重置<code>reset_index()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new_titanic_survival = titanic_survival.sort_values(<span class="string">"Age"</span>,ascending=<span class="literal">False</span>)</span><br><span class="line">print(new_titanic_survival)</span><br><span class="line">titanic_reindexed = new_titanic_survival.reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">print(titanic_reindexed.iloc[<span class="number">0</span>:<span class="number">10</span>])</span><br></pre></td></tr></table></figure><p>自定义函数：输出第100行元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hundred_row</span><span class="params">(column)</span>:</span></span><br><span class="line">    hundred_item = column.iloc[<span class="number">99</span>]</span><br><span class="line">    <span class="keyword">return</span> hundred_item</span><br><span class="line"></span><br><span class="line">hundred_row = titanic_survival.apply(hundred_row)</span><br><span class="line">print(hundred_row)</span><br></pre></td></tr></table></figure><p>将Class列按基数打印,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">which_class</span><span class="params">(row)</span>:</span></span><br><span class="line">    pclass = row[<span class="string">'Pclass'</span>]</span><br><span class="line">    <span class="keyword">if</span> pd.isnull(pclass):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Unknown"</span></span><br><span class="line">    <span class="keyword">elif</span> pclass == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"First Class"</span></span><br><span class="line">    <span class="keyword">elif</span> pclass == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Second Class"</span></span><br><span class="line">    <span class="keyword">elif</span> pclass == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Third Class"</span></span><br><span class="line">    </span><br><span class="line">classes = titanic_survival.apply(which_class,axis = <span class="number">1</span>)</span><br><span class="line">print(classes)</span><br></pre></td></tr></table></figure><hr><h1 id="Python基础部分"><a href="#Python基础部分" class="headerlink" title="Python基础部分"></a>Python基础部分</h1><h2 id="列表推导式和条件赋值"><a href="#列表推导式和条件赋值" class="headerlink" title="列表推导式和条件赋值"></a>列表推导式和条件赋值</h2><p>生成数字序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*x</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    L.append(my_func(i))</span><br><span class="line">L</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L = [my_func(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L = [m + <span class="string">'_'</span> + n <span class="keyword">for</span> m <span class="keyword">in</span> [<span class="string">'a'</span>,<span class="string">'b'</span>] <span class="keyword">for</span> n <span class="keyword">in</span> [<span class="string">'c'</span>,<span class="string">'d'</span>]]</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><p>语法糖带有if选择的条件赋值<code>value = A if condition else b</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">value = <span class="string">'cat'</span> <span class="keyword">if</span> <span class="number">2</span> &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">'dog'</span></span><br><span class="line">print(value)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将列表中超过5的元素用5替换</span></span><br><span class="line">L = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">L = [i <span class="keyword">if</span> i &lt; <span class="number">5</span> <span class="keyword">else</span> <span class="number">5</span> <span class="keyword">for</span> i <span class="keyword">in</span> L]</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><h2 id="匿名函数和map方法"><a href="#匿名函数和map方法" class="headerlink" title="匿名函数和map方法"></a>匿名函数和map方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_func = <span class="keyword">lambda</span> x : <span class="number">2</span>*x</span><br><span class="line">my_func(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">multi_para_func = <span class="keyword">lambda</span> a,b : a + b</span><br><span class="line">multi_para_func(<span class="number">10</span>,<span class="number">11</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="keyword">lambda</span> x : <span class="number">2</span>*x)(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br></pre></td></tr></table></figure><p>对于列表推导式的匿名函数映射，可用map函数完成，返回map对象，用list转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(<span class="keyword">lambda</span> x: <span class="number">2</span>*x,range(<span class="number">5</span>)))</span><br></pre></td></tr></table></figure><p>多值输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(<span class="keyword">lambda</span> x,y: str(x)+<span class="string">'_'</span>+y , range(<span class="number">5</span>),list(<span class="string">'abcde'</span>)))</span><br></pre></td></tr></table></figure><h2 id="zip对象和enumerate方法"><a href="#zip对象和enumerate方法" class="headerlink" title="zip对象和enumerate方法"></a>zip对象和enumerate方法</h2><p>zip可将多个可迭代对象打包成一个元组构成的可迭代对象，返回一个zip对象，通过tuple，list可以得到相应的打包结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">L1,L2,L3 = list(<span class="string">'abc'</span>),list(<span class="string">'def'</span>),list(<span class="string">'hij'</span>)</span><br><span class="line">list(zip(L1,L2,L3))</span><br><span class="line">tuple(zip(L1,L2,L3))</span><br><span class="line">out：</span><br><span class="line">[(<span class="string">'a'</span>, <span class="string">'d'</span>, <span class="string">'h'</span>), (<span class="string">'b'</span>, <span class="string">'e'</span>, <span class="string">'i'</span>), (<span class="string">'c'</span>, <span class="string">'f'</span>, <span class="string">'j'</span>)]</span><br><span class="line">((<span class="string">'a'</span>, <span class="string">'d'</span>, <span class="string">'h'</span>), (<span class="string">'b'</span>, <span class="string">'e'</span>, <span class="string">'i'</span>), (<span class="string">'c'</span>, <span class="string">'f'</span>, <span class="string">'j'</span>))</span><br></pre></td></tr></table></figure><p>迭代的时候使用zip</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i,j,k <span class="keyword">in</span> zip(L1,L2,L3):</span><br><span class="line">    print(i,j,k)</span><br></pre></td></tr></table></figure><p>enumerate特殊的打包，在迭代时绑定元素的遍历序号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">L = list(<span class="string">'abcd'</span>)</span><br><span class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> enumerate(L):</span><br><span class="line">    print(index,value)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> zip(range(len(L)),L):</span><br><span class="line">    print(index,value)</span><br></pre></td></tr></table></figure><p>两个列表建立字典映射时，可用zip对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict(zip(L1,L2))</span><br></pre></td></tr></table></figure><p>解压：zip和*配合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zipped = list(zip(L1,L2,L3))</span><br><span class="line">print(zipped)</span><br><span class="line">list(zip(*zipped))</span><br></pre></td></tr></table></figure><h2 id="练习1："><a href="#练习1：" class="headerlink" title="练习1："></a>练习1：</h2><p>列表推导式写矩阵乘法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">M1 = np.random.rand(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">M2 = np.random.rand(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">ans = [[sum([M1[i][k] * M2[k,j] <span class="keyword">for</span> k <span class="keyword">in</span> range(M1.shape[<span class="number">1</span>])]) <span class="keyword">for</span> j <span class="keyword">in</span> range(M2.shape[<span class="number">1</span>])]<span class="keyword">for</span> i <span class="keyword">in</span> range(M1.shape[<span class="number">0</span>])]</span><br><span class="line"></span><br><span class="line">ans1 = np.dot(M1,M2)</span><br><span class="line">print(ans)</span><br><span class="line">print(ans1)</span><br></pre></td></tr></table></figure><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><p><code>read_csv()  read_txt()   read_excel()</code>等，参数：</p><p><code>header=None</code>：第一行不做列名</p><p><code>index_col</code>：表示把某一列或几列作为索引</p><p><code>usecols</code>：读取列的集合，默认读所有列</p><p><code>parse_dates</code>：表示需要转换为时间的列</p><p><code>nrows</code>：表示读取的行数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pd.read_csv(<span class="string">'my_csv.csv'</span>,index_col=[<span class="string">'col1'</span>,<span class="string">'col2'</span>])</span><br><span class="line"></span><br><span class="line">pd.read_table(<span class="string">'my_table.txt'</span>,usecols=[<span class="string">'col1'</span>,<span class="string">'col2'</span>])</span><br><span class="line">pd.read_csv(<span class="string">'my_csv.csv'</span>,parse_dates=[<span class="string">'col5'</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#读取txt文件时，遇到非空格，自定义分割符</span></span><br><span class="line"><span class="comment"># sep</span></span><br><span class="line">pd.read_table(<span class="string">'my_table_special_sep.txt'</span>,sep=<span class="string">'\|\|\|\|'</span>,engine=<span class="string">'python'</span>)</span><br></pre></td></tr></table></figure><p>数据写入</p><p>​    常用的操作是把index设置为False,特别当索引没有特殊意义的时候</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_csv.to_csv(<span class="string">'my_csv_saved.csv'</span>,index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>​    python中没有<code>to_table()</code>但是<code>to_csv</code>可以保存txt文件，<code>sep</code>指定分割符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_txt.to_csv(<span class="string">'../data/my_txt_saved.txt'</span>, sep=<span class="string">'\t'</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">'learn_pandas.csv'</span>)</span><br><span class="line">df.columns</span><br><span class="line"><span class="comment">#取前7列</span></span><br><span class="line">df = df[df.columns[:<span class="number">7</span>]]</span><br><span class="line">df</span><br></pre></td></tr></table></figure><h3 id="汇总函数"><a href="#汇总函数" class="headerlink" title="汇总函数"></a>汇总函数</h3><p><code>head</code> 、<code>tail</code>、<code>info()</code>、<code>describe()</code></p><p><code>info</code>和<code>describe</code>返回表中信息概况和对应主要统计量，</p><p>如果想对一份数据集进行全面而有效的观察，特别是在列较多的情况下，推荐使用pandas-profiling包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">'learn_pandas.csv'</span>)</span><br><span class="line">df.info()</span><br><span class="line">df.describe()</span><br></pre></td></tr></table></figure><h3 id="特征统计函数"><a href="#特征统计函数" class="headerlink" title="特征统计函数"></a>特征统计函数</h3><p><code>mean  sum  median  var  std  max  min</code></p><p><code>quantile，count，indxmax</code>:分位数、非缺失值个数、最大值对应索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_demo = df[[<span class="string">'Height'</span>,<span class="string">'Weight'</span>]]</span><br><span class="line">print(df_demo.quantile(<span class="number">0.75</span>))</span><br><span class="line">print(df_demo.count())</span><br><span class="line">print(df_demo.idxmax())</span><br></pre></td></tr></table></figure><h3 id="唯一值函数"><a href="#唯一值函数" class="headerlink" title="唯一值函数"></a>唯一值函数</h3><p><code>unique</code>和<code>nunique</code>可以分别得到其唯一值组成的列表和唯一值的个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(df[<span class="string">'School'</span>].unique())</span><br><span class="line">print(df[<span class="string">'School'</span>].nunique())</span><br></pre></td></tr></table></figure><p><code>value_counts</code>可以得到<strong>唯一值</strong>和其对应出现的<strong>频数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'School'</span>].value_counts()</span><br></pre></td></tr></table></figure><p>如果想要观察多个列组合的唯一值，可以使用<code>drop_duplicates</code>。其中的关键参数是<code>keep</code>，默认值<code>first</code>表示每个组合保留第一次出现的所在行，<code>last</code>表示保留最后一次出现的所在行，<code>False</code>表示把所有重复组合所在的行剔除。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df_demo = df[[<span class="string">'Gender'</span>,<span class="string">'Transfer'</span>,<span class="string">'Name'</span>]]</span><br><span class="line">df_demo.drop_duplicates([<span class="string">'Gender'</span>,<span class="string">'Transfer'</span>])</span><br><span class="line"></span><br><span class="line">df_demo.drop_duplicates([<span class="string">'Gender'</span>, <span class="string">'Transfer'</span>], keep=<span class="string">'last'</span>)</span><br><span class="line"></span><br><span class="line">df_demo.drop_duplicates([<span class="string">'Name'</span>, <span class="string">'Gender'</span>], keep=<span class="literal">False</span>).head() <span class="comment"># 保留只出现过一次的性别和姓名组合</span></span><br></pre></td></tr></table></figure><h3 id="替换函数"><a href="#替换函数" class="headerlink" title="替换函数"></a>替换函数</h3><p>​    一般而言，替换操作是针对某一个列进行的，因此下面的例子都以<code>Series</code>举例。<code>pandas</code>中的替换函数可以归纳为三类：映射替换、逻辑替换、数值替换。其中映射替换包含<code>replace</code>方法、第八章中的<code>str.replace</code>方法以及第九章中的<code>cat.codes</code>方法，此处介绍<code>replace</code>的用法。</p><p>​    在<code>replace</code>中，可以通过字典构造，或者传入两个列表来进行替换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'Gender'</span>].replace(&#123;<span class="string">'Female'</span>:<span class="number">0</span>,<span class="string">'Male'</span>:<span class="number">1</span>&#125;).head()</span><br><span class="line">df[<span class="string">'Gender'</span>].replace([<span class="number">0</span>,<span class="number">1</span>],[<span class="string">'Female'</span>,<span class="string">'Male'</span>]).head()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;Pandas的用法的总结&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://FWj1635387072.github.io/categories/Python/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="https://FWj1635387072.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Numpy学习笔记</title>
    <link href="https://FWj1635387072.github.io/2021/03/13/numpy/"/>
    <id>https://FWj1635387072.github.io/2021/03/13/numpy/</id>
    <published>2021-03-13T11:05:27.073Z</published>
    <updated>2021-03-21T08:40:24.778Z</updated>
    
    <content type="html"><![CDATA[<pre><code>numpy的用法的总结</code></pre><a id="more"></a><p><code>genfromtext()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#从txt文件中读取数据，分割符为，</span></span><br><span class="line"></span><br><span class="line">world_alcohol = np.genfromtext(<span class="string">"world_alcohol.txt"</span>,delimiter=<span class="string">","</span>)</span><br><span class="line">print(type(world_alcohol))</span><br></pre></td></tr></table></figure><p><code>np.array()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vector = np.array([<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#传入两个list作为输入，构造numpy数组</span></span><br><span class="line"></span><br><span class="line">matrix = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line">print(vector)</span><br><span class="line">print(matrix)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出numpy数组的维数，例如（4,）(2,3)</span></span><br><span class="line">print(vector.shape)</span><br><span class="line">print(matrix.shape)</span><br></pre></td></tr></table></figure><p><code>dtype</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">numbers = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4.0</span>])</span><br><span class="line">print(numbers)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出numbers中元素的类型（保证元素类型一致）</span></span><br><span class="line">numbers.dtype</span><br></pre></td></tr></table></figure><p>切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vector = np.array([<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>])</span><br><span class="line">print(vector)</span><br><span class="line">print(vector[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#切片</span></span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[ <span class="number">5</span> <span class="number">10</span> <span class="number">15</span> <span class="number">20</span>]</span><br><span class="line">[ <span class="number">5</span> <span class="number">10</span> <span class="number">15</span>]</span><br></pre></td></tr></table></figure><p>多维切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">matrix = np.array([</span><br><span class="line">            [<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>],</span><br><span class="line">            [<span class="number">20</span>,<span class="number">25</span>,<span class="number">40</span>],</span><br><span class="line">            [<span class="number">35</span>,<span class="number">40</span>,<span class="number">45</span>]</span><br><span class="line">            ])</span><br><span class="line">print(matrix[:,<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[ <span class="number">5</span> <span class="number">10</span>]</span><br><span class="line"> [<span class="number">20</span> <span class="number">25</span>]</span><br><span class="line"> [<span class="number">35</span> <span class="number">40</span>]]</span><br></pre></td></tr></table></figure><p>查找是否存在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vector = np.array([<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>])</span><br><span class="line">vector == <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#判断数组中哪个数为所示数</span></span><br><span class="line">out:</span><br><span class="line">array([<span class="literal">False</span>,  <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">matrix = np.array([</span><br><span class="line">    [<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>],</span><br><span class="line">    [<span class="number">20</span>,<span class="number">25</span>,<span class="number">30</span>],</span><br><span class="line">    [<span class="number">35</span>,<span class="number">40</span>,<span class="number">45</span>]</span><br><span class="line">])</span><br><span class="line">matrix == <span class="number">25</span></span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">array([[<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>],</span><br><span class="line">       [<span class="literal">False</span>,  <span class="literal">True</span>, <span class="literal">False</span>],</span><br><span class="line">       [<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>]])</span><br></pre></td></tr></table></figure><p>通过是否存在输出指定值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">equal_to_ten = (vector == <span class="number">10</span>)</span><br><span class="line">print(equal_to_ten)</span><br><span class="line">print(vector[equal_to_ten])</span><br><span class="line"></span><br><span class="line"><span class="comment">#如何找到指定值</span></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[<span class="literal">False</span>  <span class="literal">True</span> <span class="literal">False</span> <span class="literal">False</span>]</span><br><span class="line">[<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">equal_to_ten = (matrix == <span class="number">10</span>)</span><br><span class="line">print(equal_to_ten)</span><br><span class="line">print(matrix[equal_to_ten])</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">equal_to_ten = (matrix == <span class="number">10</span>)</span><br><span class="line">print(equal_to_ten)</span><br><span class="line">print(matrix[equal_to_ten])</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[[<span class="literal">False</span>  <span class="literal">True</span> <span class="literal">False</span>]</span><br><span class="line"> [<span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span>]</span><br><span class="line"> [<span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span>]]</span><br><span class="line">[<span class="number">10</span>]</span><br></pre></td></tr></table></figure><p>输出指定条件下的指定元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">matrix = np.array([</span><br><span class="line">    [<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>],</span><br><span class="line">    [<span class="number">20</span>,<span class="number">25</span>,<span class="number">30</span>],</span><br><span class="line">    [<span class="number">35</span>,<span class="number">40</span>,<span class="number">45</span>]</span><br><span class="line">])</span><br><span class="line">second_column_25 = (matrix[:,<span class="number">1</span>]==<span class="number">25</span>)</span><br><span class="line">print(second_column_25)</span><br><span class="line">print(matrix[second_column_25,:])</span><br><span class="line"></span><br><span class="line"><span class="comment">#找到第二列中25所在行，输出该行所有元素</span></span><br><span class="line">out：</span><br><span class="line">[<span class="literal">False</span>  <span class="literal">True</span> <span class="literal">False</span>]</span><br><span class="line">[[<span class="number">20</span> <span class="number">25</span> <span class="number">30</span>]]</span><br></pre></td></tr></table></figure><p>查找指定元素时，可以使用逻辑运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vector = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>])</span><br><span class="line">be_divided_by_2_and_3 = (vector % <span class="number">2</span> == <span class="number">0</span>) &amp; (vector % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">print(be_divided_by_2_and_3)</span><br><span class="line">print(vector[be_divided_by_2_and_3])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[<span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span>  <span class="literal">True</span> <span class="literal">False</span>]</span><br><span class="line">[<span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>将第二列中，值为25的元素改为10</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">matrix = np.array([</span><br><span class="line">    [<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>],</span><br><span class="line">    [<span class="number">20</span>,<span class="number">25</span>,<span class="number">30</span>],</span><br><span class="line">    [<span class="number">35</span>,<span class="number">40</span>,<span class="number">45</span>]</span><br><span class="line">])</span><br><span class="line">second_column_equal_25 = (matrix[:,<span class="number">1</span>] == <span class="number">25</span>)</span><br><span class="line">print(second_column_equal_25)</span><br><span class="line">matrix[second_column_equal_25,<span class="number">1</span>]=<span class="number">10</span></span><br><span class="line">print(matrix)</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[<span class="literal">False</span>  <span class="literal">True</span> <span class="literal">False</span>]</span><br><span class="line">[[ <span class="number">5</span> <span class="number">10</span> <span class="number">15</span>]</span><br><span class="line"> [<span class="number">20</span> <span class="number">10</span> <span class="number">30</span>]</span><br><span class="line"> [<span class="number">35</span> <span class="number">40</span> <span class="number">45</span>]]</span><br></pre></td></tr></table></figure><p>numpy元素转换<code>astype()</code>        </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vector = np.array([<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>])</span><br><span class="line">print(vector.dtype)</span><br><span class="line">print(vector)</span><br><span class="line">vector = vector.astype(float)</span><br><span class="line">print(vector)</span><br><span class="line">print(vector.dtype)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">&lt;U1</span><br><span class="line">[<span class="string">'1'</span> <span class="string">'2'</span> <span class="string">'3'</span>]</span><br><span class="line">[<span class="number">1.</span> <span class="number">2.</span> <span class="number">3.</span>]</span><br><span class="line">float64</span><br></pre></td></tr></table></figure><p><code>sum()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector =  np.array([<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>])</span><br><span class="line">print(vector.sum())</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    <span class="number">50</span></span><br></pre></td></tr></table></figure><p>多维向量分别对行和列进行求和</p><p><code>axis=1</code>表示列</p><p><code>axis=0</code>表示行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">matrix = np.array([</span><br><span class="line">    [<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>],</span><br><span class="line">    [<span class="number">20</span>,<span class="number">25</span>,<span class="number">30</span>],</span><br><span class="line">    [<span class="number">35</span>,<span class="number">40</span>,<span class="number">45</span>]</span><br><span class="line">])</span><br><span class="line">print(matrix.sum(axis=<span class="number">0</span>))</span><br><span class="line">print(matrix.sum(axis=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[<span class="number">60</span> <span class="number">75</span> <span class="number">90</span>]</span><br><span class="line">[ <span class="number">30</span>  <span class="number">75</span> <span class="number">120</span>]</span><br></pre></td></tr></table></figure><p><code>isnan</code></p><p>将得到数据，第四行为空值的设置为均值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">world_alcohol = np.genfromtxt(<span class="string">"world_alcohol.txt"</span>,delimiter=<span class="string">','</span>)</span><br><span class="line"><span class="comment">#print(world_alcohol)</span></span><br><span class="line">is_value_null = np.isnan(world_alcohol[:,<span class="number">4</span>])</span><br><span class="line"><span class="comment">#print(is_value_null)</span></span><br><span class="line">world_alcohol[is_value_null,<span class="number">4</span>] = <span class="string">'0'</span></span><br><span class="line">alcohol_comsumption = world_alcohol[:,<span class="number">4</span>]</span><br><span class="line">alcohol_comsumption = alcohol_comsumption.astype(float)</span><br><span class="line">alcohol_total = alcohol_comsumption.sum();</span><br><span class="line">alcohol_mean = alcohol_comsumption.mean();</span><br><span class="line">print(alcohol_total)</span><br><span class="line">print(alcohol_mean)</span><br><span class="line">world_alcohol[is_value_null,<span class="number">4</span>] = alcohol_mean</span><br><span class="line">print(world_alcohol)</span><br></pre></td></tr></table></figure><p><code>arrange(begin,end,internal)</code>,默认begin从0开始，左闭右开。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(np.arange(<span class="number">10</span>,<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[<span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span>]</span><br></pre></td></tr></table></figure><p><code>reshape(row,col)</code>：将numpy数组改变为指定的形状，-1表示自动改变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">10</span>).reshape(<span class="number">2</span>,<span class="number">-1</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">0</span>,<span class="number">10</span>,<span class="number">1</span>).reshape(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]]</span><br></pre></td></tr></table></figure><p><code>ones((row,col),dtype= )    zeros(...)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = np.ones((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">print(a)</span><br><span class="line">print(a.dtype)</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[[<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]]</span><br><span class="line">float64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b = np.zeros((<span class="number">2</span>,<span class="number">3</span>),dtype=np.int32)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]]</span><br></pre></td></tr></table></figure><p>​    <code>random</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = np.random.random((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[<span class="number">0.25455831</span> <span class="number">0.21875025</span> <span class="number">0.9586944</span> ]</span><br><span class="line"> [<span class="number">0.03249533</span> <span class="number">0.525685</span>   <span class="number">0.64446951</span>]]</span><br></pre></td></tr></table></figure><p>numpy数组运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>])</span><br><span class="line">b = np.arange(<span class="number">4</span>)</span><br><span class="line">print(a + b)</span><br><span class="line">print(a - b)</span><br><span class="line">print(a * b)</span><br><span class="line">print(a**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[<span class="number">10</span> <span class="number">21</span> <span class="number">32</span> <span class="number">43</span>]</span><br><span class="line">[<span class="number">10</span> <span class="number">19</span> <span class="number">28</span> <span class="number">37</span>]</span><br><span class="line">[  <span class="number">0</span>  <span class="number">20</span>  <span class="number">60</span> <span class="number">120</span>]</span><br><span class="line">[ <span class="number">100</span>  <span class="number">400</span>  <span class="number">900</span> <span class="number">1600</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">A = np.array([</span><br><span class="line">    [<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">])</span><br><span class="line">B = np.array([</span><br><span class="line">    [<span class="number">2</span>,<span class="number">0</span>],</span><br><span class="line">    [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">])</span><br><span class="line">print(A)</span><br><span class="line">print(B)</span><br><span class="line">print(<span class="string">"*"</span> * <span class="number">6</span>)</span><br><span class="line">print(A*B)</span><br><span class="line">print(<span class="string">"*"</span> * <span class="number">6</span>)</span><br><span class="line">print(A.dot(B))</span><br><span class="line">print(<span class="string">"*"</span> * <span class="number">6</span>)</span><br><span class="line">print(np.dot(A,B))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[[<span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span>]]</span><br><span class="line">[[<span class="number">2</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]]</span><br><span class="line">******</span><br><span class="line">[[<span class="number">2</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">4</span>]]</span><br><span class="line">******</span><br><span class="line">[[<span class="number">5</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]]</span><br><span class="line">******</span><br><span class="line">[[<span class="number">5</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]]</span><br></pre></td></tr></table></figure><p>数组合并和拆分</p><p><code>hstack()</code>：横向合并</p><p><code>vstack()</code>：纵向合并</p><p><code>hsplit()</code>：横向拆分</p><p><code>vsplit()</code>：纵向拆分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">2</span>,<span class="number">2</span>)))</span><br><span class="line">b = np.floor(<span class="number">10</span>*np.random.random((<span class="number">2</span>,<span class="number">2</span>)))</span><br><span class="line">print(a)</span><br><span class="line">print(<span class="string">"*"</span> * <span class="number">10</span>)</span><br><span class="line">print(b)</span><br><span class="line">print(<span class="string">"*"</span> * <span class="number">10</span>)</span><br><span class="line">print(np.vstack((a,b)))</span><br><span class="line">print(<span class="string">"*"</span> * <span class="number">10</span>)</span><br><span class="line">print(np.hstack((a,b)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    [[<span class="number">1.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">6.</span> <span class="number">6.</span>]]</span><br><span class="line">**********</span><br><span class="line">[[<span class="number">6.</span> <span class="number">6.</span>]</span><br><span class="line"> [<span class="number">3.</span> <span class="number">9.</span>]]</span><br><span class="line">**********</span><br><span class="line">[[<span class="number">1.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">6.</span> <span class="number">6.</span>]</span><br><span class="line"> [<span class="number">6.</span> <span class="number">6.</span>]</span><br><span class="line"> [<span class="number">3.</span> <span class="number">9.</span>]]</span><br><span class="line">**********</span><br><span class="line">[[<span class="number">1.</span> <span class="number">0.</span> <span class="number">6.</span> <span class="number">6.</span>]</span><br><span class="line"> [<span class="number">6.</span> <span class="number">6.</span> <span class="number">3.</span> <span class="number">9.</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">2</span>,<span class="number">6</span>)))</span><br><span class="line">print(a)</span><br><span class="line">print(np.hsplit(a,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[[<span class="number">8.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">8.</span> <span class="number">6.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">8.</span> <span class="number">1.</span> <span class="number">3.</span> <span class="number">6.</span> <span class="number">1.</span>]]</span><br><span class="line">[array([[<span class="number">8.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">8.</span>]]), array([[<span class="number">0.</span>, <span class="number">8.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">3.</span>]]), array([[<span class="number">6.</span>, <span class="number">1.</span>],</span><br><span class="line">       [<span class="number">6.</span>, <span class="number">1.</span>]])]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">2</span>,<span class="number">6</span>)))</span><br><span class="line">print(a)</span><br><span class="line">print(np.hsplit(a,(<span class="number">3</span>,<span class="number">5</span>)))</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[[<span class="number">8.</span> <span class="number">4.</span> <span class="number">1.</span> <span class="number">8.</span> <span class="number">5.</span> <span class="number">2.</span>]</span><br><span class="line"> [<span class="number">6.</span> <span class="number">4.</span> <span class="number">2.</span> <span class="number">0.</span> <span class="number">7.</span> <span class="number">9.</span>]]</span><br><span class="line">[array([[<span class="number">8.</span>, <span class="number">4.</span>, <span class="number">1.</span>],</span><br><span class="line">       [<span class="number">6.</span>, <span class="number">4.</span>, <span class="number">2.</span>]]), array([[<span class="number">8.</span>, <span class="number">5.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">7.</span>]]), array([[<span class="number">2.</span>],</span><br><span class="line">       [<span class="number">9.</span>]])]</span><br></pre></td></tr></table></figure><p><code>r_</code>：上下合并</p><p><code>c_</code>：左右合并</p><p>引用地址:</p><p>​    使用copy（）,开辟新的内存空间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">b = a.view();</span><br><span class="line">print(str(a) + <span class="string">"\n"</span> +str(b))</span><br><span class="line">a[<span class="number">2</span>] = <span class="number">111</span></span><br><span class="line">print(str(a) + <span class="string">"\n"</span> +str(b))</span><br><span class="line">b[<span class="number">2</span>] = <span class="number">3</span></span><br><span class="line">print(str(a) + <span class="string">"\n"</span> +str(b))</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[  <span class="number">1</span>   <span class="number">2</span> <span class="number">111</span>]</span><br><span class="line">[  <span class="number">1</span>   <span class="number">2</span> <span class="number">111</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">b = a.copy();</span><br><span class="line">print(str(a) + <span class="string">"\n"</span> +str(b))</span><br><span class="line">a[<span class="number">2</span>] = <span class="number">111</span></span><br><span class="line">print(str(a) + <span class="string">"\n"</span> +str(b))</span><br><span class="line">b[<span class="number">2</span>] = <span class="number">3</span></span><br><span class="line">print(str(a) + <span class="string">"\n"</span> +str(b))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[  <span class="number">1</span>   <span class="number">2</span> <span class="number">111</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[  <span class="number">1</span>   <span class="number">2</span> <span class="number">111</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p><code>tile()平铺</code>：将传入的矩阵看作元素，复制为指定的矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">0</span>,<span class="number">40</span>,<span class="number">10</span>)</span><br><span class="line">b= np.tile(a,(<span class="number">3</span>,<span class="number">5</span>))</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[ <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>]</span><br><span class="line">[[ <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>]</span><br><span class="line"> [ <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>]</span><br><span class="line"> [ <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span>]]</span><br></pre></td></tr></table></figure><p><code>argsort()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">j = np.argsort(a)</span><br><span class="line">print(j)</span><br><span class="line">print(a[j])</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[<span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">0</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>交换矩阵的其中两行/列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">25</span>).reshape(<span class="number">5</span>,<span class="number">-1</span>)</span><br><span class="line">print(a)</span><br><span class="line">a[[<span class="number">2</span>,<span class="number">1</span>],:] = a[[<span class="number">1</span>,<span class="number">2</span>],:]</span><br><span class="line"></span><br><span class="line"><span class="comment">#a[:,[1,2]] = a[:,[2,1]]</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>]</span><br><span class="line"> [ <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span>]</span><br><span class="line"> [<span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span>]</span><br><span class="line"> [<span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span>]]</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span>]</span><br><span class="line"> [ <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>]</span><br><span class="line"> [<span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span>]</span><br><span class="line"> [<span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span>]]</span><br></pre></td></tr></table></figure><p>找出数组中与给定值最接近的数的下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">z = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">55</span>],[<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">1</span>]])</span><br><span class="line">a = <span class="number">5.1</span></span><br><span class="line">print(np.abs(z-a).argmin())</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p>Numpy中更好的遍历方式<code>apply_along_axis</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">11</span>,<span class="number">36</span>).reshape(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y = np.apply_along_axis(np.sum, <span class="number">0</span>, x)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line">y = np.apply_along_axis(np.sum,<span class="number">1</span>,x)</span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure><p>矩阵转置<code>transpose()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">10</span>).reshape(<span class="number">2</span>,<span class="number">5</span>).transpose()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>使用numpy计算移动平均数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">100</span>)</span><br><span class="line">z = np.random.randint(<span class="number">10</span>,size = <span class="number">10</span>)</span><br><span class="line">print(z)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MovingAverage</span><span class="params">(arr, n = <span class="number">3</span>)</span>:</span></span><br><span class="line">    a = np.cumsum(arr)</span><br><span class="line">    a[n:] = a[n:] - a[:-n]</span><br><span class="line">    <span class="keyword">return</span> a[n - <span class="number">1</span>:] / n     </span><br><span class="line">    </span><br><span class="line">r = MovingAverage(z,<span class="number">3</span>)</span><br><span class="line">print(np.around(r,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>对5*5的矩阵进行归一化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Z = np.random.random((<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">Zmax,Zmin = Z.max(),Z.min()</span><br><span class="line">Z = (Z - Zmin) / (Zmax - Zmin)</span><br><span class="line">print(Z)</span><br></pre></td></tr></table></figure><p>排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获得排序后的下标  argsort()</span></span><br><span class="line">np.random.seed(<span class="number">20200612</span>)</span><br><span class="line">x = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">y = np.argsort(x)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line">print(x[y])</span><br><span class="line"></span><br><span class="line">y = np.argsort(-x)</span><br><span class="line">print(y)</span><br><span class="line">print(x[y])</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照某列或行对整体进行排序  lexsort()</span></span><br><span class="line">x = np.random.rand(<span class="number">5</span>,<span class="number">5</span>) * <span class="number">10</span></span><br><span class="line">x = np.around(x,<span class="number">2</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">index = np.lexsort([x[:,<span class="number">0</span>]])</span><br><span class="line">print(index)</span><br><span class="line">y = x[index]</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#partition()，以下标为kth的元素为基准</span></span><br><span class="line"><span class="comment">#将元素分为两部分，小于某元素放前面，大于放后面。</span></span><br><span class="line">x = np.random.randint(<span class="number">1</span>,<span class="number">20</span>,[<span class="number">1</span>,<span class="number">15</span>])</span><br><span class="line">print(x)</span><br><span class="line">y = np.partition(x,kth=<span class="number">3</span>)</span><br><span class="line">print(y)</span><br><span class="line"><span class="comment">#取出每一列第三小的元素</span></span><br><span class="line">x = np.random.randint(<span class="number">1</span>,<span class="number">20</span>,[<span class="number">5</span>,<span class="number">3</span>])</span><br><span class="line">y = np.partition(x,kth=<span class="number">3</span>,axis=<span class="number">0</span>)</span><br><span class="line">print(y)</span><br><span class="line">print(y[<span class="number">2</span>,:])</span><br><span class="line"></span><br><span class="line"><span class="comment">#count_nonzero()记录非零元素个数</span></span><br></pre></td></tr></table></figure><p>numpy中和线性代数相关的函数</p><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">diag</td><td align="center">将一个方阵的对角元素作为一位数组返回，或将一个一位数组转换为方阵，并在非对角线上有零点。</td></tr><tr><td align="center">dot</td><td align="center">矩阵点乘</td></tr><tr><td align="center">trace</td><td align="center">计算对角元素和</td></tr><tr><td align="center">det</td><td align="center">计算行列式</td></tr><tr><td align="center">eig</td><td align="center">计算方阵的特征值和特征向量</td></tr><tr><td align="center">inv</td><td align="center">计算方针的逆矩阵</td></tr><tr><td align="center">pinv</td><td align="center">计算方阵的Moore-Penrose伪逆</td></tr><tr><td align="center">qr</td><td align="center">计算QR分解</td></tr><tr><td align="center">svd</td><td align="center">计算奇异值分解</td></tr><tr><td align="center">solve</td><td align="center">求解x的线性系统Ax=b，其中A为方阵</td></tr><tr><td align="center">lstsq</td><td align="center">计算Ax=B的最小二乘解</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">b = np.diag(a)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[<span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算对角元素和</span></span><br><span class="line">print(np.trace(b))</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算行列式</span></span><br><span class="line">print(np.linalg.det(b))</span><br><span class="line">out：</span><br><span class="line"><span class="number">23.999999999999993</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算方阵的特征向量</span></span><br><span class="line">c = np.linalg.eig(b)</span><br><span class="line">print(c[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">out</span><br><span class="line">[[<span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算方针的逆矩阵</span></span><br><span class="line">print(np.linalg.inv(b))</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">[[<span class="number">1.</span>         <span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.</span>        ]</span><br><span class="line"> [<span class="number">0.</span>         <span class="number">0.5</span>        <span class="number">0.</span>         <span class="number">0.</span>        ]</span><br><span class="line"> [<span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.33333333</span> <span class="number">0.</span>        ]</span><br><span class="line"> [<span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.25</span>      ]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#求解x的线性系统</span></span><br><span class="line">print(np.linalg.solve(b,a.T))</span><br><span class="line">out：</span><br><span class="line">[<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br></pre></td></tr></table></figure><p>伪随机数生成</p><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">seed</td><td align="center">随机数种子</td></tr><tr><td align="center">permutation</td><td align="center">返回一个序列的随机排列，或者返回一个乱序的整数范围序列</td></tr><tr><td align="center">shuffle</td><td align="center">随机排列一个序列</td></tr><tr><td align="center">rand</td><td align="center">从均匀分布中抽取样本</td></tr><tr><td align="center">randint</td><td align="center">根据给定的由低到高的范围抽取整数</td></tr><tr><td align="center">randn</td><td align="center">从均值0，方差1的正太分布中抽取样本</td></tr><tr><td align="center">binomial</td><td align="center">从二项分布中抽取样本</td></tr><tr><td align="center">normal</td><td align="center">从正态（高斯）分布中抽取样本</td></tr><tr><td align="center">beta</td><td align="center">从beta分布中抽取样本</td></tr><tr><td align="center">chisquare</td><td align="center">从卡方分布中抽取样本</td></tr><tr><td align="center">gamma</td><td align="center">从伽马分布中抽取样本</td></tr><tr><td align="center">uniform</td><td align="center">从均匀[0，1）分布中抽取样本</td></tr></tbody></table><p>常用函数：</p><p><code>where</code>、<code>nonzero</code>、<code>argmax</code>、<code>argmin</code>、<code>any</code>、<code>all</code>、<code>cumprod  cumsum diff</code></p><p>常用统计函数：</p><p><code>max min  mean  median  std  var  sum  quantile</code>，略过缺失值对应有<code>nan*</code>函数</p><p>协方差和相关系数</p><p><code>cov</code> 、<code>corrcoef</code></p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;numpy的用法的总结&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://FWj1635387072.github.io/categories/Python/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="https://FWj1635387072.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Shell学习</title>
    <link href="https://FWj1635387072.github.io/2021/03/13/Shell/"/>
    <id>https://FWj1635387072.github.io/2021/03/13/Shell/</id>
    <published>2021-03-12T23:46:56.124Z</published>
    <updated>2021-03-13T00:36:24.105Z</updated>
    
    <content type="html"><![CDATA[<p>​    Shell简单的学习</p><a id="more"></a><h1 id="基本认识"><a href="#基本认识" class="headerlink" title="基本认识"></a>基本认识</h1><p>Linux提供的Shell解析器</p><p><code>cat /etc/shells</code></p><p>/bin/bash</p><p>/bin/sh</p><p>CentOS默认的解析器是bash</p><p><code>echo $SHELL</code></p><h1 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h1><h2 id="脚本格式"><a href="#脚本格式" class="headerlink" title="脚本格式"></a>脚本格式</h2><p><code>#！/bin/bash</code>    指定解析器</p><h2 id="HelloWorld案例"><a href="#HelloWorld案例" class="headerlink" title="HelloWorld案例"></a>HelloWorld案例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">touch helloworld.sh</span><br><span class="line">vi helloworld.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo "helloWorld!"</span><br></pre></td></tr></table></figure><p>执行</p><p><code>sh 脚本相对/绝对路径</code></p><p><code>bash 脚本相对/绝对路径</code></p><p>给文件赋予执行权限，直接运行，注意一般为</p><p><code>./helloworld.sh</code></p><h1 id="Shell中变量"><a href="#Shell中变量" class="headerlink" title="Shell中变量"></a>Shell中变量</h1><h2 id="常用系统变量"><a href="#常用系统变量" class="headerlink" title="常用系统变量"></a>常用系统变量</h2><p><code>$HOME</code> <code>$PWD</code>  <code>$SHELL</code>  <code>$USER</code></p><h2 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h2><p>1、基本语法</p><p>​    1）定义变量：变量=值</p><p>​    2）撤销变量：unset 变量</p><p>​    3）声明静态变量：readonly 变量，注意：静态不能unset，重启的时候清除</p><p>2、变量定义规则</p><p>​    1）变量名称可以由字母、数字和下划线组成，但是不能以数字开头，环境变量名建议大写。</p><p>​    2）<strong>等号两侧不能有空格</strong>。</p><p>​    3）<strong>在bash中，变量类型默认均为字符串类型，无法直接进行数值运算</strong>。</p><p>​    4）<strong>变量的值如果有空格，需要用双引号或单引号引起来</strong>。</p><p>案例</p><p>​    1）定义变量A,并输出A</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A=5</span><br><span class="line">echo $A</span><br></pre></td></tr></table></figure><p>​    2）给A重新赋值，并输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A=6</span><br><span class="line">echo $A</span><br></pre></td></tr></table></figure><p>​    3）撤销变量A</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset A</span><br></pre></td></tr></table></figure><p>​    4）声明静态变量B</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readonly B=1</span><br></pre></td></tr></table></figure><p>​    5）变量有空格</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A="a b c"</span><br></pre></td></tr></table></figure><p>​    6）全局环境变量，可供其他Shell程序使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export b</span><br></pre></td></tr></table></figure><h2 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h2><p><code>$n</code>：n为数字，$0代表该脚本名称，$1-$9代表第一到第九个参数，十以上的参数需要用大括号包含，如${10}</p><p>输入该脚本文件名称、输入参数1和输入参数2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo $1 $2</span><br></pre></td></tr></table></figure><p><code>$#</code>：获取所有输入参数的个数</p><p><code>$*</code>：代表命令行所有的参数，把所有参数看作一个整体。</p><p><code>$@</code>：代表所有参数，不过$@把每个参数区分对待</p><p><code>$?</code>：最后一次执行的命令的返回状态。0表示上一个命令正确执行，非零执行不正确。</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p><code>$((运算式))</code>或者<code>$[运算式]</code></p><p>expr    +   -     \*    /    %</p><p>计算2+3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A=$[2+3]</span><br><span class="line">echo $A</span><br></pre></td></tr></table></figure><h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><p><code>[ condition ]</code>   (condition前后均有空格)</p><p>条件非空即为true，[ aaa ] :true  []: false</p><p>常用判断条件</p><p>（1）两个整数之间比较</p><p>​        = 字符串比较</p><p>​        -lt 小于（less than）           -le 小于等于（less equal）</p><p>​        -eq 等于（equal）             -gt 大于（greater than）</p><p>​        -ge 大于等于（greater equal）  -ne 不等于（Not equal）</p><p>（2）按照文件权限进行判断</p><p>​        -r 有读的权限（read）         -w 有写的权限（write）</p><p>​        -x 有执行的权限（execute）</p><p>（3）按照文件类型进行判断</p><p>​        -f 文件存在并且是一个常规的文件（file）</p><p>​        -e 文件存在（existence）       -d 文件存在并是一个目录（directory）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//23是否大于等于22</span><br><span class="line"></span><br><span class="line">[ 23 -ge 22 ]</span><br><span class="line"><span class="meta">$</span><span class="bash">?</span></span><br><span class="line"></span><br><span class="line">//helloworld是否有写的权限</span><br><span class="line">[ -w helloworld ]</span><br><span class="line"><span class="meta">$</span><span class="bash">?</span></span><br></pre></td></tr></table></figure><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><h2 id="case"><a href="#case" class="headerlink" title="case"></a>case</h2><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><h1 id="read读取控制台输入"><a href="#read读取控制台输入" class="headerlink" title="read读取控制台输入"></a>read读取控制台输入</h1><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h1 id="Shell工具"><a href="#Shell工具" class="headerlink" title="Shell工具"></a>Shell工具</h1><h2 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h2><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    Shell简单的学习&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="https://FWj1635387072.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Shell" scheme="https://FWj1635387072.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>CentOS实操</title>
    <link href="https://FWj1635387072.github.io/2021/01/18/CentOS/"/>
    <id>https://FWj1635387072.github.io/2021/01/18/CentOS/</id>
    <published>2021-01-18T00:37:09.817Z</published>
    <updated>2021-03-12T06:01:45.496Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="vim快捷键"><a href="#vim快捷键" class="headerlink" title="vim快捷键"></a>vim快捷键</h2><table><thead><tr><th align="center">快捷键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>x yy</code></td><td align="center">复制x行</td></tr><tr><td align="center"><code>x dd</code></td><td align="center">删除x行</td></tr><tr><td align="center"><code>:set nu</code></td><td align="center">显示行号</td></tr><tr><td align="center"><code>/str</code></td><td align="center">查找str</td></tr><tr><td align="center"><code>G</code></td><td align="center">跳转到最后</td></tr><tr><td align="center"><code>gg</code></td><td align="center">跳转到最前</td></tr><tr><td align="center"><code>n G</code></td><td align="center">跳转到第n行</td></tr><tr><td align="center"><code>u</code></td><td align="center">撤销</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="开机重启"><a href="#开机重启" class="headerlink" title="开机重启"></a>开机重启</h2><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>shutdown -h now</code></td><td align="center">立刻关机</td></tr><tr><td align="center"><code>shutdown -h 1</code></td><td align="center">1分钟后关机</td></tr><tr><td align="center"><code>shutdown -r now</code></td><td align="center">立刻重启</td></tr><tr><td align="center"><code>halt</code></td><td align="center">立刻关机</td></tr><tr><td align="center"><code>reboot</code></td><td align="center">立刻重启</td></tr><tr><td align="center"><code>sync</code></td><td align="center">把内存中信息写入磁盘</td></tr></tbody></table><p>使用细节：</p><p>​    当重启或关机时，一般要先执行   <code>sync</code>    保存数据。</p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>​    /etc/passwd  </p><p>​            用户的配置文件，记录用户的各种信息。</p><p>​            每行的含义：用户名：口令：用户标识号：组标识号：注释性描述：主目录：登录                                shell</p><p>​    /etc/shadow</p><p>​            口令配置文件（加密过的用户密码）</p><p>​    /etc/group</p><p>​            组配置文件，记录Linux包含的组的信息。</p><p>​            每行含义：组名，组id，隐藏信息。</p><p><code>logout</code>:注销用户</p><p><code>useradd 用户名</code>:添加一个用户，</p><p>​            用户创建成功后，会自动创建和用户名同名的home目录。</p><p>​            也可以通过<code>useradd -d  指定目录  用户名</code>给新创建的用户指定home目录</p><p>​            创建时，直接指定组。</p><p>​            <code>useradd -g 组名 用户名</code></p><p><code>passwd 用户名</code>：给用户指定或修改密码。</p><p><code>userdel 用户名</code>:    删除用户</p><p>​        删除用户但保留home目录</p><p>​            <code>userdel 用户名</code></p><p>​        删除用户不保留home目录</p><p>​            <code>userdel -r 用户名</code></p><p><code>id 用户名</code>:  查看用户信息。</p><p>​            uid：用户id号</p><p>​            gid：所在组的id号</p><p>​            groups：所在组名称</p><p><code>su -</code> ：切换用户</p><p>​            权限高到权限低，不需密码。</p><p>​            反之，需要。</p><p>​            退出返回原用户，exit</p><p><code>groupadd 组名</code>：增加组.    </p><p><code>groupdel 组名</code>：删除组</p><p><code>usermod -g 用户组 用户名</code>：修改用户组，更换用户组</p><h2 id="实用指令"><a href="#实用指令" class="headerlink" title="实用指令"></a>实用指令</h2><h3 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h3><p>​    </p><table><thead><tr><th align="center">级别</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">关机</td></tr><tr><td align="center">1</td><td align="center">单用户（类似安全模式，可以帮助找回root密码）</td></tr><tr><td align="center">2</td><td align="center">多用户无网络级别</td></tr><tr><td align="center">3</td><td align="center">多用户有网络（<strong>使用最多</strong>）</td></tr><tr><td align="center">4</td><td align="center">系统未使用保留给用户（保留级别）</td></tr><tr><td align="center">5</td><td align="center">图形界面</td></tr><tr><td align="center">6</td><td align="center">系统重启</td></tr></tbody></table><p>常用运行级别时3和5，要修改默认的运行级别可改文件<code>/etc/inittab</code></p><p><code>init 级别</code></p><p>找回root密码</p><p>​        思路：进入单用户模式，修改root、密码。因为进入单用户模式，root不需要密码就可登录。</p><h3 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h3><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>pwd</code></td><td align="center">显示当前工作目录的觉得路</td></tr><tr><td align="center"><code>ls [选项] [目录或文件]</code></td><td align="center">-a：显示当前所有文件和目录（包括隐藏）<br>-l：以列表的方式显示</td></tr><tr><td align="center"><code>cd [参数]</code></td><td align="center"><code>cd ~或者cd</code>：返回自己的home目录<br><code>cd ..</code>：返回当前目录的上一级目录</td></tr><tr><td align="center"><code>mkdir [参数]</code></td><td align="center">-p：创建多级目录</td></tr><tr><td align="center"><code>rmdir</code></td><td align="center">删除空目录</td></tr><tr><td align="center"><code>rm -rf</code></td><td align="center">可删除非空目录<br>-f  不提示</td></tr><tr><td align="center"><code>echo</code>指令</td><td align="center">echo 输出内容到控制台</td></tr><tr><td align="center"><code>head</code>指令</td><td align="center">显示文件开头部分，默认显示文件的前10行，<br><code>hear -n 5 文件</code>，显示文件的前5行</td></tr><tr><td align="center"><code>tail</code>指令</td><td align="center">输出文件尾部的内容。<br><code>tail -f 文件名</code><strong>实时监控</strong>文件的修改情况</td></tr><tr><td align="center"><code>ln</code>指令</td><td align="center">软链接<br>类似于快捷方式，主要存放链接了其他文件的路径。<br><code>ln -s [源文件/目录][软链接名]</code></td></tr></tbody></table><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>touch</code></td><td align="center">创建</td></tr><tr><td align="center"><code>cp [-r] 源目录 目标目录</code></td><td align="center">复制，-r 表示递归拷贝<br>/cp 表示强制覆盖不提示</td></tr><tr><td align="center"><code>mv 源文件 目标文件</code></td><td align="center">移动文件或目录或重命名</td></tr><tr><td align="center">`cat -n 文件</td><td align="center">more`</td></tr></tbody></table><p>​    <code>more  文件名</code></p><p>more指令是一个基于vi编辑器的文本过滤器，它以全屏的方式按页显示文本文件的内容，more命令中内置了若干快捷键：</p><p>​    </p><table><thead><tr><th align="center">快捷键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>space</code></td><td align="center">向下翻一页</td></tr><tr><td align="center"><code>Enter</code></td><td align="center">向下翻一行</td></tr><tr><td align="center"><code>q</code></td><td align="center">立刻离开more</td></tr><tr><td align="center"><code>Ctrl+F</code></td><td align="center">向下滚动一屏</td></tr><tr><td align="center"><code>Ctrl+B</code></td><td align="center">返回上一屏</td></tr><tr><td align="center"><code>=</code></td><td align="center">输出当前行号</td></tr><tr><td align="center"><code>:f</code></td><td align="center">输出文件名和当前行号</td></tr></tbody></table><p>​    <code>less 文件名</code></p><p>​    less指令用来分屏查看文件内容，他的功能与more类似，但比more更加强大，支持各种显示终端，less指令在显示文件内容时，并不是一次将整个文件加载后才显示，而是根据需要加载内容，对于<strong>大型文件具有较高的效率</strong>。常用于查看<strong>日志文件</strong>。</p><p>​    快捷键</p><table><thead><tr><th align="center">快捷键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>space</code></td><td align="center">向下翻一页</td></tr><tr><td align="center"><code>pageDown</code></td><td align="center">向下翻一页</td></tr><tr><td align="center"><code>pageUp</code></td><td align="center">向上翻一页</td></tr><tr><td align="center"><code>/字符</code></td><td align="center">向下搜索，n：向下查找  N:向上查找</td></tr><tr><td align="center"><code>?字符</code></td><td align="center">向上搜索，n：向上查找 N：向下查找</td></tr></tbody></table><p><code>&gt;</code> 和 <code>&gt;&gt;</code> ：输出重定向和追加 </p><p><code>&gt;</code>输出重定向：将原来的文件覆盖</p><p><code>&gt;&gt;</code>追加：不会覆盖原来文件的内容，而是追加到文件的尾部。</p><p><code>ls -l &gt; a.txt</code>：将目前文件夹的内容覆盖写入到a.txt，若a.txt不存在，创建a.txt</p><p><code>ls -l &gt;&gt; a.txt</code>：追加到a.txt</p><p><code>cat a &gt;&gt; a.txt</code></p><p><code>echo &quot;hello world &gt;&gt; a.txt&quot;</code>：将hello world追加到a.txt后面</p><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><p><code>date</code></p><p><code>date &quot;+%Y-%m-%d&quot;</code></p><p><code>date  &quot;+%Y年%m月%d日&quot;</code></p><p>设置日期</p><p><code>date -s &quot;字符时间&quot;</code></p><p>查看日历时间</p><p><code>cal</code></p><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><p><code>find [搜索范围][选项]</code></p><p><code>find 目录 -name 文件名</code>：查找指定目录下指定文件</p><p><code>find 目录 -size +20M</code>：查找指定目录下大于20M的文件</p><p><code>locate</code> 可以快速定位文件路径，利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件。locate指令无需遍历整个文件系统，查询速度较快，为保证查询结果准确，管理员必须定期更新locate时刻。</p><p>​    <code>locate 搜索文件</code></p><p>​    locate基于数据库进行查询，第一次运行前，必须使用updatedb指令创建locate数据库。</p><p><strong>grep指令和管道符号</strong></p><p>​    <code>grep</code>过滤查找，管道符号<code>|</code>表示前一个命令的处理结果输出传递给后面的命令处理</p><p>​    <code>grep [选项]查找内容 源文件</code></p><p>​        -n：显示匹配行及行号</p><p>​        -i：忽略字母大小写</p><p>zip和unzip    压缩和解压缩 </p><p>​    -r：递归压缩</p><p><strong><code>tar</code>打包指令</strong>，最后打包的文件时.tar.gz文件</p><p>​    -c：产生.tar打包文件</p><p>​    -v：显示详细信息</p><p>​    -f：指定压缩后的文件名</p><p>​    -z：打包同时压缩</p><p>​    -x：解包.tar文件</p><p><code>tar -zcvf 结果文件 打包文件名/目录</code></p><p><code>tar -zxvf 解压文件 -C 指定目录</code> 解压文件到指定目录</p><h2 id="组管理和权限管理"><a href="#组管理和权限管理" class="headerlink" title="组管理和权限管理"></a>组管理和权限管理</h2><p>文件：所有者、所在组，其他组</p><p>文件/目录所有者一般为文件的创建者</p><p>​    查看文件所有组</p><p>​        <code>ls -ahl</code>：a–all 、  h—human 、 l–list </p><p>​    改变文件所有者</p><p>​        <code>chown 所有者 文件名</code>    并没有改变文件的所在组</p><p>​    组的创建</p><p>​        <code>groupadd 组名</code></p><p>​    修改文件所在组</p><p>​        <code>chgrp 组名 文件名</code></p><p>​    改变用户所在组</p><p>​        <code>usermod -g 组名 用户名</code></p><p>​        ·</p><p>权限管理</p><p>​        </p><table><thead><tr><th align="center">文件类型</th><th align="center">具体</th></tr></thead><tbody><tr><td align="center"><code>-</code></td><td align="center">普通文件</td></tr><tr><td align="center"><code>d</code></td><td align="center">目录</td></tr><tr><td align="center"><code>l</code></td><td align="center">软链接</td></tr><tr><td align="center"><code>c</code></td><td align="center">字符设备</td></tr></tbody></table><p>前三个文件<strong>所有者</strong>权限、中间三个文件<strong>所在组</strong>权限、最后三个<strong>其他组</strong>的权限</p><p><code>r</code>：可读 </p><p><code>w</code>：可写，不代表可删除，删除一个文件的前提条件是对该文件所在目录有写的权限</p><p><code>x</code>：可执行文件（execute）:可以进入该目录</p><p><code>数字</code>：文件表示硬链接数，如果是目录，表示该目录的子目录的个数</p><p><code>4096</code>：表示目录</p><h2 id="chmod：修改文件或者目录的权限。"><a href="#chmod：修改文件或者目录的权限。" class="headerlink" title="chmod：修改文件或者目录的权限。"></a><code>chmod</code>：修改文件或者目录的权限。</h2><h3 id="第一种方式："><a href="#第一种方式：" class="headerlink" title="第一种方式："></a>第一种方式：</h3><p>​        <code>+-=</code>变更权限</p><p>​            u：所有者    o：其他人    a：所有人（a、g、o  的总和）</p><p>​            <code>chomd u = rwx,g=rx,o=x 文件目录名</code></p><p>​            <code>chomd o+w 文件目录名</code>    </p><p>​            <code>chmod a-x 文件目录名</code></p><p>​        演示：</p><p>​            1）给abc文件的所有者读写执行的权限，给所在组读和执行的权限，其他组读和执行的权限</p><p>​                    <code>chmod u=rwx,g=rx,o=rx abc</code></p><p>​            2）给abc文件的所有者除去执行权限，增加读写的权限</p><p>​                    <code>chmod u-x+rw abc</code></p><p>​            3）给abc文件的所有用户添加读的权限         </p><p>​                    <code>chmod o+r abc</code></p><h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><p>​            通过数字变更权限</p><p>​            <code>r = 4 ,w = 2 ,x = 1</code></p><p>​            <code>chmod u=rwx,g=rw,o=x 文件目录名</code>相当于<code>chmod 751 文件目录名</code></p><p>​            案例：将/home/abc.txt文件的权限修改为 rwxr-xr-x</p><p>​                    <code>chmod 755 /home/abc.txt</code></p><h2 id="修改文件所有者-chown"><a href="#修改文件所有者-chown" class="headerlink" title="修改文件所有者-chown"></a>修改文件所有者-chown</h2><p>​    <code>chown newowner file</code></p><p>​    <code>chown newowner:newgroupowner file</code></p><p>​    <code>-R</code>  如果是目录，则使其下所有子文件或目录递归生效</p><p>​    案例：</p><p>​        1）将/home/abc.txt文件的所有者改为tom</p><p>​            <code>chown tom  /home/abc.txt</code></p><p>​        2）将/home/kkk目录下所有文件和目录都修改为tom</p><p>​            <code>chown -R  tom  kkk/</code></p><h2 id="修改文件所在组-chgrp"><a href="#修改文件所在组-chgrp" class="headerlink" title="修改文件所在组-chgrp"></a>修改文件所在组-chgrp</h2><p>​    <code>chgrp newgroup file 改变文件的所有组</code></p><p>​    案例：</p><p>​        1）将/home/abc.txt文件的所在组改为shaolin</p><p>​            <code>chgrp shaolin /home/abc.txt</code></p><p>​        2）将/home/kkk目录下所有文件和目录的所在组都修改为shaolin         </p><p>​            <code>chgrp -R shaolin /home/kkk</code></p><h2 id="定时任务调度"><a href="#定时任务调度" class="headerlink" title="定时任务调度"></a>定时任务调度</h2><p>定时的调度我们的脚本或者代码—》机制crontab，定时调用 脚本/代码，完成某项任务，比如备份mysql数据</p><p>​    如果是简单的任务，可以不写脚本，对于比较复杂的任务，需要写脚本（Shell）完成。</p><p>​    任务调度：是指系统在某个时间执行的特定的命令或程序。</p><p>​    任务调度分类：</p><p>​        1、系统工作：有些重要的工作必须周而复始的执行，如病毒扫描等</p><p>​        2、个别用户工作：个别用户可能希望执行某些程序，比如对数据库的备份</p><p>​    </p><p>​    <code>crontab</code>：</p><p>​        <code>-e</code>：编辑crontab定时任务</p><p>​        <code>-l</code>：查询crontab任务</p><p>​        <code>-r</code>：删除当前用户的所有crontab任务</p><p>​    <code>*/1 * * * * ls -l /etc &gt;&gt; /tmp/to.txt</code>每分钟将/etc下文件名写入to.txt</p><h3 id="任务调度的几个应用实例"><a href="#任务调度的几个应用实例" class="headerlink" title="任务调度的几个应用实例"></a>任务调度的几个应用实例</h3><p>1、每隔一分钟，将当前的日期信息，追加到/tmp/mydate 文件中</p><p>​        先写一个脚本<code>date &gt;&gt; /tmp/mydate</code>，给脚本权限，<code>crontab -e</code> ,写入<code>*/1 * * * * /home/mytask1.sh</code></p><p>2、每隔一分钟，将当前日期和日历都追加到/tmp/mycal文件中</p><p>3、每天凌晨2：00，将mysql数据库testdb,备份到文件中</p><h2 id="linux磁盘分区和挂载"><a href="#linux磁盘分区和挂载" class="headerlink" title="linux磁盘分区和挂载"></a>linux磁盘分区和挂载</h2><h3 id="分区基础知识"><a href="#分区基础知识" class="headerlink" title="分区基础知识"></a>分区基础知识</h3><p>1、mbr分区</p><p>​        1）最多支持四个主分区</p><p>​        2）系统只能安装在主分区</p><p>​        3）扩展分区要占一个主分区</p><p>​        4）mbr最大只能支持2TB，但拥有最好的兼容性</p><p>2、gtp分区</p><p>​        1）支持无限多个主分区（但操作系统可能限制，比如windows下最多128个分区）</p><p>​        2）最大支持18EB的大容量（1EB=1024PB，1PB=1024TB）</p><p>​        3）windows7 64位以后支持gtp        </p><h3 id="linux分区"><a href="#linux分区" class="headerlink" title="linux分区"></a>linux分区</h3><p>原理介绍：</p><p>​    Linux无论有几个分区，分给哪一目录使用，它归根到底就只有一个根目录，一个独立且唯一的文件结构，Linux中每个分区都是用来组成整个文件系统的一部分。</p><p>​    Linux采用了一种叫“载入”的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来，这时要载入的一个分区将使它的存储空间在一个目录下获得。mount挂载，unmount卸载</p><p>​    linux硬盘分为IDE硬盘和SCSI硬盘，目前基本上都是SCSI硬盘。</p><p>​    对于IDE硬盘，驱动器标识符为“hdx”，其中，“hd”表明分区所在设备的类型，这里是指IDE硬盘了，“x”为盘号（a为基本盘，b为基本从属盘，c为辅助主盘，d为辅助从属盘），“~”代表分区，前四个分区用数字1-4表示，他们是主分区或者扩展分区，从5开始就是逻辑分区，例，hda3表示为第一个IDE硬盘上的第三个主分区或者扩展分区，hdb2表示为第二个IDE硬盘上的第二个主分区或扩展分区。</p><p>​    对于SCSI硬盘则标识为“sdx”，SCSI硬盘是用“sd”来表示分区所在设备的类型的，其余则和IDE硬盘的表示方法一样。</p><p><img src="/2021/01/18/CentOS/1615378123021.png" alt="1615378123021"></p><p><code>lsblk -f</code> 查看系统的分区和挂载的情况。</p><p><code>lsblk</code>  可以看到硬盘的大小。</p><p>vda2   vda1  表示分区情况。</p><p>ext4    vfat表示分区类型，后面的为唯一标识分区的40位不重复的字符串。</p><p>boot/efi   为挂载点（文件系统）。</p><h2 id="磁盘情况查询"><a href="#磁盘情况查询" class="headerlink" title="磁盘情况查询"></a>磁盘情况查询</h2><p><code>df -lh</code>：查询系统整体的磁盘使用情况。</p><p><img src="/2021/01/18/CentOS/1615379069514.png" alt="1615379069514"></p><p><code>du -h /目录</code>：查询指定目录的磁盘占用情况，默认为当前目录。</p><p>​    <code>-s</code>：指定目录占用大小汇总</p><p>​    <code>-h</code>：带计量单位</p><p>​    <code>-a</code>：含文件</p><p>​    <code>--max-depth=1</code>：子目录深度</p><p>​    <code>-c</code>：列出明细的同时，增加汇总值</p><p><strong>实例</strong></p><p>​    1）统计/home 文件夹下文件的个数</p><p>​            <code>ls -l /home | grep &quot;^-&quot; | wc -l</code></p><p>​            先列举，在过滤，然后wc 统计</p><p>​    2）统计/home文件夹下目录的个数</p><p>​            <code>ls -l /home | grep &quot;^d&quot; | wc -l</code></p><p>​            将定位符^后的-改为d</p><p>​    3）统计/home文件夹下文件的个数，包括子文件夹里的</p><p>​            <code>ls -lR /home | grep &quot;^-&quot; | wc -l</code></p><p>​            多了-R</p><p>​    4）统计文件夹下目录的个数，包括子文件夹里的</p><p>​            <code>ls -lR /home | grep &quot;^d&quot; | wc -l</code></p><p>​    5）以树状结构显示目录结构</p><p>​            安装tree，然后使用</p><p>​            <code>yum install tree</code>              <code>tree  /home</code></p><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>在Linux中，每个执行的程序（代码）都称为一个进程。每个进程都分配一个ID号。</p><p>每个进程，都会对应一个父进程，而这个父进程可以复制多个子进程。例如WWW服务器。</p><p>每个进程都可能以两种方式存在。前台和后台，所谓前台进程就是用户目前的屏幕上可以进行操作的。后台进程则是实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式执行。</p><p>一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中。直到关机才会结束。</p><p><code>ps</code>    一般来说是-aux，</p><p>​        -a显示当前终端的所有进程信息 。</p><p>​        -u以用户的格式显示进程信息。</p><p>​        -x    显示后台进程运行的参数。    </p><p><img src="/2021/01/18/CentOS/1615454625973.png" alt="1615454625973"></p><table><thead><tr><th align="center">标题</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">%MEM</td><td align="center">占用物理内存百分比</td></tr><tr><td align="center">VSZ</td><td align="center">进程占用的虚拟内存的大小</td></tr><tr><td align="center">RSS</td><td align="center">进程占用的物理内存大小</td></tr><tr><td align="center">TT</td><td align="center">终端名称</td></tr><tr><td align="center">STAT</td><td align="center">进程状态：S-睡眠，s-表示该进程是会话的先导进程，N-表示进程拥有比普通优先级更低的优先级，R-正在运行，D-短期等待，Z-僵死进程，T-被跟踪或者被停止</td></tr><tr><td align="center">STARTED</td><td align="center">进程的启动时间</td></tr><tr><td align="center">TIME</td><td align="center">CPU时间，即进程使用CPU的总时间</td></tr><tr><td align="center">COMMAND</td><td align="center">启动进程所用的命令和参数，过长会被截断显示</td></tr></tbody></table><p><code>ps -aux | grep xxx</code>    查看指定的进程</p><p><code>ps -ef</code> 以全格式显示当前所有的进程，查看进程的父进程。</p><p>​    -e查看所有进程，-f 全格式</p><p><img src="/2021/01/18/CentOS/1615456098238.png" alt="1615456098238"></p><table><thead><tr><th align="center">标题</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">PID</td><td align="center">进程</td></tr><tr><td align="center">PPID</td><td align="center">父进程</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h3><p><code>kill</code> 和 <code>killall</code></p><p><code>kill 【选项】 进程号</code>：通过进程号杀死进程</p><p><code>kill all 进程名称</code>：通过进程名杀死进程，支持通配符</p><p><code>-9</code> 强迫进程立即停止</p><p>案例：</p><p>​    1）踢掉非法用户</p><p>​        先查找到非法用户的PID<code>ps -aux | grep sshd</code></p><p>​        再kill掉进程    <code>kill xxx</code></p><p>​    2）终止远程登陆服务sshd</p><p>​    3）终止多个gedit编辑器（killall,通过进程名来终止进程）</p><p>​        <code>killall gedit</code></p><p>​    4）强制杀掉一个终端</p><p>​        <code>kill -9 xxxx</code></p><h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><p>服务（service）本质是一个进程，但是运行在后台，通常监听某个端口，等待其他程序的请求，比如mysql、sshd、防护墙等。因此我们又称为守护进程。</p><p><img src="/2021/01/18/CentOS/1615520427929.png" alt="1615520427929"></p><p>service管理指令</p><p><code>service 服务名 start | stop | restart | reload | status</code></p><p>CentOS7.0后用systemctl</p><p><code>systemctl</code></p><p>案例:</p><p>​        查看当前防火墙状况，关闭防火墙和重启防火墙。</p><p>​            <code>systemctl stauts iptables</code> 查看防火墙状态</p><p>​            <code>systemctl stop iptables</code></p><p>​            <code>systemctl start iptables</code></p><p>细节：</p><p>​        1）关闭或启用防火墙后，立即生效。【talnet 测试某个端口即可】</p><p>​        2）这种方式只是临时生效，当重启系统后，还是回归以前对服务的设置。</p><p>​        3）如果希望设置某个服务自启动或关闭永久生效，要使用<code>chkconfig</code>指令</p><h3 id="动态监控进程"><a href="#动态监控进程" class="headerlink" title="动态监控进程"></a>动态监控进程</h3><p>​        top和ps相似，军用来显示正在执行的进程。top和ps最大的不同之处，在于top在执行一段时间可以更新正在运行的进程</p><p>​        <code>top</code></p><p>​        -d</p><p>​        -i</p><p>​        -p</p><p>​        交互操作</p><p>​            P：按CPU使用率排序（默认）</p><p>​            M：内存使用率        </p><p>​            N：PID</p><p>​            q：退出</p><p>案例：</p><p>​    1)监视特定用户</p><p>​            top，输入u，输入指定的用户名</p><p>​    2)指定系统状态更新的时间（每隔十秒更新）</p><p>​            <code>top -d 10</code></p><p>​    </p><h3 id="监控网络服务"><a href="#监控网络服务" class="headerlink" title="监控网络服务"></a>监控网络服务</h3><p>​        <code>netstat -anp</code></p><p>​            -an 按一定顺序输出。</p><p>​            -p显示那个进程在调用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h2 id=&quot;vim快捷键&quot;&gt;&lt;a href=&quot;#vim快捷键&quot; class=&quot;headerlink&quot; title=&quot;vim快捷键&quot;&gt;&lt;/a&gt;vim快捷键&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center
      
    
    </summary>
    
    
      <category term="笔记" scheme="https://FWj1635387072.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="CentOs" scheme="https://FWj1635387072.github.io/tags/CentOs/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记1</title>
    <link href="https://FWj1635387072.github.io/2021/01/12/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%901/"/>
    <id>https://FWj1635387072.github.io/2021/01/12/Python数据分析1/</id>
    <published>2021-01-12T08:15:50.541Z</published>
    <updated>2021-01-12T12:30:33.398Z</updated>
    
    <content type="html"><![CDATA[<p>​    《使用Python进行数据分析》中的点。</p><a id="more"></a><p><code>tuple()</code>将任意序列或迭代器转换为元组。</p><p>元组内容长度不可变，常用的方法 <code>count(value)</code>  统计元组中包含多少个value</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">tuple([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">输出</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">tuple(<span class="string">'String'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">输出</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">(<span class="string">'S'</span>, <span class="string">'t'</span>, <span class="string">'r'</span>, <span class="string">'i'</span>, <span class="string">'n'</span>, <span class="string">'g'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = tuple(<span class="string">'stringing'</span>)</span><br><span class="line">a.count(<span class="string">'i'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">输出，count</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p><code>list()</code>  与元组类似，得到列表对象，列表长度和内容可以修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">A = (<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>)</span><br><span class="line">map1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> i ,v <span class="keyword">in</span> enumerate(A):</span><br><span class="line">     map1[i] = v;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">map1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">输出</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">&#123;<span class="number">0</span>: <span class="string">'one'</span>, <span class="number">1</span>: <span class="string">'two'</span>, <span class="number">2</span>: <span class="string">'three'</span>&#125;</span><br></pre></td></tr></table></figure><p><code>zip()</code></p><p>将元组，列表和其他序列的元素配对，形成新的列表，也可用于解包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">seq1 = [<span class="string">'f1'</span>,<span class="string">'f2'</span>,<span class="string">'f3'</span>]</span><br><span class="line">seq2 = [<span class="string">'l1'</span>,<span class="string">'l2'</span>,<span class="string">'l3'</span>]</span><br><span class="line">name = zip(seq1,seq2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name</span><br><span class="line">&lt;zip object at <span class="number">0x0000018E38297880</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list(name)</span><br><span class="line">[(<span class="string">'f1'</span>, <span class="string">'l1'</span>), (<span class="string">'f2'</span>, <span class="string">'l2'</span>), (<span class="string">'f3'</span>, <span class="string">'l3'</span>)]</span><br><span class="line"></span><br><span class="line">first_name,last_name = zip(*name)</span><br><span class="line">first_name</span><br><span class="line">(<span class="string">'f1'</span>, <span class="string">'f2'</span>, <span class="string">'f3'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">last_name</span><br><span class="line">(<span class="string">'l1'</span>, <span class="string">'l2'</span>, <span class="string">'l3'</span>)</span><br></pre></td></tr></table></figure><p><code>dict()</code></p><p>生成字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mapping = &#123;&#125;</span><br><span class="line">mapping = dict(zip(range(<span class="number">5</span>),reversed(range(<span class="number">5</span>))))</span><br><span class="line">mapping</span><br><span class="line">&#123;<span class="number">0</span>: <span class="number">4</span>, <span class="number">1</span>: <span class="number">3</span>, <span class="number">2</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><p><code>set()</code></p><p>生成集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set1 = set([<span class="number">2</span>,<span class="number">32</span>,<span class="number">42</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">312</span>,<span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line">set1</span><br><span class="line">&#123;<span class="number">32</span>, <span class="number">2</span>, <span class="number">312</span>, <span class="number">42</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">b = &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;</span><br><span class="line">a.union(b)</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line"></span><br><span class="line">a|b</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line"></span><br><span class="line">a.intersection(b)</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">a &amp; b</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><p><code>列表集合推导式</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">strings = [<span class="string">'a'</span>,<span class="string">'AS'</span>,<span class="string">'bat'</span>,<span class="string">'car'</span>,<span class="string">'dove'</span>,<span class="string">'python'</span>]</span><br><span class="line">[x.lower() <span class="keyword">for</span> x <span class="keyword">in</span> strings <span class="keyword">if</span> <span class="string">'a'</span> <span class="keyword">in</span> x <span class="keyword">or</span> <span class="string">'A'</span> <span class="keyword">in</span> x]</span><br><span class="line"></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'as'</span>, <span class="string">'bat'</span>, <span class="string">'car'</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    《使用Python进行数据分析》中的点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="https://FWj1635387072.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="https://FWj1635387072.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Untitled</title>
    <link href="https://FWj1635387072.github.io/2020/12/26/Untitled/"/>
    <id>https://FWj1635387072.github.io/2020/12/26/Untitled/</id>
    <published>2020-12-26T10:39:02.688Z</published>
    <updated>2020-12-26T10:39:05.964Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> statsmodels <span class="keyword">as</span> sm</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring_04</title>
    <link href="https://FWj1635387072.github.io/2020/12/16/Spring_04/"/>
    <id>https://FWj1635387072.github.io/2020/12/16/Spring_04/</id>
    <published>2020-12-16T11:50:32.835Z</published>
    <updated>2020-12-31T12:17:40.848Z</updated>
    
    <content type="html"><![CDATA[<p>​    Spring学习04</p><a id="more"></a><h1 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h1><p>手动装配：以value或ref的方式明确指定属性值是手动装配</p><p>自动装配：根据指定的装配规则，不需要明确指定，Spring自动将匹配的属性注入bean中</p><h2 id="装配模式"><a href="#装配模式" class="headerlink" title="装配模式"></a>装配模式</h2><p>1、根据类型自动装配：</p><p>​        与IOC容器bean的class进行匹配，唯一配置则装配，否则抛异常</p><p>2、根据名称自动装配：</p><p>​        使用bean的属性名与IOC容器中bean的ID值进行匹配，成功则装配，否则null</p><p>​    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Person</span></span><br><span class="line"><span class="comment">自动装配:只能装配对象</span></span><br><span class="line"><span class="comment">1、byName：使用bean的属性名与IOC容器中bean的ID值进行匹配，成功则装配，否则null</span></span><br><span class="line"><span class="comment">2、byType：与IOC容器bean的class进行匹配，唯一配置则装配，否则抛异常</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.autowire.Person"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"tom"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="通过注解进行装配bean"><a href="#通过注解进行装配bean" class="headerlink" title="通过注解进行装配bean"></a>通过注解进行装配bean</h1><p>使用注解进行装配更加简洁，与MVC组件化开发理念契合，常用。</p><ol><li><p>普通组件：@Component</p><p> ​    标识一个受Spring IOC容器管理的组件。</p></li><li><p>持久化层组件：@Repository</p><p> ​    标识一个受Spring IOC容器管理的持久化层组件。</p></li><li><p>业务逻辑层组件：@Service</p><p> ​    标识一个受Spring IOC容器管理的业务逻辑层组件。</p></li><li><p>表述层组件：@Controller</p><p> ​    标识一个受Spring IOC容器管理的表述层组件。</p></li><li><p>组件命名规则</p></li></ol><pre><code>导入`jar包 `     aop<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注解作用，相当于在配置文件中：</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * &lt;bean id="userController" class="com.Controller.UserController"&gt;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> FWJ</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com"</span> &gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="指定扫描和排除扫描"><a href="#指定扫描和排除扫描" class="headerlink" title="指定扫描和排除扫描"></a>指定扫描和排除扫描</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 指定扫描 --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 1 --&gt;</span><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 2 --&gt;</span><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"assignable"</span> <span class="attr">expression</span>=<span class="string">"com.Controller.UserController"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com"</span> <span class="attr">use-default-filters</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 排除扫描 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">""</span>/&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>组件装配</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    Spring学习04&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://FWj1635387072.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="学习" scheme="https://FWj1635387072.github.io/categories/%E6%A1%86%E6%9E%B6/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring" scheme="https://FWj1635387072.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring_03</title>
    <link href="https://FWj1635387072.github.io/2020/12/13/Spring_03/"/>
    <id>https://FWj1635387072.github.io/2020/12/13/Spring_03/</id>
    <published>2020-12-13T12:32:01.430Z</published>
    <updated>2020-12-16T11:49:06.617Z</updated>
    
    <content type="html"><![CDATA[<p>​        Spring学习03</p><a id="more"></a><h2 id="依赖注入List和数组"><a href="#依赖注入List和数组" class="headerlink" title="依赖注入List和数组"></a>依赖注入List和数组</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--list集合  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--array 和 set 同理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"personList"</span> <span class="attr">class</span> = <span class="string">"com.test.DI.PersonList"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Tom"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"cars"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 构造集合 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ref引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car1"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 内部bean --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;bean&gt;&lt;/bean&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ClassPathXmlApplicationContext clt = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-di.xml"</span>);</span><br><span class="line">List bean = clt.getBean(<span class="string">"personList"</span>, List<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- map --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">""</span>  <span class="attr">value-ref</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="定义集合bean"><a href="#定义集合bean" class="headerlink" title="定义集合bean"></a>定义集合bean</h2><p>首先设置eclipse，namespace中勾选util</p><p><img src="/2020/12/13/Spring_03/1607863838402.png" alt="1607863838402"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义集合bean,可引用多次--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span> = <span class="string">"listbean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h2><p>Spring中有两种类型的bean，一种为普通bean，另一种是工厂bean，即FactoryBean</p><p>工厂bean跟普通bean不同，其返回的对象不是一个指定的实例，返回的是该工厂bean的getObject方法返回的对象</p><p>工厂bean要实现org.springframework.beans.factory.FactoryBean接口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过FactoryBean 来配置bean</span></span><br><span class="line"><span class="comment">具体返回的对象为getObject()返回的bean</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span> = <span class="string">"com.test.factorybean.CarFactoryBean"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.factorybean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.DI.Car;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Car</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂bean具体创建的bean对象是由getObject()方法获得的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Car <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Car(<span class="string">"五菱宏光"</span>, <span class="string">"五菱"</span>, <span class="number">50000.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回具体的bean对象类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line"><span class="keyword">return</span> Car<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bean可以是单例的，也可以是原型的（非单例）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.factorybean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.DI.Car;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFactory</span> </span>&#123;</span><br><span class="line">ApplicationContext ac;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-factorybean.xml"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCarFac</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Car bean = ac.getBean(<span class="string">"car"</span>, Car<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(bean);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bean的继承关系"><a href="#bean的继承关系" class="headerlink" title="bean的继承关系"></a>bean的继承关系</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- bean的继承关系</span></span><br><span class="line"><span class="comment">parent=""父类</span></span><br><span class="line"><span class="comment">abstract="true"抽象bean，不能创建对象，class属性可以不配置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">继承可以从父bean中继承一些配置，但是id、abstract、autowire不能被继承</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"address1"</span> <span class="attr">class</span> = <span class="string">"com.test.relation.Address"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">value</span>=<span class="string">"Beijing"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"street"</span> <span class="attr">value</span>=<span class="string">"ChangAnJie"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"address2"</span> <span class="attr">class</span> = <span class="string">"com.test.relation.Address"</span> <span class="attr">parent</span>=<span class="string">"address1"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name="city" value="Beijing"&gt;&lt;/property&gt;  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"street"</span> <span class="attr">value</span>=<span class="string">"WuDaoKou"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.relation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRelation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExtends</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ClassPathXmlApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-relation.xml"</span>);</span><br><span class="line">Address c1 = ctx.getBean(<span class="string">"address1"</span>, Address<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(c1);</span><br><span class="line">Address c2 = ctx.getBean(<span class="string">"address2"</span>, Address<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(c2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h2><p>​    在Spring中，可以在<bean>元素的scope属性中设置bean的作用域，以决定这个bean是单例的还是多实例的。</bean></p><p>​    默认情况下，Spring只为每个在IOC容器中声明的bean创建唯一一个实例，这个IOC容器范围内都能享受该实例：后续所有的getBean()调用和bean引用都将返回这个唯一的bean实例。该作用域被称为singleton，它是所有bean的默认作用域。</p><p>​    当bean的作用域为单例时，Spring会在容器对象创建时就创建bean的对象实例，而当bean的作用域为prototype时，IOC容器在获取实例时创建bean的实例对象。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">bean的作用域：</span></span><br><span class="line"><span class="comment">singleton：单例（默认）,在整个IOC容器中只能存在一个Bean对象，</span></span><br><span class="line"><span class="comment">而且在创建IOC容器时已经创建，后续获得的均为同一个bean</span></span><br><span class="line"><span class="comment">prototype: 原型/多例的，scope属性，每次获得对象时创建。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.scope.Car"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brand"</span> <span class="attr">value</span>=<span class="string">"宝马"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"10000.0"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car1"</span> <span class="attr">class</span>=<span class="string">"com.scope.Car"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brand"</span> <span class="attr">value</span>=<span class="string">"宝马"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"10000.0"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h2><p>SpringIOC容器可以管理bean的生命周期，Spring允许在bean的生命周期内特定的时间节点执行指定的任务。</p><p>SpringIOC容器对bean的生命周期进行管理的过程：</p><p>​    1、通过构造器或工厂方法创建bean实例（调用构造器）</p><p>​    2、为bean的属性设置值和对其他bean的引用（调用set方法）</p><p>​    3、调用bean的初始化方法</p><p>​    4、bean可以使用</p><p>​    5、容器关闭时，调用bean的销毁方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.leftcycle.Car"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destory"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brand"</span> <span class="attr">value</span>=<span class="string">"宝马"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"100000.0"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leftcycle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String brand;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"1、调用构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 通过init-method来指定初始化方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"3、调用初始化方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 销毁方法：IOC容器关闭，bean对象被销毁</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"5、销毁"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> brand;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"2、调用set方法"</span>);</span><br><span class="line"><span class="keyword">this</span>.brand = brand;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Car [brand="</span> + brand + <span class="string">", price="</span> + price + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leftcycle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">testCircle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ConfigurableApplicationContext al = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-leftcycle.xml"</span>);</span><br><span class="line">Car car = al.getBean(<span class="string">"car"</span>, Car<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(<span class="string">"4、使用"</span> + car);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭容器</span></span><br><span class="line">al.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bean的后置处理器"><a href="#bean的后置处理器" class="headerlink" title="bean的后置处理器"></a>bean的后置处理器</h3><p>​    1、bean的后置处理器允许在调用初始化方法前后对bean进行额外的处理</p><p>​    2、bean后置处理器对IOC容器里的所有bean实例逐一处理，而非单一实例。其典型应用是：检查bean属性的正确性或根据特定的标准更改bean的属性。</p><p>​    3、bean后置处理器需要实现接口：</p><p>​            <code>org.springframework.beans.factory.config.BeanPostProcessor。</code></p><p>​            在初始化方法被调用前后，Spring将把每个bean实例分别传递给上述接口的一下两个方法</p><p>​        postProcessBeforeInitialization(Object, String)</p><p>​        postProcessAfterInitialization(Object, String)</p><p>​    4、添加bean后置处理器后bean的生命周期</p><p>​            1、通过构造器或工厂方法创建bean实例</p><p>​            2、为bean的属性设置值和对其他bean的引用。</p><p>​            3、将bean的实例传递给bean后置处理器的postProcessBeforeInitialization()方法</p><p>​            4、调用bean的初始化方法</p><p>​            5、将bean实例传递给bean后置处理器的postProcessAfterInitialization()方法</p><p>​            6、bean的使用</p><p>​            7、当容器关闭时调用bean的销毁方法</p><h3 id="引用外部属性文件"><a href="#引用外部属性文件" class="headerlink" title="引用外部属性文件"></a>引用外部属性文件</h3><p>​    C3P0连接池的配置</p><p>​    直接配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 直接配置c3p0连接池 ComboPooledDataSource--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mysql"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span> <span class="attr">value</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    当bean的配置信息逐渐增多时，查找和修改一些bean的配置信息就会变得困难。这时可以将一部分信息提取到bean配置文件的外部，以properties格式的属性文件保存起来，同时在bean的配置文件中引用properties属性文件中的内容，从而实现一部分属性值在发生变化时仅修改properties属性文件即可。这种技术多用于连接数据库的基本信息的配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过引入外部的属性文件配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath*:db.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 推荐使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置C3P0连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"%&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"%&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"%&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"%&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​        Spring学习03&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://FWj1635387072.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="学习" scheme="https://FWj1635387072.github.io/categories/%E6%A1%86%E6%9E%B6/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring" scheme="https://FWj1635387072.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习02</title>
    <link href="https://FWj1635387072.github.io/2020/12/09/Spring_02/"/>
    <id>https://FWj1635387072.github.io/2020/12/09/Spring_02/</id>
    <published>2020-12-09T11:51:35.774Z</published>
    <updated>2020-12-09T14:35:09.944Z</updated>
    
    <content type="html"><![CDATA[<p>​    Spring学习02</p><a id="more"></a><h2 id="IOC容器在Spring中的实现"><a href="#IOC容器在Spring中的实现" class="headerlink" title="IOC容器在Spring中的实现"></a>IOC容器在Spring中的实现</h2><ol><li><p>在通过IOC容器读取Bean的实例前，需要将IOC容器本身实例化。</p></li><li><p>Spring提供了两种IOC容器的实现方法</p><pre><code>BeanFactory：IOC容器的基本实现，是Spring容器的内部实现，是Spring内部的基础设施，面向Spring本身，不是给开发人员使用的。</code></pre><p> ​    ApplicationContext：BeanFactory的子接口，提供了更多高级特性，面向Spring的使用者，几乎所有的场合都使用ApplicationContext，而不是使用BeanFactory。<img src="/2020/12/09/Spring_02/1607515291242.png" alt="1607515291242"></p></li><li><p>Navigator：查看类路径(ClassPathXmlApplicationContext使用类路径）</p></li></ol><p><img src="/2020/12/09/Spring_02/1607515399990.png" alt="1607515399990"></p><p><img src="/2020/12/09/Spring_02/1607515419791.png" alt="1607515419791"></p><p>close()、refresh() 方法是在ConfigurableApplicationContext容器中的方法。（后面会用到）</p><h2 id="获取bean对象"><a href="#获取bean对象" class="headerlink" title="获取bean对象"></a>获取bean对象</h2><p><img src="/2020/12/09/Spring_02/1607515779141.png" alt="1607515779141"></p><p>getBean() 重载的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.HelloWorld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取到Person对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、创建Spring的IOC容器对象</span></span><br><span class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、获取Person对象</span></span><br><span class="line"><span class="comment">// (1)、通过id获取对象</span></span><br><span class="line"><span class="comment">// Person p = (Person) ctx.getBean("person");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (2)、通过对象类型获取对象</span></span><br><span class="line"><span class="comment">// 第二种方法，如果在xml文件中有两个不同value的同类型对象，会出错</span></span><br><span class="line"><span class="comment">// Person p = ctx.getBean(Person.class);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (3)、通过id和类型获取对象(避免了配置中相同类型对象和强制转换)</span></span><br><span class="line">Person p = ctx.getBean(<span class="string">"person"</span>, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">p.sayHello();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="依赖注入的方法（DI依赖注入）"><a href="#依赖注入的方法（DI依赖注入）" class="headerlink" title="依赖注入的方法（DI依赖注入）"></a>依赖注入的方法（DI依赖注入）</h2><h3 id="通过bean的setXxx-方法赋值"><a href="#通过bean的setXxx-方法赋值" class="headerlink" title="通过bean的setXxx()方法赋值"></a>通过bean的setXxx()方法赋值</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置bean</span></span><br><span class="line"><span class="comment">  配置方式：基于XML的方式，使用的全类名的方式</span></span><br><span class="line"><span class="comment"> &lt;bean&gt;：受Spring管理的JavaBean对象</span></span><br><span class="line"><span class="comment"> id：&lt;bean&gt;的唯一标识，在整个IOC容器中唯一、不重复</span></span><br><span class="line"><span class="comment"> class:指定JavaBean的全类名。目的：通过反射创建对象。</span></span><br><span class="line"><span class="comment"> Class cls = Class.forName("com.test.HelloWorld.Person");</span></span><br><span class="line"><span class="comment"> Object obj = cls.newInstance();  必须提供无参数的构造器 </span></span><br><span class="line"><span class="comment"> &lt;property&gt;：给对象的属性赋值</span></span><br><span class="line"><span class="comment"> name：指定属性名，指定set风格的属性名。</span></span><br><span class="line"><span class="comment"> value：指定属性值。赋值时调用的是set（）方法</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.test.HelloWorld.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"HanMeiMei"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person1"</span> <span class="attr">class</span>=<span class="string">"com.test.HelloWorld.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"lilei"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DI依赖注入的方式：set方法注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.test.DI.Car"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brand"</span> <span class="attr">value</span>=<span class="string">"奥迪"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"crop"</span> <span class="attr">value</span>=<span class="string">"一汽"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"400000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通过bean的构造器赋值"><a href="#通过bean的构造器赋值" class="headerlink" title="通过bean的构造器赋值"></a>通过bean的构造器赋值</h3><p>​    Spring默认将xml中所有对象进行实例化。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DI依赖注入的方式：构造器方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car1"</span> <span class="attr">class</span> = <span class="string">"com.test.DI.Car"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span> =<span class="string">"宝马"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"华晨"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"450000"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    index指定参数的位置，type指定参数类型（多个构造参数重载）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DI依赖注入的方式：构造器方式</span></span><br><span class="line"><span class="comment">index指定参数位置 </span></span><br><span class="line"><span class="comment">type指定参数类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car2"</span> <span class="attr">class</span> = <span class="string">"com.test.DI.Car"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span> =<span class="string">"宝马"</span> <span class="attr">index</span> =<span class="string">"0"</span> &gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"450000"</span> <span class="attr">index</span> =<span class="string">"2"</span> <span class="attr">type</span>=<span class="string">"java.lang.Double"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"华晨"</span> <span class="attr">index</span> =<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="p名称空间"><a href="#p名称空间" class="headerlink" title="p名称空间"></a>p名称空间</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用p命名空间的语法配置bean :使用的是set方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car3"</span> <span class="attr">class</span> =<span class="string">"com.test.DI.Car"</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">p:brand</span>=<span class="string">"福特"</span> <span class="attr">p:crop</span>=<span class="string">"长安"</span> <span class="attr">p:price</span>=<span class="string">"100000"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 字面量</span></span><br><span class="line"><span class="comment">特殊字符：</span></span><br><span class="line"><span class="comment">1、使用实体    &amp;nbsp;空格</span></span><br><span class="line"><span class="comment">&amp;：&amp;amp</span></span><br><span class="line"><span class="comment">&lt;: &amp;lt</span></span><br><span class="line"><span class="comment">&gt;: &amp;gt</span></span><br><span class="line"><span class="comment">": &amp;quot</span></span><br><span class="line"><span class="comment">2、&lt;![CDATA[ 任意字符 ]]&gt;此时必须使用&lt;value&gt;&lt;/value&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">"car4"</span> <span class="attr">class</span>=<span class="string">"com.test.DI.Car"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brand"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>奥迪11&lt;![CDATA[&amp;&amp;&gt;&gt;&lt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"crop"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>一汽<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>400000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>给内部bean赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.test.DI.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span><br><span class="line">                ...</span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用其他的Bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引用其他的Bean</span></span><br><span class="line"><span class="comment">ref :reference</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">"person"</span> <span class="attr">class</span> =<span class="string">"com.test.DI.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"101"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"aaa"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">ref</span>=<span class="string">"car"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>空置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"bookName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    Spring学习02&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://FWj1635387072.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="学习" scheme="https://FWj1635387072.github.io/categories/%E6%A1%86%E6%9E%B6/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring" scheme="https://FWj1635387072.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习01</title>
    <link href="https://FWj1635387072.github.io/2020/12/07/Spring_01/"/>
    <id>https://FWj1635387072.github.io/2020/12/07/Spring_01/</id>
    <published>2020-12-07T12:59:49.341Z</published>
    <updated>2020-12-07T15:05:46.819Z</updated>
    
    <content type="html"><![CDATA[<p>​    Spring学习01。</p><a id="more"></a><h2 id="Spring框架概述"><a href="#Spring框架概述" class="headerlink" title="Spring框架概述"></a>Spring框架概述</h2><ol><li><p>开源框架。</p></li><li><p>为简化企业级（JavaEE）开发。</p></li><li><p>Spring是一个<strong>IOC</strong>（DI）和<strong>AOP</strong>容器框架。</p></li><li><p>Spring的优良特性</p><p>  <strong>非侵入式</strong>（<strong>轻量级</strong>）：基于Spring开发的应用中的对象可以不依赖于Spring的API</p><p> <strong>依赖注入</strong>：DI——Dependency Injection，反转控制（IOC）最经典的实现</p><p> <strong>面向切面编程</strong>：Aspect Oriented Programming ——AOP</p><p> <strong>容器</strong>：Spring是一个容器，因为它包含并且管理应用对象的生命周期</p><p> <strong>组件化</strong>（解耦）：Spring实现了使用简单的组件配置组合成一个复杂的应用。在Spring中可以使用XML和Java注解组合这些对象</p></li><li><p>一站式：在IOC和AOP基础上可以整合各种企业应用的开源框架和优秀的第三方类库（Spring本身也提供了表述层的SpringMVC和持久层的SpringJDBC）</p></li><li><p>Spring模块</p></li></ol><p><img src="/2020/12/07/Spring_01/1607347094519.png" alt="1607347094519"></p><h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><ol><li><p>导入jar包</p><ul><li>spring-bean-4.0.0.RELEASE.jar</li><li>spring-context-4.0.0.RELEASE.jar</li><li>spring-core-4.0.0.RELEASE.jar</li><li>spring-expression-4.0.0.RELEASE.jar</li><li>commons-logging-1.1.1.jar<img src="/2020/12/07/Spring_01/1607349617010.png" alt="1607349617010"></li></ul></li><li><p>在src下创建applicationContext.xml文件（新建Spring bean Configure File）</p></li><li><p>新建Person类</p></li><li><p>在applicationContext.xml文件中添加配置</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.test.HelloWorld.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"HanMeiMei"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>测试</p><ul><li><p>创建Spring的IOC容器对象</p></li><li><p>获取Person对象</p></li><li><p>调用方法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.HelloWorld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取到Person对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、创建Spring的IOC容器对象</span></span><br><span class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、获取Person对象</span></span><br><span class="line">Person p = (Person) ctx.getBean(<span class="string">"person"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、调用方法</span></span><br><span class="line">p.sayHello();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="xml中bean的配置"><a href="#xml中bean的配置" class="headerlink" title="xml中bean的配置"></a>xml中bean的配置</h3>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置bean</span></span><br><span class="line"><span class="comment">  配置方式：基于XML的方式，使用的全类名的方式</span></span><br><span class="line"><span class="comment"> &lt;bean&gt;：受Spring管理的JavaBean对象</span></span><br><span class="line"><span class="comment"> id：&lt;bean&gt;的唯一标识，在整个IOC容器中唯一、不重复</span></span><br><span class="line"><span class="comment"> class:指定JavaBean的全类名。目的：通过反射创建对象。</span></span><br><span class="line"><span class="comment"> Class cls = Class.forName("com.test.HelloWorld.Person");</span></span><br><span class="line"><span class="comment"> Object obj = cls.newInstance();  必须提供无参数的构造器 </span></span><br><span class="line"><span class="comment"> &lt;property&gt;：给对象的属性赋值</span></span><br><span class="line"><span class="comment"> name：指定属性名，指定set风格的属性名。</span></span><br><span class="line"><span class="comment"> value：指定属性值。赋值时调用的是set（）方法</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.test.HelloWorld.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"HanMeiMei"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="IOC容器和Bean的配置"><a href="#IOC容器和Bean的配置" class="headerlink" title="IOC容器和Bean的配置"></a>IOC容器和Bean的配置</h2><h3 id="IOC（Inversion-of-Control）：反转控制"><a href="#IOC（Inversion-of-Control）：反转控制" class="headerlink" title="IOC（Inversion of Control）：反转控制"></a>IOC（Inversion of Control）：反转控制</h3><p>​    在应用程序中的组件获取资源时，传统方式是组件主动的从容器中获取所需要的资源，在这样的模式下开发人员往往需要知道在具体容器中特定资源的获取方式，增加了学习成本，同时降低了开发效率。</p><p>​    反转控制的思想完全颠覆了应用程序组件获取资源的传统方式：反转了资源的获取方向——改由容器主动将资源推送给需要的组件，开发人员不需要知道容器是如何创建资源对象的，只需要提供接收资源的方式即可，极大的降低了学习成本，提高了开发效率。这种行为也被称为<strong>查找的被动形式</strong>。</p><h3 id="DI（Dependency-Injection）：依赖注入"><a href="#DI（Dependency-Injection）：依赖注入" class="headerlink" title="DI（Dependency Injection）：依赖注入"></a>DI（Dependency Injection）：依赖注入</h3><p>​    IOC的另一种表述方式，即组件以一些预先定义好的方式（例如：setter方法）接受来自容器的资源注入。相对于IOC而言，表述更为直接。</p><p>​    <strong>ps：IOC描述的是一种思想，而DI是对IOC思想的具体实现</strong></p><h3 id="IOC容器在Spring中的实现"><a href="#IOC容器在Spring中的实现" class="headerlink" title="IOC容器在Spring中的实现"></a>IOC容器在Spring中的实现</h3><ol><li><p>通过IOC容器读取Bean的实例之前，需要先将IOC容器本身实例化</p></li><li><p>Spring提供了IOC容器的两种实现方式</p><p> ​    BeanFactory：IOC容器的基本实现，是Spring内部的基础设施</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    Spring学习01。&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://FWj1635387072.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="学习" scheme="https://FWj1635387072.github.io/categories/%E6%A1%86%E6%9E%B6/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring" scheme="https://FWj1635387072.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>可能用的点</title>
    <link href="https://FWj1635387072.github.io/2020/04/30/%E5%8F%AF%E8%83%BD%E7%94%A8%E5%88%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://FWj1635387072.github.io/2020/04/30/可能用到的知识点/</id>
    <published>2020-04-30T02:22:19.422Z</published>
    <updated>2020-04-30T12:29:46.224Z</updated>
    
    <content type="html"><![CDATA[<p>​    可能用的点。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ListIterator在遍历时可以添加元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListIterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        java.util.ListIterator&lt;Integer&gt; iterator = list.listIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">            iterator.add(<span class="number">11</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        iterator = list.listIterator();</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型通配符-addAll方法"><a href="#泛型通配符-addAll方法" class="headerlink" title="泛型通配符(addAll方法)"></a>泛型通配符(addAll方法)</h2><ol><li><p><code>&lt;?&gt;</code><br> 任意类型，如果没有明确，那么就是Object以及任意java类</p></li><li><p><code>? extends E</code><br>向下限定，E及其子类</p></li><li><p><code>? super E</code></p><p> 向上限定，E及其父类</p></li></ol><h2 id="可变参数-Obect…objs"><a href="#可变参数-Obect…objs" class="headerlink" title="可变参数 Obect…objs"></a>可变参数 Obect…objs</h2><p>只能放在最后,objs是一个数组</p><h2 id="Arrays-asList-T…a"><a href="#Arrays-asList-T…a" class="headerlink" title="Arrays.asList(T…a)"></a>Arrays.asList(T…a)</h2><p>传入泛型可变参数</p><p>把参数变成集合</p><h2 id="linkedHashSet"><a href="#linkedHashSet" class="headerlink" title="linkedHashSet"></a>linkedHashSet</h2><p>唯一一个具有可预知迭代顺序（怎么存怎么取）的Set集合</p><p>内部实现是哈希表和链接列表</p><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><p>整数自带排序的集合</p><p>自定义要实现comparable接口。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    可能用的点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://FWj1635387072.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>leetCode简单题Day3</title>
    <link href="https://FWj1635387072.github.io/2020/04/30/leetCodeDay3/"/>
    <id>https://FWj1635387072.github.io/2020/04/30/leetCodeDay3/</id>
    <published>2020-04-30T02:12:54.535Z</published>
    <updated>2020-04-30T02:13:47.572Z</updated>
    
    <content type="html"><![CDATA[<p> 再来几道简单题</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 再来几道简单题&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://FWj1635387072.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="leetcode" scheme="https://FWj1635387072.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetCode简单题Day2</title>
    <link href="https://FWj1635387072.github.io/2020/04/29/leetCodeDay2/"/>
    <id>https://FWj1635387072.github.io/2020/04/29/leetCodeDay2/</id>
    <published>2020-04-29T02:59:31.061Z</published>
    <updated>2020-04-29T12:13:04.213Z</updated>
    
    <content type="html"><![CDATA[<p>leetCode又来几道简单题。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">225_用队列实现栈</span></span><br><span class="line"><span class="comment">使用队列实现栈的下列操作：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">push(x) -- 元素 x 入栈</span></span><br><span class="line"><span class="comment">pop() -- 移除栈顶元素</span></span><br><span class="line"><span class="comment">top() -- 获取栈顶元素</span></span><br><span class="line"><span class="comment">empty() -- 返回栈是否为空</span></span><br><span class="line"><span class="comment">注意:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">你只能使用队列的基本操作-- 也就是 push to back, peek/pop from front, size, 和 is empty 这些操作是合法的。</span></span><br><span class="line"><span class="comment">你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</span></span><br><span class="line"><span class="comment">你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_225_</span>用队列实现栈 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</span><br><span class="line">        Queue&lt;Integer&gt; queen;</span><br><span class="line">        Queue&lt;Integer&gt; helpQueen;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            queen = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">            helpQueen = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">            queen.offer(x);</span><br><span class="line">            <span class="keyword">while</span> (helpQueen.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                queen.offer(helpQueen.poll());</span><br><span class="line">            &#125;</span><br><span class="line">            Queue temp = queen;</span><br><span class="line">            queen = helpQueen;</span><br><span class="line">            helpQueen = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> helpQueen.poll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> helpQueen.peek();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> helpQueen.isEmpty();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">496.下一个更大的元素Ⅰ</span></span><br><span class="line"><span class="comment">给定两个 没有重复元素 的数组 nums1 和 nums2 ，其中nums1 是 nums2 的子集。找到 nums1 中每个元素在 nums2 中的下一个比其大的值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">nums1 中数字 x 的下一个更大元素是指 x 在 nums2 中对应位置的右边的第一个比 x 大的元素。如果不存在，对应位置输出 -1 。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">示例 1:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入: nums1 = [4,1,2], nums2 = [1,3,4,2].</span></span><br><span class="line"><span class="comment">输出: [-1,3,-1]</span></span><br><span class="line"><span class="comment">解释:</span></span><br><span class="line"><span class="comment">    对于num1中的数字4，你无法在第二个数组中找到下一个更大的数字，因此输出 -1。</span></span><br><span class="line"><span class="comment">    对于num1中的数字1，第二个数组中数字1右边的下一个较大数字是 3。</span></span><br><span class="line"><span class="comment">    对于num1中的数字2，第二个数组中没有下一个更大的数字，因此输出 -1。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_496_</span>下一个更大的元素Ⅰ </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ints = nextGreaterElement(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>, <span class="number">4</span>&#125;, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ints.length; i++) &#123;</span><br><span class="line">            System.out.print(ints[i] + <span class="string">"   "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] nextGreaterElement(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums2.length ; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.empty() &amp;&amp; nums2[i] &gt; stack.peek())</span><br><span class="line">                map.put(stack.pop(), nums2[i]);</span><br><span class="line">            stack.push(nums2[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stack.empty()) &#123;</span><br><span class="line">            map.put(stack.pop(), -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[nums1.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums1.length; i++) &#123;</span><br><span class="line">            res[i] = map.get(nums1[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">请设计一个栈，除了常规栈支持的pop与push函数以外，还支持min函数，该函数返回栈元素中的最小值。执行push、pop和min操作的时间复杂度必须为O(1)。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">示例：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">MinStack minStack = new MinStack();</span></span><br><span class="line"><span class="comment">minStack.push(-2);</span></span><br><span class="line"><span class="comment">minStack.push(0);</span></span><br><span class="line"><span class="comment">minStack.push(-3);</span></span><br><span class="line"><span class="comment">minStack.getMin();   --&gt; 返回 -3.</span></span><br><span class="line"><span class="comment">minStack.pop();</span></span><br><span class="line"><span class="comment">minStack.top();      --&gt; 返回 0.</span></span><br><span class="line"><span class="comment">minStack.getMin();   --&gt; 返回 -2.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack, minStack;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * initialize your data structure here.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">            minStack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">            stack.push(x);</span><br><span class="line">            <span class="keyword">if</span> (minStack.empty()) &#123;</span><br><span class="line">                minStack.push(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                minStack.push(Math.min(minStack.peek(), x));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            stack.pop();</span><br><span class="line">            minStack.pop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> stack.peek();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> minStack.peek();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">844. 比较含退格的字符串</span></span><br><span class="line"><span class="comment">给定 S 和 T 两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。 # 代表退格字符。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：如果对空文本输入退格字符，文本继续为空。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">示例 1：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入：S = "ab#c", T = "ad#c"</span></span><br><span class="line"><span class="comment">输出：true</span></span><br><span class="line"><span class="comment">解释：S 和 T 都会变成 “ac”。</span></span><br><span class="line"><span class="comment">示例 2：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入：S = "ab##", T = "c#d#"</span></span><br><span class="line"><span class="comment">输出：true</span></span><br><span class="line"><span class="comment">解释：S 和 T 都会变成 “”。</span></span><br><span class="line"><span class="comment">示例 3：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入：S = "a##c", T = "#a#c"</span></span><br><span class="line"><span class="comment">输出：true</span></span><br><span class="line"><span class="comment">解释：S 和 T 都会变成 “c”。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_844_</span>比较含退格的字符串 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(backspaceCompare(<span class="string">"a##"</span>, <span class="string">"a####"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">backspaceCompare</span><span class="params">(String S, String T)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; s = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line">        Stack&lt;Character&gt; t = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (S.charAt(i) != <span class="string">'#'</span>)</span><br><span class="line">                s.push(S.charAt(i));</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!s.empty())</span><br><span class="line">                s.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (T.charAt(i) != <span class="string">'#'</span>)</span><br><span class="line">                t.push(T.charAt(i));</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!t.empty())</span><br><span class="line">                t.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.toString().equals(t.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;leetCode又来几道简单题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://FWj1635387072.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="leetcode" scheme="https://FWj1635387072.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetCode简单题Day2</title>
    <link href="https://FWj1635387072.github.io/2020/04/28/leetCoedDay1/"/>
    <id>https://FWj1635387072.github.io/2020/04/28/leetCoedDay1/</id>
    <published>2020-04-28T06:08:06.648Z</published>
    <updated>2020-04-29T12:12:54.910Z</updated>
    
    <content type="html"><![CDATA[<p>leetcode几道简单题</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1021.删除最外层的括号</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">有效括号字符串为空 ("")、"(" + A + ")" 或 A + B，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。例如，""，"()"，"(())()" 和 "(()(()))" 都是有效的括号字符串。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">示例 1：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入："(()())(())"</span></span><br><span class="line"><span class="comment">输出："()()()"</span></span><br><span class="line"><span class="comment">解释：</span></span><br><span class="line"><span class="comment">输入字符串为 "(()())(())"，原语化分解得到 "(()())" + "(())"，</span></span><br><span class="line"><span class="comment">删除每个部分中的最外层括号后得到 "()()" + "()" = "()()()"。</span></span><br><span class="line"><span class="comment">示例 2：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入："(()())(())(()(()))"</span></span><br><span class="line"><span class="comment">输出："()()()()(())"</span></span><br><span class="line"><span class="comment">解释：</span></span><br><span class="line"><span class="comment">输入字符串为 "(()())(())(()(()))"，原语化分解得到 "(()())" + "(())" + "(()(()))"，</span></span><br><span class="line"><span class="comment">删除每个部分中的最外层括号后得到 "()()" + "()" + "()(())" = "()()()()(())"。</span></span><br><span class="line"><span class="comment">示例 3：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入："()()"</span></span><br><span class="line"><span class="comment">输出：""</span></span><br><span class="line"><span class="comment">解释：</span></span><br><span class="line"><span class="comment">输入字符串为 "()()"，原语化分解得到 "()" + "()"，</span></span><br><span class="line"><span class="comment">删除每个部分中的最外层括号后得到 "" + "" = ""。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_1021_</span>删除最外层括号 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"(()()()(()()))(())"</span>;</span><br><span class="line">        System.out.println(solution2(str));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">solution1</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">')'</span>) level--;</span><br><span class="line">            <span class="keyword">if</span> (level &gt;= <span class="number">1</span>) sb.append(c);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'('</span>) level++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">solution2</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = S.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'('</span>)</span><br><span class="line">                stack.push(ch);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">                    end = i;</span><br><span class="line">                    sb.append(S.substring(begin + <span class="number">1</span>,end));</span><br><span class="line">                    begin = i + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*面试03.04化栈为队</span></span><br><span class="line"><span class="comment">实现一个MyQueue类，该类用两个栈来实现一个队列。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">示例：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">MyQueue queue = new MyQueue();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">queue.push(1);</span></span><br><span class="line"><span class="comment">queue.push(2);</span></span><br><span class="line"><span class="comment">queue.peek();  // 返回 1</span></span><br><span class="line"><span class="comment">queue.pop();   // 返回 1</span></span><br><span class="line"><span class="comment">queue.empty(); // 返回 false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">你只能使用标准的栈操作 -- 也就是只有 push to top, peek/pop from top, size 和 is empty 操作是合法的。</span></span><br><span class="line"><span class="comment">你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</span></span><br><span class="line"><span class="comment">假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_</span>面试03<span class="title">_04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyQueue queue = <span class="keyword">new</span> MyQueue();</span><br><span class="line">        queue.push(<span class="number">1</span>);</span><br><span class="line">        queue.push(<span class="number">2</span>);</span><br><span class="line">        System.out.println(queue.peek());</span><br><span class="line">        System.out.println(queue.pop());</span><br><span class="line">        System.out.println(queue.empty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; numStack;</span><br><span class="line">        Stack&lt;Integer&gt; helpStack;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            numStack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">            helpStack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (!helpStack.isEmpty())&#123;</span><br><span class="line">                numStack.push(helpStack.pop());</span><br><span class="line">            &#125;</span><br><span class="line">            numStack.push(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            peek();</span><br><span class="line">            <span class="keyword">return</span> helpStack.pop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!numStack.isEmpty())</span><br><span class="line">                numStack.peek();</span><br><span class="line">            <span class="keyword">while</span> (!numStack.isEmpty())&#123;</span><br><span class="line">                helpStack.push(numStack.pop());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> helpStack.peek();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> numStack.isEmpty() &amp;&amp; helpStack.isEmpty();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1047.删除字符串中的所有相邻重复项</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在 S 上反复执行重复项删除操作，直到无法继续删除。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">示例：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入："abbaca"</span></span><br><span class="line"><span class="comment">输出："ca"</span></span><br><span class="line"><span class="comment">解释：</span></span><br><span class="line"><span class="comment">例如，在 "abbaca" 中，我们可以删除 "bb" 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 "aaca"，其中又只有 "aa" 可以执行重复项删除操作，所以最后的字符串为 "ca"。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_1047_</span>删除字符串中的所有相邻重复项 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(removeDuplicates(<span class="string">"abbaca"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">removeDuplicates</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; S.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.isEmpty() || stack.peek() != S.charAt(i))</span><br><span class="line">                stack.push(S.charAt(i));</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:stack)&#123;</span><br><span class="line">            sb.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">682.棒球比赛</span></span><br><span class="line"><span class="comment">你现在是棒球比赛记录员。</span></span><br><span class="line"><span class="comment">给定一个字符串列表，每个字符串可以是以下四种类型之一：</span></span><br><span class="line"><span class="comment">1.整数（一轮的得分）：直接表示您在本轮中获得的积分数。</span></span><br><span class="line"><span class="comment">2. "+"（一轮的得分）：表示本轮获得的得分是前两轮有效 回合得分的总和。</span></span><br><span class="line"><span class="comment">3. "D"（一轮的得分）：表示本轮获得的得分是前一轮有效 回合得分的两倍。</span></span><br><span class="line"><span class="comment">4. "C"（一个操作，这不是一个回合的分数）：表示您获得的最后一个有效 回合的分数是无效的，应该被移除。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">每一轮的操作都是永久性的，可能会对前一轮和后一轮产生影响。</span></span><br><span class="line"><span class="comment">你需要返回你在所有回合中得分的总和。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">示例 1:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入: ["5","2","C","D","+"]</span></span><br><span class="line"><span class="comment">输出: 30</span></span><br><span class="line"><span class="comment">解释: </span></span><br><span class="line"><span class="comment">第1轮：你可以得到5分。总和是：5。</span></span><br><span class="line"><span class="comment">第2轮：你可以得到2分。总和是：7。</span></span><br><span class="line"><span class="comment">操作1：第2轮的数据无效。总和是：5。</span></span><br><span class="line"><span class="comment">第3轮：你可以得到10分（第2轮的数据已被删除）。总数是：15。</span></span><br><span class="line"><span class="comment">第4轮：你可以得到5 + 10 = 15分。总数是：30。</span></span><br><span class="line"><span class="comment">示例 2:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入: ["5","-2","4","C","D","9","+","+"]</span></span><br><span class="line"><span class="comment">输出: 27</span></span><br><span class="line"><span class="comment">解释: </span></span><br><span class="line"><span class="comment">第1轮：你可以得到5分。总和是：5。</span></span><br><span class="line"><span class="comment">第2轮：你可以得到-2分。总数是：3。</span></span><br><span class="line"><span class="comment">第3轮：你可以得到4分。总和是：7。</span></span><br><span class="line"><span class="comment">操作1：第3轮的数据无效。总数是：3。</span></span><br><span class="line"><span class="comment">第4轮：你可以得到-4分（第三轮的数据已被删除）。总和是：-1。</span></span><br><span class="line"><span class="comment">第5轮：你可以得到9分。总数是：8。</span></span><br><span class="line"><span class="comment">第6轮：你可以得到-4 + 9 = 5分。总数是13。</span></span><br><span class="line"><span class="comment">第7轮：你可以得到9 + 5 = 14分。总数是27。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_682_</span>棒球比赛 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] s = &#123;<span class="string">"5"</span>,<span class="string">"2"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>,<span class="string">"+"</span>&#125;;</span><br><span class="line">        System.out.println(calPoints(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calPoints</span><span class="params">(String[] ops)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; scores = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; ops.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (ops[i].equals(<span class="string">"+"</span>))&#123;</span><br><span class="line">                <span class="keyword">int</span> temp1 = scores.pop();</span><br><span class="line">                <span class="keyword">int</span> temp2 = scores.peek();</span><br><span class="line">                scores.push(temp1);</span><br><span class="line">                scores.push(temp1 + temp2);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (ops[i].equals(<span class="string">"D"</span>))&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = scores.peek();</span><br><span class="line">                scores.push(temp*<span class="number">2</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (ops[i].equals(<span class="string">"C"</span>))&#123;</span><br><span class="line">                scores.pop();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                scores.push(Integer.parseInt(ops[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a : scores)&#123;</span><br><span class="line">            sum+= a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;leetcode几道简单题&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://FWj1635387072.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="leetcode" scheme="https://FWj1635387072.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>算法竞赛准备20----省赛模拟赛（Java语言）</title>
    <link href="https://FWj1635387072.github.io/2020/04/18/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B20/"/>
    <id>https://FWj1635387072.github.io/2020/04/18/算法竞赛20/</id>
    <published>2020-04-18T01:25:08.076Z</published>
    <updated>2020-04-18T10:51:31.521Z</updated>
    
    <content type="html"><![CDATA[<p> 省赛模拟，有难度。。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">问题描述</span><br><span class="line">　　给定三个整数 a, b, c，如果一个整数既不是 a 的整数倍也不是 b 的整数倍还不是 c 的整数倍，则这个数称为反倍数。</span><br><span class="line">　　请问在 <span class="number">1</span> 至 n 中有多少个反倍数。</span><br><span class="line">输入格式</span><br><span class="line">　　输入的第一行包含一个整数 n。</span><br><span class="line">　　第二行包含三个整数 a, b, c，相邻两个数之间用一个空格分隔。</span><br><span class="line">输出格式</span><br><span class="line">　　输出一行包含一个整数，表示答案。</span><br><span class="line">样例输入</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">6</span></span><br><span class="line">样例输出</span><br><span class="line"><span class="number">10</span></span><br><span class="line">样例说明</span><br><span class="line">　　以下这些数满足要求：<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">29</span>。</span><br><span class="line">　　</span><br><span class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> c = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % a != <span class="number">0</span> &amp;&amp; i % b != <span class="number">0</span> &amp;&amp; i % c != <span class="number">0</span>)</span><br><span class="line">                count++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">问题描述</span><br><span class="line">　　给定一个单词，请使用凯撒密码将这个单词加密。</span><br><span class="line">　　凯撒密码是一种替换加密的技术，单词中的所有字母都在字母表上向后偏移<span class="number">3</span>位后被替换成密文。即a变为d，b变为e，...，w变为z，x变为a，y变为b，z变为c。</span><br><span class="line">　　例如，lanqiao会变成odqtldr。</span><br><span class="line">输入格式</span><br><span class="line">　　输入一行，包含一个单词，单词中只包含小写英文字母。</span><br><span class="line">输出格式</span><br><span class="line">　　输出一行，表示加密后的密文。</span><br><span class="line">样例输入</span><br><span class="line">lanqiao</span><br><span class="line">样例输出</span><br><span class="line">odqtldr</span><br><span class="line">评测用例规模与约定</span><br><span class="line">　　对于所有评测用例，单词中的字母个数不超过<span class="number">100</span>。</span><br><span class="line">　　</span><br><span class="line">　　<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Problem6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String s = sc.next();</span><br><span class="line">        <span class="keyword">char</span>[] ch = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.length();i++)&#123;</span><br><span class="line">            ch[i] += <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">switch</span> ((<span class="keyword">int</span>)ch[i])&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">123</span>:</span><br><span class="line">                    ch[i] = <span class="string">'a'</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">124</span>:</span><br><span class="line">                    ch[i] = <span class="string">'b'</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">125</span>:</span><br><span class="line">                    ch[i] = <span class="string">'c'</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(ch));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">格依次填上正整数，我们称填好的表格为一个螺旋矩阵。</span><br><span class="line">　　例如，一个 <span class="number">4</span> 行 <span class="number">5</span> 列的螺旋矩阵如下：</span><br><span class="line">　　<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">　　<span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">6</span></span><br><span class="line">　　<span class="number">13</span> <span class="number">20</span> <span class="number">19</span> <span class="number">18</span> <span class="number">7</span></span><br><span class="line">　　<span class="number">12</span> <span class="number">11</span> <span class="number">10</span> <span class="number">9</span> <span class="number">8</span></span><br><span class="line">输入格式</span><br><span class="line">　　输入的第一行包含两个整数 n, m，分别表示螺旋矩阵的行数和列数。</span><br><span class="line">　　第二行包含两个整数 r, c，表示要求的行号和列号。</span><br><span class="line">输出格式</span><br><span class="line">　　输出一个整数，表示螺旋矩阵中第 r 行第 c 列的元素的值。</span><br><span class="line">样例输入</span><br><span class="line"><span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span></span><br><span class="line">样例输出</span><br><span class="line"><span class="number">15</span></span><br><span class="line">评测用例规模与约定</span><br><span class="line">　　对于 <span class="number">30</span>% 的评测用例，<span class="number">2</span> &lt;= n, m &lt;= <span class="number">20</span>。</span><br><span class="line">　　对于 <span class="number">70</span>% 的评测用例，<span class="number">2</span> &lt;= n, m &lt;= <span class="number">100</span>。</span><br><span class="line">　　对于所有评测用例，<span class="number">2</span> &lt;= n, m &lt;= <span class="number">1000</span>，<span class="number">1</span> &lt;= r &lt;= n，<span class="number">1</span> &lt;= c &lt;= m。</span><br><span class="line">　　</span><br><span class="line">　　</span><br><span class="line">　　Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> m = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> r = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> c = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        <span class="keyword">int</span> leftR = <span class="number">0</span>, leftC = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> rightR = n - <span class="number">1</span>, rightC = m - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> pr = leftR, pc = leftC;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (leftC &lt; rightC &amp;&amp; leftR &lt; rightR) &#123;</span><br><span class="line">            <span class="keyword">while</span> (pc &lt;= rightC) &#123;</span><br><span class="line">                arr[pr][pc++] = i++;</span><br><span class="line">            &#125;</span><br><span class="line">            pc = rightC;</span><br><span class="line">            pr++;</span><br><span class="line">            <span class="keyword">while</span> (pr &lt;= rightR) &#123;</span><br><span class="line">                arr[pr++][pc] = i++;</span><br><span class="line">            &#125;</span><br><span class="line">            pr--;</span><br><span class="line">            pc--;</span><br><span class="line">            <span class="keyword">while</span> (pc&gt;=leftC)&#123;</span><br><span class="line">                arr[pr][pc--] = i++;</span><br><span class="line">            &#125;</span><br><span class="line">            pr--;</span><br><span class="line">            pc++;</span><br><span class="line">            <span class="keyword">while</span> (pr&gt;leftR)&#123;</span><br><span class="line">                arr[pr--][pc] = i++;</span><br><span class="line">            &#125;</span><br><span class="line">            leftC++;</span><br><span class="line">            leftR++;</span><br><span class="line">            rightC--;</span><br><span class="line">            rightR--;</span><br><span class="line">            pr = leftR;</span><br><span class="line">            pc = leftC;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(arr[r-<span class="number">1</span>][c-<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">问题描述</span><br><span class="line">　　如果一个序列的奇数项都比前一项大，偶数项都比前一项小，则称为一个摆动序列。即 a[<span class="number">2</span>i]&lt;a[<span class="number">2</span>i-<span class="number">1</span>], a[<span class="number">2</span>i+<span class="number">1</span>]&gt;a[<span class="number">2</span>i]。</span><br><span class="line">　　小明想知道，长度为 m，每个数都是 <span class="number">1</span> 到 n 之间的正整数的摆动序列一共有多少个。</span><br><span class="line">输入格式</span><br><span class="line">　　输入一行包含两个整数 m，n。</span><br><span class="line">输出格式</span><br><span class="line">　　输出一个整数，表示答案。答案可能很大，请输出答案除以<span class="number">10000</span>的余数。</span><br><span class="line">样例输入</span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line">样例输出</span><br><span class="line"><span class="number">14</span></span><br><span class="line">样例说明</span><br><span class="line">　　以下是符合要求的摆动序列：</span><br><span class="line">　　<span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line">　　<span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line">　　<span class="number">2</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line">　　<span class="number">3</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line">　　<span class="number">3</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line">　　<span class="number">3</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line">　　<span class="number">3</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">　　<span class="number">3</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line">　　<span class="number">4</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line">　　<span class="number">4</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line">　　<span class="number">4</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line">　　<span class="number">4</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">　　<span class="number">4</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line">　　<span class="number">4</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">评测用例规模与约定</span><br><span class="line">　　对于 <span class="number">20</span>% 的评测用例，<span class="number">1</span> &lt;= n, m &lt;= <span class="number">5</span>；</span><br><span class="line">　　对于 <span class="number">50</span>% 的评测用例，<span class="number">1</span> &lt;= n, m &lt;= <span class="number">10</span>；</span><br><span class="line">　　对于 <span class="number">80</span>% 的评测用例，<span class="number">1</span> &lt;= n, m &lt;= <span class="number">100</span>；</span><br><span class="line">　　对于所有评测用例，<span class="number">1</span> &lt;= n, m &lt;= <span class="number">1000</span>。</span><br><span class="line">　　</span><br><span class="line">　　<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Problem8</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> m = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            dp[<span class="number">1</span>][i] = n - i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= m;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((i &amp; <span class="number">1</span>) != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = n;j &gt;= <span class="number">1</span>;j--)&#123;</span><br><span class="line">                    dp[i][j] = (dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + dp[i][j+<span class="number">1</span>]) % <span class="number">10000</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;=n ;j++)&#123;</span><br><span class="line">                    dp[i][j] = (dp[i-<span class="number">1</span>][j+<span class="number">1</span>] + dp[i][j-<span class="number">1</span>]) % <span class="number">10000</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res;</span><br><span class="line">        <span class="keyword">if</span>((m &amp; <span class="number">1</span>) != <span class="number">0</span>)&#123;</span><br><span class="line">            res = dp[m][<span class="number">1</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res = dp[m][n];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">题目</span><br><span class="line">问题描述</span><br><span class="line"></span><br><span class="line">小明和朋友们一起去郊外植树，他们带了一些在自己实验室精心研究出的小树苗。</span><br><span class="line">　　小明和朋友们一共有 n 个人，他们经过精心挑选，在一块空地上每个人挑选了一个适合植树的位置，总共 n 个。他们准备把自己带的树苗都植下去。</span><br><span class="line">　　然而，他们遇到了一个困难：有的树苗比较大，而有的位置挨太近，导致两棵树植下去后会撞在一起。</span><br><span class="line">　　他们将树看成一个圆，圆心在他们找的位置上。如果两棵树对应的圆相交，这两棵树就不适合同时植下（相切不受影响），称为两棵树冲突。</span><br><span class="line">　　小明和朋友们决定先合计合计，只将其中的一部分树植下去，保证没有互相冲突的树。他们同时希望这些树所能覆盖的面积和（圆面积和）最大。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line"></span><br><span class="line">输入的第一行包含一个整数 n ，表示人数，即准备植树的位置数。</span><br><span class="line">　　接下来 n 行，每行三个整数 x, y, r，表示一棵树在空地上的横、纵坐标和半径。</span><br><span class="line"></span><br><span class="line">输出格式</span><br><span class="line"></span><br><span class="line">输出一行包含一个整数，表示在不冲突下可以植树的面积和。由于每棵树的面积都是圆周率的整数倍，请输出答案除以圆周率后的值（应当是一个整数）。</span><br><span class="line"></span><br><span class="line">样例输入</span><br><span class="line"></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">7</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">7</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">样例输出</span><br><span class="line"></span><br><span class="line"><span class="number">12</span></span><br><span class="line"></span><br><span class="line">评测用例规模与约定</span><br><span class="line"></span><br><span class="line">对于 <span class="number">30</span>% 的评测用例，<span class="number">1</span> &lt;= n &lt;= <span class="number">10</span>；</span><br><span class="line">　　对于 <span class="number">60</span>% 的评测用例，<span class="number">1</span> &lt;= n &lt;= <span class="number">20</span>；</span><br><span class="line">　　对于所有评测用例，<span class="number">1</span> &lt;= n &lt;= <span class="number">30</span>，<span class="number">0</span> &lt;= x, y &lt;= <span class="number">1000</span>，<span class="number">1</span> &lt;= r &lt;= <span class="number">1000</span>。</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Problem10</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] x = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">31</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] y = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">31</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] r = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">31</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n = <span class="number">0</span>, max = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[][] bool = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">31</span>][<span class="number">31</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] vis = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">31</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">         n = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            x[i] = sc.nextInt();</span><br><span class="line">            y[i] = sc.nextInt();</span><br><span class="line">            r[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> bo = ((x[i] - x[j]) * (x[i] - x[j]) + (y[i] - y[j]) * (y[i] - y[j]) &gt; (r[i] + r[j])</span><br><span class="line">                        * (r[i] + r[j]));</span><br><span class="line">                bool[i][j] = bo;</span><br><span class="line">                bool[j][i] = bo;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">1</span>);</span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (step &gt; n) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (vis[i]) &#123;</span><br><span class="line">                    sum += (r[i] * r[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            max = Math.max(sum, max);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        vis[step] = <span class="keyword">false</span>;</span><br><span class="line">        dfs(step + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; step; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[i] &amp;&amp; !bool[i][step]) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[step] = <span class="keyword">true</span>;</span><br><span class="line">        dfs(step + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 省赛模拟，有难度。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://FWj1635387072.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="algorithm" scheme="https://FWj1635387072.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法竞赛准备19----例题（Java语言）</title>
    <link href="https://FWj1635387072.github.io/2020/04/15/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B19/"/>
    <id>https://FWj1635387072.github.io/2020/04/15/算法竞赛19/</id>
    <published>2020-04-15T11:29:26.108Z</published>
    <updated>2020-04-15T11:53:17.446Z</updated>
    
    <content type="html"><![CDATA[<p> 如题。。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 练习的例子;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">practice_15</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小明有一块空地，他将这块空地划分为 n 行 m 列的小块，每行和每列的长度都为 1。</span></span><br><span class="line"><span class="comment">     * 小明选了其中的一些小块空地，种上了草，其他小块仍然保持是空地。</span></span><br><span class="line"><span class="comment">     * 这些草长得很快，每个月，草都会向外长出一些，如果一个小块种了草，则它将向自己的上、下、左、右四小块空地扩展，这四小块空地都将变为有草的小块。</span></span><br><span class="line"><span class="comment">     * 请告诉小明，k 个月后空地上哪些地方有草。</span></span><br><span class="line"><span class="comment">     * 【输入格式】</span></span><br><span class="line"><span class="comment">     * 输入的第一行包含两个整数 n, m。</span></span><br><span class="line"><span class="comment">     * 接下来 n 行，每行包含 m 个字母，表示初始的空地状态，字母之间没有空格。如果为小数点，表示为空地，如果字母为 g，表示种了草。</span></span><br><span class="line"><span class="comment">     * 接下来包含一个整数 k。</span></span><br><span class="line"><span class="comment">     * 【输出格式】</span></span><br><span class="line"><span class="comment">     * 输出 n 行，每行包含 m 个字母，表示 k 个月后空地的状态。如果为小数点，表示为空地，如果字母为 g，表示长了草</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] dx = &#123;<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] dy = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> Scanner sc;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] vis = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N, M, K;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        N = sc.nextInt();</span><br><span class="line">        M = sc.nextInt();</span><br><span class="line">        sc.nextLine();</span><br><span class="line">        LinkedList&lt;Block&gt; q = <span class="keyword">new</span> LinkedList&lt;Block&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            String line = sc.nextLine();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (line.charAt(j) == <span class="string">'g'</span>) &#123;</span><br><span class="line">                    q.addLast(<span class="keyword">new</span> Block(i, j, <span class="number">0</span>));</span><br><span class="line">                    vis[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        K = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            Block b = q.removeFirst();</span><br><span class="line">            <span class="keyword">int</span> month = b.month;</span><br><span class="line">            <span class="keyword">if</span> (month &lt; K) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> nx = b.i + dx[i];</span><br><span class="line">                    <span class="keyword">int</span> ny = b.j + dy[i];</span><br><span class="line">                    <span class="keyword">if</span> (<span class="number">0</span> &lt;= nx &amp;&amp; nx &lt; N &amp;&amp; <span class="number">0</span> &lt;= ny &amp;&amp; ny &lt; M &amp;&amp; vis[nx][ny] == <span class="number">0</span>) &#123;</span><br><span class="line">                        vis[nx][ny] = <span class="number">1</span>;</span><br><span class="line">                        q.addLast(<span class="keyword">new</span> Block(nx, ny, month + <span class="number">1</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        BufferedWriter bf = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (vis[i][j] == <span class="number">1</span>)</span><br><span class="line">                    bf.write(<span class="string">'g'</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    bf.write(<span class="string">"."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            bf.write(<span class="string">'\n'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        bf.flush();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i, j, month;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Block</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> month)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.i = i;</span><br><span class="line">            <span class="keyword">this</span>.j = j;</span><br><span class="line">            <span class="keyword">this</span>.month = month;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 练习的例子;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">import java.util.Scanner;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public class practice_13 &#123;</span></span><br><span class="line"><span class="comment">    //深度优先搜索DFS</span></span><br><span class="line"><span class="comment">    //数独</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    /**</span></span><br><span class="line"><span class="comment">     * 9*9的方格，每一行包含1-9，每一列包含1-9，每一个9*9包含1-9</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">char</span>[][] table = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">9</span>][];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            table[i] = sc.nextLine().toCharArray();</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(table, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] table, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">9</span>) &#123;</span><br><span class="line">            print(table);</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (table[x][y] == <span class="string">'0'</span>) &#123;<span class="comment">//虚位以待</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; <span class="number">10</span>; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (check(table, x, y, k)) &#123;</span><br><span class="line">                    table[x][y] = (<span class="keyword">char</span>) (<span class="string">'0'</span> + k);</span><br><span class="line">                    dfs(table, x + (y + <span class="number">1</span>) / <span class="number">9</span>, (y + <span class="number">1</span>) % <span class="number">9</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            table[x][y] = <span class="string">'0'</span>; <span class="comment">//回溯</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dfs(table, x + (y + <span class="number">1</span>) / <span class="number">9</span>, (y + <span class="number">1</span>) % <span class="number">9</span>); <span class="comment">//处理下一个元素</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span>[][] talbe)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(talbe[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span>[][] table, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//检查同行和同列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; <span class="number">9</span>; l++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (table[i][l] == (<span class="keyword">char</span>) (<span class="string">'0'</span> + k)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (table[l][j] == (<span class="keyword">char</span>) (<span class="string">'0'</span> + k)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检查小九宫格</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = (i / <span class="number">3</span>) * <span class="number">3</span>; l &lt; (i / <span class="number">3</span> + <span class="number">1</span>) * <span class="number">3</span>; l++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> m = (j / <span class="number">3</span>) * <span class="number">3</span>; m &lt; (j / <span class="number">3</span> + <span class="number">1</span>) * <span class="number">3</span>; m++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (table[l][m] == (<span class="keyword">char</span>) (<span class="string">'0'</span> + k)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 如题。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://FWj1635387072.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="algorithm" scheme="https://FWj1635387072.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法竞赛准备17----例题（Java语言）</title>
    <link href="https://FWj1635387072.github.io/2020/04/14/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B17/"/>
    <id>https://FWj1635387072.github.io/2020/04/14/算法竞赛17/</id>
    <published>2020-04-14T02:10:57.568Z</published>
    <updated>2020-04-13T11:34:33.524Z</updated>
    
    <content type="html"><![CDATA[<p> 如题。。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.scenario.animation.AbstractMasterTimer;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">practice_11</span> </span>&#123;</span><br><span class="line">    <span class="comment">//子集生成</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Set&lt;Set&lt;Integer&gt;&gt; getSubsets3Core(<span class="keyword">int</span>[] A, <span class="keyword">int</span> n, <span class="keyword">int</span> cur) &#123;</span><br><span class="line">        Set&lt;Set&lt;Integer&gt;&gt; newSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="number">0</span>) &#123; <span class="comment">//处理第一个元素</span></span><br><span class="line">            Set&lt;Integer&gt; nil = <span class="keyword">new</span> HashSet&lt;&gt;();<span class="comment">//空集</span></span><br><span class="line">            Set&lt;Integer&gt; first = <span class="keyword">new</span> HashSet&lt;&gt;();<span class="comment">//包含第一个元素的集合</span></span><br><span class="line">            first.add(A[<span class="number">0</span>]);</span><br><span class="line">            newSet.add(nil);</span><br><span class="line">            newSet.add(first);</span><br><span class="line">            <span class="keyword">return</span> newSet;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set&lt;Set&lt;Integer&gt;&gt; oldSet = getSubsets3Core(A, n, cur - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Set&lt;Integer&gt; set : oldSet) &#123;</span><br><span class="line">            <span class="comment">//对于每个子集，cur这个元素可以加进去，也可以不加进去。</span></span><br><span class="line">            newSet.add(set);<span class="comment">//保留原样</span></span><br><span class="line">            Set&lt;Integer&gt; clone = (Set&lt;Integer&gt;) ((HashSet) set).clone();</span><br><span class="line">            clone.add(A[cur]);</span><br><span class="line">            newSet.add(clone);<span class="comment">//添加当前元素</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Set&lt;Set&lt;Integer&gt;&gt; getSubsets3Core(<span class="keyword">int</span>[] A, <span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">return</span> getSubsets3Core(A, n, n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] A = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        Set&lt;Set&lt;Integer&gt;&gt; ne = getSubsets3Core(A, A.length);</span><br><span class="line">        System.out.println(ne);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//二进制解法</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; getSubSets(<span class="keyword">int</span>[] A, <span class="keyword">int</span> n) &#123;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num = (<span class="keyword">int</span>) Math.pow(<span class="number">2</span>, n) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = num; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            ArrayList&lt;Integer&gt; s = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (((i &gt;&gt; j) &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                    s.add(A[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] A = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; subSets = getSubSets(A, A.length);</span><br><span class="line">        System.out.println(subSets);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 如题。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://FWj1635387072.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="algorithm" scheme="https://FWj1635387072.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法竞赛准备18----例题（Java语言）</title>
    <link href="https://FWj1635387072.github.io/2020/04/13/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B18/"/>
    <id>https://FWj1635387072.github.io/2020/04/13/算法竞赛18/</id>
    <published>2020-04-13T11:34:07.367Z</published>
    <updated>2020-04-14T11:36:32.075Z</updated>
    
    <content type="html"><![CDATA[<p> 如题。。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回溯，全排列</span></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">practice_12</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//全排列,回溯。这个例子输入的值不能太多。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">getPermutation</span><span class="params">(String A)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] arr = A.toCharArray();</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        getPermutationCore(arr,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getPermutationCore</span><span class="params">(<span class="keyword">char</span>[] arr, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k == arr.length) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> String(arr));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从K位开始的每个字符都尝试放在新排列的k这个位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k; ，i &lt; arr.length; i++) &#123;</span><br><span class="line">            swap(arr,k,i);</span><br><span class="line">            getPermutationCore(arr,k+<span class="number">1</span>);</span><br><span class="line">            swap(arr,k,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">char</span>[] arr,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出大量字符，尽量用BufferWriter。</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = getPermutation(<span class="string">"abzsdfuad"</span>);</span><br><span class="line">        BufferedWriter write = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        <span class="keyword">for</span>(String s:list)&#123;</span><br><span class="line">            write.write(s);</span><br><span class="line">            write.write(<span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        write.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h2><p>dfs：先把一条路走到黑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dfs</span></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">practice_14</span> </span>&#123;</span><br><span class="line">    <span class="comment">//迷宫游戏</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1表示墙，不能走。</span></span><br><span class="line"><span class="comment">     * 0表示路，可以走</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] array = &#123;</span><br><span class="line"></span><br><span class="line">            &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxLine = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxRow = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == maxRow - <span class="number">1</span> &amp;&amp; j == maxLine - <span class="number">1</span>) &#123;</span><br><span class="line">            print();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向右走</span></span><br><span class="line">        <span class="keyword">if</span> (canMove(i, j, i, j + <span class="number">1</span>)) &#123;</span><br><span class="line">            array[i][j] = <span class="number">5</span>;</span><br><span class="line">            check(i, j + <span class="number">1</span>);</span><br><span class="line">            array[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向左走</span></span><br><span class="line">        <span class="keyword">if</span> (canMove(i, j, i, j - <span class="number">1</span>)) &#123;</span><br><span class="line">            array[i][j] = <span class="number">5</span>;</span><br><span class="line">            check(i, j - <span class="number">1</span>);</span><br><span class="line">            array[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向下走</span></span><br><span class="line">        <span class="keyword">if</span> (canMove(i, j, i + <span class="number">1</span>, j)) &#123;</span><br><span class="line">            array[i][j] = <span class="number">5</span>;</span><br><span class="line">            check(i + <span class="number">1</span>, j);</span><br><span class="line">            array[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向右走</span></span><br><span class="line">        <span class="keyword">if</span> (canMove(i, j, i - <span class="number">1</span>, j)) &#123;</span><br><span class="line">            array[i][j] = <span class="number">5</span>;</span><br><span class="line">            check(i - <span class="number">1</span>, j);</span><br><span class="line">            array[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">canMove</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> targetI, <span class="keyword">int</span> targetJ)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (targetI &lt; <span class="number">0</span> || targetJ &lt; <span class="number">0</span> || targetI &gt;= maxRow || targetJ &gt;= maxLine)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (array[targetI][targetJ] == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (array[targetI][targetJ] == <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedWriter bf = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        System.out.println(<span class="string">"得到一个解"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxRow; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; maxLine; j++) &#123;</span><br><span class="line">                bf.write(array[i][j] + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            bf.write(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        bf.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        check(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 如题。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://FWj1635387072.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="algorithm" scheme="https://FWj1635387072.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法竞赛准备16----例题（Java语言）</title>
    <link href="https://FWj1635387072.github.io/2020/04/09/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B16/"/>
    <id>https://FWj1635387072.github.io/2020/04/09/算法竞赛16/</id>
    <published>2020-04-09T11:43:33.503Z</published>
    <updated>2020-04-13T11:34:15.940Z</updated>
    
    <content type="html"><![CDATA[<p> 如题。。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_2013</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 世纪末的星期</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 析：世纪末的星叫</span></span><br><span class="line"><span class="comment">     * 曾有教称1999年12月31日是世界末日。当然该评言已不攻自破</span></span><br><span class="line"><span class="comment">     * 还有称今后的渠个世纪末的12月31日，如果是星期一会、。</span></span><br><span class="line"><span class="comment">     * 有趣的是，任何一个世纪末的年份的12月31日都不可能是星期一</span></span><br><span class="line"><span class="comment">     * 于是，“谣言制商”又修改为星期日</span></span><br><span class="line"><span class="comment">     * 1999年的12月31日是星期五，请问：未来哪一个离我们最近的一个世末年（即xx99年）的12月31日正好是星期天（星期日）？</span></span><br><span class="line"><span class="comment">     * 请回答该年份，（只写这个4位整数，不要写12月31等多余信息）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//熟悉Caladar的API</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> _01_世纪末的星期() &#123;</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> year = <span class="number">1999</span>; year &lt; <span class="number">10000</span>; year += <span class="number">100</span>) &#123;</span><br><span class="line">            calendar.set(Calendar.YEAR, year);</span><br><span class="line">            calendar.set(Calendar.MONTH, <span class="number">11</span>);</span><br><span class="line">            calendar.set(Calendar.DAY_OF_MONTH, <span class="number">31</span>);</span><br><span class="line">            <span class="keyword">if</span> (calendar.get(Calendar.DAY_OF_WEEK) == <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(year);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 马虎的算式</span></span><br><span class="line"><span class="comment">     * 小明是个急性子上小学的时候经常把老师写在黑板上的题目抄错了。</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 有一次老师出的题目是36 x 495 = ? 他却给抄成了396 x 45 = ?</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 但结果却很戏剧性他的答案竟然是对的  因为 36 * 495 = 396 * 45 = 17820</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 类似这样的巧合情况可能还有很多比如27 * 594 = 297 * 54</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 假设 a b c d e 代表1~9不同的5个数字注意是各不相同的数字且不含0</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 能满足形如ab * cde = adb * ce 这样的算式一共有多少种呢</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> _02_马虎的算式_枚举() &#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt; <span class="number">10</span>; a++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">1</span>; b &lt; <span class="number">10</span>; b++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (b != a) <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">1</span>; c &lt; <span class="number">10</span>; c++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (c != a &amp;&amp; c != b) <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt; <span class="number">10</span>; d++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (d != a &amp;&amp; d != b &amp;&amp; d != c) <span class="keyword">for</span> (<span class="keyword">int</span> e = <span class="number">1</span>; e &lt; <span class="number">10</span>; e++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (e != a &amp;&amp; e != b &amp;&amp; e != c &amp;&amp; e != d) &#123;</span><br><span class="line">                                <span class="keyword">if</span> ((a * <span class="number">10</span> + b) * (c * <span class="number">100</span> + d * <span class="number">10</span> + e) == (a * <span class="number">100</span> + d * <span class="number">10</span> + b) * (c * <span class="number">10</span> + e)) &#123;</span><br><span class="line">                                    res++;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 如题。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://FWj1635387072.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="algorithm" scheme="https://FWj1635387072.github.io/tags/algorithm/"/>
    
  </entry>
  
</feed>
