<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>付文杰的博客</title>
  
  <subtitle>个人博客  |  日常</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://FWj1635387072.github.io/"/>
  <updated>2019-12-02T13:34:12.355Z</updated>
  <id>https://FWj1635387072.github.io/</id>
  
  <author>
    <name>付文杰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法竞赛准备3----排序2（Java语言）</title>
    <link href="https://FWj1635387072.github.io/2019/12/02/%E6%8E%92%E5%BA%8F2/"/>
    <id>https://FWj1635387072.github.io/2019/12/02/排序2/</id>
    <published>2019-12-02T13:32:07.190Z</published>
    <updated>2019-12-02T13:34:12.355Z</updated>
    
    <content type="html"><![CDATA[<p>快排</p><a id="more"></a><h2 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h2><p>一遍单向定主元</p><p>定完主元，然后扫描，定义左右指针，如果左指针的值小于主元，左指针向右移，如果左指针的值大于主元，与右指针交换值，然后左移右指针。左指针和右指针在最后会相遇</p><p>用分治法形成了递归，一分为二，二分为四。。。</p><p>Util为自己写的一个类，自动生成随机数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快排</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortQuick</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">           <span class="keyword">int</span> q = partition(arr, left, right);</span><br><span class="line">           sortQuick(arr, left, q - <span class="number">1</span>);</span><br><span class="line">           sortQuick(arr, q + <span class="number">1</span>, right); <span class="comment">//分治法</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//一遍单向排序</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> Pmain = arr[left];</span><br><span class="line">       <span class="keyword">int</span> pleft = left + <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">int</span> pright = right;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (pleft &lt;= pright) &#123;</span><br><span class="line">           <span class="keyword">if</span> (arr[pleft] &lt;= Pmain) &#123;</span><br><span class="line">               pleft++;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               swap(arr, pleft, pright);</span><br><span class="line">               pright--;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       swap(arr, left, pright);</span><br><span class="line">       <span class="keyword">return</span> pright;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> temp = arr[a];</span><br><span class="line">       arr[a] = arr[b];</span><br><span class="line">       arr[b] = temp;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span>[] arr = Util.getIntArr(<span class="number">20</span>, <span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">           System.out.println(i);</span><br><span class="line">       &#125;</span><br><span class="line">       sortQuick(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">       System.out.println(<span class="string">"----------------------------"</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">           System.out.println(i);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快排&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://FWj1635387072.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="algorithm" scheme="https://FWj1635387072.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法竞赛准备1----排序（Java语言）</title>
    <link href="https://FWj1635387072.github.io/2019/11/26/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B1/"/>
    <id>https://FWj1635387072.github.io/2019/11/26/算法竞赛1/</id>
    <published>2019-11-26T08:39:53.567Z</published>
    <updated>2019-11-26T08:39:19.612Z</updated>
    
    <content type="html"><![CDATA[<p>四种简单的排序</p><a id="more"></a><h2 id="冒泡、选择、插入、希尔"><a href="#冒泡、选择、插入、希尔" class="headerlink" title="冒泡、选择、插入、希尔"></a>冒泡、选择、插入、希尔</h2><p>Util 为自己封装的工具类，用来生成给定的随机数组，代码见后文。</p><p>测试的时候将调用的方法改下就可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 排序 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr1 = Util.getIntArr(<span class="number">20</span>, <span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr1) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"------------------"</span>);</span><br><span class="line">        sortMaoPao(arr1);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr1) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//冒泡排序</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortMaoPao</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//选择排序</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortSelect</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> minIndex, temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            minIndex = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[minIndex])</span><br><span class="line">                    minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = arr[minIndex];</span><br><span class="line">            arr[minIndex] = arr[i];</span><br><span class="line">            arr[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入排序</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortInsert</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j, temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; arr[j]; j--) &#123;</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//希尔排序，具体可百度</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortShell</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp, k;</span><br><span class="line">        <span class="comment">//第一个循环控制次数/增量, i为增量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length / <span class="number">2</span>; i &gt; <span class="number">0</span>; i /= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">//第二个循环控制对每个组进行插入排序，j为每一组的最后一个元素的下标</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="comment">//第三个循环控制，每个组中的插入排序，k为插入排序中每一组内的下标</span></span><br><span class="line">                temp = arr[j];</span><br><span class="line">                <span class="keyword">for</span> (k = j - i; k &gt;= <span class="number">0</span> &amp;&amp; temp &lt; arr[k]; k -= i) &#123;</span><br><span class="line">                    arr[k + i] = arr[k];</span><br><span class="line">                &#125;</span><br><span class="line">                arr[k + i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     *   生成范围内的随机数组</span></span><br><span class="line"><span class="comment">     *num：数组的大小</span></span><br><span class="line"><span class="comment">     *max：数组的最大值</span></span><br><span class="line"><span class="comment">     *min：数组的最小值</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getIntArr(<span class="keyword">int</span> num, <span class="keyword">int</span> max, <span class="keyword">int</span> min) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = random.nextInt((max - min) + <span class="number">1</span>) + min;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>体现的几个思想</p><p>冒泡：交换</p><p>选择：最大、最小值</p><p>插入：空间</p><p>哈希：技巧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;四种简单的排序&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://FWj1635387072.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="algorithm" scheme="https://FWj1635387072.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法竞赛准备2----递归（Java语言）</title>
    <link href="https://FWj1635387072.github.io/2019/11/26/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B2/"/>
    <id>https://FWj1635387072.github.io/2019/11/26/算法竞赛2/</id>
    <published>2019-11-26T08:39:53.563Z</published>
    <updated>2019-11-29T07:54:50.898Z</updated>
    
    <content type="html"><![CDATA[<p>递归</p><a id="more"></a><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>找重复</p><p>找变化</p><p>找边界</p><p>分解为直接量+小规模子问题</p><p>多个小规模问题</p><p>先纵后横思想——递归的底层实现</p><h2 id="几个小案例"><a href="#几个小案例" class="headerlink" title="几个小案例"></a>几个小案例</h2><p>阶乘</p><p>1-10</p><p>对arr求和</p><p>反转字符串</p><p>斐波那契数列</p><p>辗转相除法求最大公约数</p><p>对数组进行排序</p><p>汉诺塔问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 递归 </span>&#123;</span><br><span class="line"><span class="comment">//主方法，测试用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(jc(<span class="number">5</span>));</span><br><span class="line">        print2(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"------------------"</span>);</span><br><span class="line">        <span class="keyword">int</span>[] arr = Util.getIntArr(<span class="number">6</span>, <span class="number">20</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> sum = sumArr(arr, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"------------------"</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        System.out.println(<span class="string">"------------------"</span>);</span><br><span class="line">        String str = <span class="string">"abcd"</span>;</span><br><span class="line">        System.out.println(reverse(str, str.length() - <span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"------------------"</span>);</span><br><span class="line">        System.out.println(fib(<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"------------------"</span>);</span><br><span class="line">        System.out.println(gcd(<span class="number">115</span>, <span class="number">30</span>));</span><br><span class="line">        System.out.println(<span class="string">"------------------"</span>);</span><br><span class="line">        sortArr(arr, arr.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"------------------"</span>);</span><br><span class="line">        printHanoitower(<span class="number">3</span>, <span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//阶乘</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">jc</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> i * jc(i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出两个数之间的所有数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print2</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; j)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        print2(++i, j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对arr求和</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sumArr</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> begin)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (begin == arr.length)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> arr[begin] + sumArr(arr, ++begin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反转字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">reverse</span><span class="params">(String str, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (end == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> str.charAt(<span class="number">0</span>) + <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">return</span> str.charAt(end) + reverse(str, --end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//斐波那契数列</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span> || num == <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> fib(num - <span class="number">1</span>) + fib(num - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//辗转相除法求最大公约数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> biger, <span class="keyword">int</span> smaller)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (smaller == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> biger;</span><br><span class="line">        <span class="keyword">return</span> gcd(smaller, biger % smaller);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对数组进行排序</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortArr</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        sortArr(arr, index - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> i = index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[index];</span><br><span class="line">        <span class="keyword">while</span> (i &gt; -<span class="number">1</span> &amp;&amp; temp &lt; arr[i]) &#123;</span><br><span class="line">            arr[i + <span class="number">1</span>] = arr[i];</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*  将n个盘子从sourse移动到target的路径打印</span></span><br><span class="line"><span class="comment">     *  N：初始的N个从小到大的盘子，N是最大编号</span></span><br><span class="line"><span class="comment">     *  from：原始柱子</span></span><br><span class="line"><span class="comment">     *  to：目标柱子</span></span><br><span class="line"><span class="comment">     *  help：辅助柱子</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printHanoitower</span><span class="params">(<span class="keyword">int</span> N, String from, String to, String help)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"move "</span> + N + <span class="string">" from "</span> + from + <span class="string">" to "</span> + to);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            printHanoitower(N - <span class="number">1</span>, from, help, to);</span><br><span class="line">            System.out.println(<span class="string">"move "</span> + N + <span class="string">" from "</span> + from + <span class="string">" to "</span> + to);</span><br><span class="line">            printHanoitower(N - <span class="number">1</span>, help, to, from);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;递归&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://FWj1635387072.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="algorithm" scheme="https://FWj1635387072.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>栈和队列（Java语言）</title>
    <link href="https://FWj1635387072.github.io/2019/11/24/%E6%A0%88/"/>
    <id>https://FWj1635387072.github.io/2019/11/24/栈/</id>
    <published>2019-11-24T06:51:49.383Z</published>
    <updated>2019-11-24T06:55:52.713Z</updated>
    
    <content type="html"><![CDATA[<p>介绍一下栈和队列</p><a id="more"></a><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>栈（Stack）又称堆栈，它是运算受限的线性表，仅允许在表的一端进行插入和删除操作，不允许在其他任何位置进行插入、查找和删除等操作</p><p>表中进行插入、删除的一端称为栈顶（Top）,栈顶保存的元素称为栈顶元素。相对的，表的另一端称为栈底（bottom）。</p><p>当栈中没有数据元素时称为空栈，插入元素称为进栈/入栈；删除元素叫做出栈或退栈</p><p>由于栈的插入和删除仅在栈顶进行，后进栈的元素必然先出栈，所以又把堆栈叫做后进先出表（Last In First Out,简称LIFO）</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="1、定义接口"><a href="#1、定义接口" class="headerlink" title="1、定义接口"></a>1、定义接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IStack</span>&lt;<span class="title">T</span>&gt;  </span>&#123;</span><br><span class="line">    <span class="comment">/*入栈*/</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T e)</span></span>;</span><br><span class="line">    <span class="comment">/*出栈*/</span></span><br><span class="line">    <span class="function">T <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/*是否空栈*/</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/*栈内元素个数*/</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、实现接口，并且重写"><a href="#2、实现接口，并且重写" class="headerlink" title="2、实现接口，并且重写"></a>2、实现接口，并且重写</h4><p>注意：这里继承了DoubleLinkedList为了简写代码，方便用双链表的结构。</p><p>Node也为之前写的结点类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStack</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">DouleLinkedList</span> <span class="keyword">implements</span> <span class="title">IStack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.add(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Node p = last.prep;</span><br><span class="line">        p.prep.next = last;</span><br><span class="line">        last.prep = p.prep;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> (T)p.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T)last.prep.data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、测试，略"><a href="#3、测试，略" class="headerlink" title="3、测试，略"></a>3、测试，略</h4><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>运算受限的线性表，仅允许在表的一端进行插入，而在表的另一端进行删除。</p><p>插入元素的一端称为队尾，删除元素的一端称为队首</p><p>向队尾插入元素称为入队或进队，删除元素称为出队或离队。</p><p>队列也称先进先出表(FIFO  first in first out)</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><h4 id="1、定义接口-1"><a href="#1、定义接口-1" class="headerlink" title="1、定义接口"></a>1、定义接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iqueue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/*入队*/</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enter</span><span class="params">(T element)</span></span>;</span><br><span class="line">    <span class="comment">/* 出队 */</span></span><br><span class="line">    <span class="function">T <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/* 获得队列长度*/</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/* 查看队首元素*/</span></span><br><span class="line">    <span class="function">T <span class="title">peek</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/* 是否为空*/</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、实现类"><a href="#2、实现类" class="headerlink" title="2、实现类"></a>2、实现类</h4><p>这里和栈的实现类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">DouleLinkedList</span> <span class="keyword">implements</span> <span class="title">Iqueue</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enter</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.add(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Node p = first.next;</span><br><span class="line">        first.next = p.next;</span><br><span class="line">        p.next.prep = first;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> (T)p.data;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T)first.next.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQueueTest</span> </span>&#123;</span><br><span class="line">    MyQueue&lt;Integer&gt; queue = <span class="keyword">new</span> MyQueue&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        queue.enter(<span class="number">1</span>);</span><br><span class="line">        queue.enter(<span class="number">2</span>);</span><br><span class="line">        queue.enter(<span class="number">3</span>);</span><br><span class="line">        queue.enter(<span class="number">4</span>);</span><br><span class="line">        queue.enter(<span class="number">5</span>);</span><br><span class="line">        queue.enter(<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assertions.assertThat(queue.pop()).isEqualTo(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assertions.assertThat(queue.isEmpty()).isFalse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assertions.assertThat(queue.getSize()).isEqualTo(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assertions.assertThat(queue.peek()).isEqualTo(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍一下栈和队列&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://FWj1635387072.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="DataStructure" scheme="https://FWj1635387072.github.io/tags/DataStructure/"/>
    
  </entry>
  
  <entry>
    <title>数据库基础知识总结1</title>
    <link href="https://FWj1635387072.github.io/2019/11/24/%E6%95%B0%E6%8D%AE%E5%BA%931/"/>
    <id>https://FWj1635387072.github.io/2019/11/24/数据库1/</id>
    <published>2019-11-24T06:34:55.674Z</published>
    <updated>2019-11-24T06:58:35.827Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>Xmind格式文件，下载地址为：链接: <a href="https://pan.baidu.com/s/1HCIpSmVBe3Sx9XLXnTjESA" target="_blank" rel="noopener">https://pan.baidu.com/s/1HCIpSmVBe3Sx9XLXnTjESA</a> </p><p>​                提取码: 3s78</p><p>Xmind软件，自行下载。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;



&lt;p&gt;Xmind格式文件，下载地址为：链接: &lt;a href=&quot;https://pan.baidu.com/s/1HCIpSmVBe3Sx9XLXnTjESA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https:/
      
    
    </summary>
    
    
      <category term="笔记" scheme="https://FWj1635387072.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SQL server" scheme="https://FWj1635387072.github.io/tags/SQL-server/"/>
    
  </entry>
  
  <entry>
    <title>算法面试题（Java语言）</title>
    <link href="https://FWj1635387072.github.io/2019/11/17/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://FWj1635387072.github.io/2019/11/17/面试题/</id>
    <published>2019-11-17T07:07:38.618Z</published>
    <updated>2019-11-17T07:06:58.381Z</updated>
    
    <content type="html"><![CDATA[<p>几个小的算法面试题</p><a id="more"></a><p>通过这几个小案例，可以让我们对链表更加熟悉</p><p>双行结点、快慢结点，结点的熟练使用，可以提高效率 </p><p>准备工作定义Node结点，引入junit测试，或者把test改为主方法，对方法加上static关键字</p><p>Node：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    Node next;</span><br><span class="line">    Object data;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1、对无序链表进行去重"><a href="#1、对无序链表进行去重" class="headerlink" title="1、对无序链表进行去重"></a>1、对无序链表进行去重</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveRepeat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        Node first = <span class="keyword">new</span> Node(<span class="keyword">null</span>);<span class="comment">//哑元</span></span><br><span class="line">        Node p = first;</span><br><span class="line">        <span class="comment">//将值放到链表中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            p.next = <span class="keyword">new</span> Node(arr[i]);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//进行去重</span></span><br><span class="line">        rr(first);</span><br><span class="line">        p = first.next;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(p.data);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//去重</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rr</span><span class="params">(Node first)</span> </span>&#123;</span><br><span class="line">        Node prep = first;</span><br><span class="line">        Node p = first.next;</span><br><span class="line">        HashSet hashSet = <span class="keyword">new</span> HashSet();    <span class="comment">//集合，互异性</span></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hashSet.contains(p.data)) &#123;</span><br><span class="line">                prep.next = p.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                hashSet.add(p.data);</span><br><span class="line">                prep = p;   <span class="comment">//对于prep指针，如果没有删除元素，它不需要动</span></span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如果不使用临时缓冲区，如何实现去重"><a href="#如果不使用临时缓冲区，如何实现去重" class="headerlink" title="如果不使用临时缓冲区，如何实现去重?"></a>如果不使用临时缓冲区，如何实现去重?</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveRepeat_2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        Node first = <span class="keyword">new</span> Node(<span class="keyword">null</span>);<span class="comment">//哑元</span></span><br><span class="line">        Node p = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            p.next = <span class="keyword">new</span> Node(arr[i]);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//执行去重</span></span><br><span class="line">        rr(first);</span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        p = first.next;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(p.data);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rr</span><span class="params">(Node first)</span> </span>&#123;</span><br><span class="line">        Node p = first.next;</span><br><span class="line">        Node temp = <span class="keyword">null</span>;</span><br><span class="line">        Node tempPre = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//类似于冒泡排序，拿出一个和其他比较，进行循环</span></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp = p;</span><br><span class="line">            tempPre = temp;</span><br><span class="line">            <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (temp.data == p.data) &#123;</span><br><span class="line">                    tempPre.next = temp.next;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    tempPre = temp;     <span class="comment">//难点，容易忽略</span></span><br><span class="line">                &#125;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、取出链表中第倒数k个元素"><a href="#2、取出链表中第倒数k个元素" class="headerlink" title="2、取出链表中第倒数k个元素"></a>2、取出链表中第倒数k个元素</h2><p>双行指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getLastK</span><span class="params">(Node first, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">       Node p = first;</span><br><span class="line">       Node pNext = p;</span><br><span class="line">       <span class="comment">//循环k次，让pNext到达第k个元素，然后p和pNext同时向后走</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">           pNext = pNext.next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span>(pNext != <span class="keyword">null</span>)&#123;</span><br><span class="line">           pNext = pNext.next;</span><br><span class="line">           p = p.next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> p.data;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="3、对于单向链表，给定某个元素，删除该元素，假定只能操作这一个元素"><a href="#3、对于单向链表，给定某个元素，删除该元素，假定只能操作这一个元素" class="headerlink" title="3、对于单向链表，给定某个元素，删除该元素，假定只能操作这一个元素"></a>3、对于单向链表，给定某个元素，删除该元素，假定只能操作这一个元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(Node p)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果给定的结点是最后一个结点，那么返回false</span></span><br><span class="line">        <span class="keyword">if</span> (p.next == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//如果不是，复制下一个结点数据到该节点，跳过下一个结点</span></span><br><span class="line">        p.data = p.next.data;</span><br><span class="line">        p.next = p.next.next;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4、以给定x值为基准，小于x的在大于等于x的后面（不开辟新结点）"><a href="#4、以给定x值为基准，小于x的在大于等于x的后面（不开辟新结点）" class="headerlink" title="4、以给定x值为基准，小于x的在大于等于x的后面（不开辟新结点）"></a>4、以给定x值为基准，小于x的在大于等于x的后面（不开辟新结点）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CutList</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        Node first = <span class="keyword">new</span> Node(<span class="keyword">null</span>);</span><br><span class="line">        Node p = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            p.next = <span class="keyword">new</span> Node(arr[i]);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        p = first.next;</span><br><span class="line">        p = cutList(p, <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(p.data + <span class="string">"   "</span>);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">* 定义两个链表，左侧和右侧，左侧存放比x小的值，右侧存放比x大的值</span></span><br><span class="line"><span class="comment">    * 最后将两个链表合二为一</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">cutList</span><span class="params">(Node head, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        Node Lfirst = <span class="keyword">null</span>;</span><br><span class="line">        Node Llast = <span class="keyword">null</span>;</span><br><span class="line">        Node Rfirst = <span class="keyword">null</span>;</span><br><span class="line">        Node Rlast = <span class="keyword">null</span>;</span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="keyword">int</span>) p.data &lt; x) &#123;<span class="comment">//判断元素入那个链表</span></span><br><span class="line">                <span class="keyword">if</span> (Lfirst == <span class="keyword">null</span>) &#123; </span><br><span class="line">                    Lfirst = p;</span><br><span class="line">                    Llast = p;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Llast.next = p;</span><br><span class="line">                    Llast = Llast.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (Rfirst == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Rfirst = p;</span><br><span class="line">                    Rlast = p;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Rlast.next = p;</span><br><span class="line">                    Rlast = Rlast.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//两个链表合二为一，考虑链表是否为空</span></span><br><span class="line">        Rlast.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (Lfirst == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Rfirst;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Llast.next = Rfirst;</span><br><span class="line">            <span class="keyword">return</span> Lfirst;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、加法"><a href="#5、加法" class="headerlink" title="5、加法"></a>5、加法</h2><p>用两个链表来表示整数，每个结点表示一个数位</p><p>这些数位是反向存放的，也就是各位排在结点的首位，求链表的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlusNum</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node a = <span class="keyword">new</span> Node(<span class="number">1</span>);</span><br><span class="line">        a.next = <span class="keyword">new</span> Node(<span class="number">3</span>);</span><br><span class="line">        a.next.next = <span class="keyword">new</span> Node(<span class="number">3</span>);</span><br><span class="line">        Node b = <span class="keyword">new</span> Node(<span class="number">2</span>);</span><br><span class="line">        Node res = plus(a, b, <span class="number">0</span>);</span><br><span class="line">        Node p = res;</span><br><span class="line">        <span class="keyword">while</span> (res != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(res.data);</span><br><span class="line">            res = res.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//递归的思想</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">plus</span><span class="params">(Node a, Node b, <span class="keyword">int</span> add)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="keyword">null</span> &amp;&amp; b == <span class="keyword">null</span> &amp;&amp; add == <span class="number">0</span>) <span class="comment">//判断是否要继续进行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = add;<span class="comment">//将该位上的数进行相加</span></span><br><span class="line">        <span class="keyword">if</span> (a != <span class="keyword">null</span>) </span><br><span class="line">            sum += (<span class="keyword">int</span>) a.data;</span><br><span class="line">        <span class="keyword">if</span> (b != <span class="keyword">null</span>) </span><br><span class="line">            sum += (<span class="keyword">int</span>) b.data;</span><br><span class="line">        Node temp = <span class="keyword">new</span> Node(sum % <span class="number">10</span>); <span class="comment">//保留下的数</span></span><br><span class="line">        temp.next = plus(a == <span class="keyword">null</span> ? <span class="keyword">null</span> : a.next,</span><br><span class="line">                b == <span class="keyword">null</span> ? <span class="keyword">null</span> : b.next,</span><br><span class="line">                sum &gt;= <span class="number">10</span> ? <span class="number">1</span> : <span class="number">0</span>); <span class="comment">//递归的体现，向下一位进行</span></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个链表如果正向存放，如何写？</p><p>先不考虑长度不一致，补齐</p><h2 id="6、返回环链表中环路的开头结点"><a href="#6、返回环链表中环路的开头结点" class="headerlink" title="6、返回环链表中环路的开头结点"></a>6、返回环链表中环路的开头结点</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 给定一个环链表，返回环路的头结点</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 环链表：</span></span><br><span class="line"><span class="comment">*   链表中某个元素的next指向在它前面出现过的结点</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckCircleNode</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node first = <span class="keyword">new</span> Node(<span class="number">10</span>);</span><br><span class="line">        first.next = <span class="keyword">new</span> Node(<span class="number">11</span>);</span><br><span class="line">        first.next.next = <span class="keyword">new</span> Node(<span class="number">12</span>);</span><br><span class="line">        first.next.next.next = <span class="keyword">new</span> Node(<span class="number">13</span>);</span><br><span class="line">        first.next.next.next.next = first.next;</span><br><span class="line">        Node p = checkCircleNode(first);</span><br><span class="line">        System.out.println(p.data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用哈希来判断是否重复，一般的算法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">checkCircleNode</span><span class="params">(Node first)</span> </span>&#123;</span><br><span class="line">        Node p = first;</span><br><span class="line">        HashSet h = <span class="keyword">new</span> HashSet();</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (h.contains(p))</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                h.add(p);</span><br><span class="line">                p = p.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//更有效的方法：使用快慢双指针，测试略</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">checkCircle</span><span class="params">(Node first)</span> </span>&#123;</span><br><span class="line">        Node slow = first;</span><br><span class="line">        Node fast = first;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span> (slow == fast)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="keyword">null</span> || fast.next == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Node p = first;</span><br><span class="line">        <span class="keyword">while</span> (slow != p) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、判断是否是回文链表"><a href="#7、判断是否是回文链表" class="headerlink" title="7、判断是否是回文链表"></a>7、判断是否是回文链表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Is_HuiWen</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Node first = <span class="keyword">new</span> Node(<span class="string">"a"</span>);</span><br><span class="line">        first.next = <span class="keyword">new</span> Node(<span class="string">"b"</span>);</span><br><span class="line">        first.next.next = <span class="keyword">new</span> Node(<span class="string">"c"</span>);</span><br><span class="line">        first.next.next.next = <span class="keyword">new</span> Node(<span class="string">"d"</span>);</span><br><span class="line">        first.next.next.next.next = <span class="keyword">new</span> Node(<span class="string">"c"</span>);</span><br><span class="line">        first.next.next.next.next.next = <span class="keyword">new</span> Node(<span class="string">"b"</span>);</span><br><span class="line">        first.next.next.next.next.next.next = <span class="keyword">new</span> Node(<span class="string">"a"</span>);</span><br><span class="line">        System.out.println(isHuiWen(first));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用快慢指针判断一半元素，入栈一半</span></span><br><span class="line">    <span class="comment">//如果是奇数链表，慢指针向后移动一位</span></span><br><span class="line">    <span class="comment">//然后慢指针与栈中元素比较</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHuiWen</span><span class="params">(Node first)</span> </span>&#123;</span><br><span class="line">        Node s = first;</span><br><span class="line">        Node f = first;</span><br><span class="line">        <span class="keyword">boolean</span> isOdd = <span class="keyword">false</span>;</span><br><span class="line">        Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;String&gt;();</span><br><span class="line">        <span class="keyword">while</span> (f != <span class="keyword">null</span> &amp;&amp; f.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.add((String)s.data);</span><br><span class="line">            s = s.next;</span><br><span class="line">            f = f.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (f != <span class="keyword">null</span>)</span><br><span class="line">            isOdd = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (isOdd)</span><br><span class="line">            s = s.next;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stack.pop() != s.data) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            s = s.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几个小的算法面试题&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://FWj1635387072.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="DataStructure" scheme="https://FWj1635387072.github.io/tags/DataStructure/"/>
    
  </entry>
  
  <entry>
    <title>数据结构中的双链表以及链表的一个使用实例（Java语言）</title>
    <link href="https://FWj1635387072.github.io/2019/11/14/%E5%8F%8C%E9%93%BE%E8%A1%A8/"/>
    <id>https://FWj1635387072.github.io/2019/11/14/双链表/</id>
    <published>2019-11-14T11:37:24.287Z</published>
    <updated>2019-11-14T11:38:39.703Z</updated>
    
    <content type="html"><![CDATA[<p>Java语言实现双链表以及一个实例</p><a id="more"></a><p>这部分使用了泛型来定义传入参数，使链表的使用更具普遍性。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DouleLinkedList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">MyList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ListNode&lt;T&gt; first = <span class="keyword">new</span> ListNode&lt;T&gt;(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">private</span> ListNode&lt;T&gt; last = <span class="keyword">new</span> ListNode&lt;T&gt;(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> ListNode&lt;T&gt; p = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//初始化链表，定义首结点和尾结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DouleLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        first.next = last;</span><br><span class="line">        last.prep = first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加元素，在尾结点之前，插入元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        ListNode&lt;T&gt; newNode = <span class="keyword">new</span> ListNode&lt;T&gt;(element);</span><br><span class="line">        last.prep.next = newNode;</span><br><span class="line">        newNode.prep = last.prep;</span><br><span class="line">        newNode.next = last;</span><br><span class="line">        last.prep = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = contains(element);</span><br><span class="line">        delete(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照索引删除元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        p = first.next;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == index) &#123;</span><br><span class="line">                p.prep.next = p.next;</span><br><span class="line">                p.next.prep = p.prep;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改指定索引上的元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> index, T newElement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        p = first.next;</span><br><span class="line">        <span class="keyword">while</span> (p != last) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == index)</span><br><span class="line">                p.data = newElement;</span><br><span class="line">            p = p.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回指定索引上的元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">at</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        p = first.next;</span><br><span class="line">        <span class="keyword">while</span> (p != last) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == index)</span><br><span class="line">                <span class="keyword">return</span> p.data;</span><br><span class="line">            p = p.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//迭代指针</span></span><br><span class="line">    <span class="keyword">private</span> ListNode&lt;T&gt; now = first.next;</span><br><span class="line">    <span class="comment">//是否有下一个元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> now.next != last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回现在迭代指针指定的元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> now.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">contains</span><span class="params">(Object element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        p = first.next;</span><br><span class="line">        <span class="keyword">while</span> (p != last) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element.equals(p.data))</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            p = p.next;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写toString（）方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);</span><br><span class="line">        p = first.next;</span><br><span class="line">        <span class="keyword">while</span> (p != last) &#123;</span><br><span class="line">            sb.append(p.data + (p.next != last ? <span class="string">","</span> : <span class="string">"]"</span>));</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DouleLinkedListTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DouleLinkedList list = <span class="keyword">new</span> DouleLinkedList();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.add(<span class="string">"a"</span>);</span><br><span class="line">        list.add(<span class="string">"b"</span>);</span><br><span class="line">        list.add(<span class="string">"c"</span>);</span><br><span class="line">        list.add(<span class="string">"d"</span>);</span><br><span class="line">        list.add(<span class="string">"e"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.add(<span class="string">"f"</span>);</span><br><span class="line">        Assertions.assertThat(list.toString()).isEqualTo(<span class="string">"[a,b,c,d,e,f]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.delete(<span class="string">"e"</span>);</span><br><span class="line">        Assertions.assertThat(list.toString()).isEqualTo(<span class="string">"[a,b,c,d]"</span>);</span><br><span class="line">        list.add(<span class="string">"e"</span>);</span><br><span class="line">        Assertions.assertThat(list.toString()).isEqualTo(<span class="string">"[a,b,c,d,e]"</span>)；</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.delete(<span class="number">1</span>);</span><br><span class="line">        Assertions.assertThat(list.toString()).isEqualTo(<span class="string">"[a,c,d,e]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.update(<span class="number">0</span>, <span class="string">"update"</span>);</span><br><span class="line">        Assertions.assertThat(list.toString()).isEqualTo(<span class="string">"[update,b,c,d,e]"</span>);</span><br><span class="line">        list.update(<span class="number">4</span>, <span class="string">"update"</span>);</span><br><span class="line">        Assertions.assertThat(list.toString()).isEqualTo(<span class="string">"[update,b,c,d,update]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">at</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assertions.assertThat(list.at(<span class="number">0</span>)).isEqualTo(<span class="string">"a"</span>);</span><br><span class="line">        Assertions.assertThat(list.at(<span class="number">10</span>)).isEqualTo(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contains</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assertions.assertThat(list.contains(<span class="string">"a"</span>)).isEqualTo(<span class="number">0</span>);</span><br><span class="line">        Assertions.assertThat(list.contains(<span class="string">"ssss"</span>)).isEqualTo(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实例：桶排序（哈希排序）"><a href="#实例：桶排序（哈希排序）" class="headerlink" title="实例：桶排序（哈希排序）"></a>实例：桶排序（哈希排序）</h2><p>适用于序列比较均匀的情况，否则会很浪费空间</p><p>桶排序的瓶颈是桶数量的选择</p><p>比较稳定的排序算法</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BarrelSort</span> </span>&#123;</span><br><span class="line">  <span class="comment">//初始化值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] arr;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">20</span>];</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = r.nextInt(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">"  "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(arr);</span><br><span class="line">        System.out.println(<span class="string">"----------------------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">"  "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//hash函数返回桶的下标   e*len/max+1</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> element, <span class="keyword">int</span> len, <span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (element * len) / (max + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取最大值和数组长度</span></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>, len = arr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; max)</span><br><span class="line">                max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义桶</span></span><br><span class="line">        DoubleLinkedList[] barrel = <span class="keyword">new</span> DoubleLinkedList[len];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = hash(arr[i], len, max);</span><br><span class="line">            <span class="keyword">if</span> (barrel[index] == <span class="keyword">null</span>) &#123; <span class="comment">//如果桶是空桶，那么创建桶，不是插入数据</span></span><br><span class="line">                barrel[index] = <span class="keyword">new</span> DoubleLinkedList();</span><br><span class="line">                barrel[index].insert(arr[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                barrel[index].insert(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> arrIndex = <span class="number">0</span>;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">for</span> (DoubleLinkedList d : barrel) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Node p = d.first.next;</span><br><span class="line">                <span class="keyword">while</span> (p != d.last) &#123;</span><br><span class="line">                    System.out.print(p.data + <span class="string">"  "</span>);</span><br><span class="line">                    arr[arrIndex++] = p.data;</span><br><span class="line">                    p = p.next;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkedList</span> </span>&#123;</span><br><span class="line">    Node first = <span class="keyword">new</span> Node();</span><br><span class="line">    Node last = <span class="keyword">new</span> Node();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DoubleLinkedList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        last.prep = first;</span><br><span class="line">        first.next = last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插入元素，这一块容易出错</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> element)</span></span>&#123;</span><br><span class="line">        Node newNode = <span class="keyword">new</span> Node(element);</span><br><span class="line">        <span class="keyword">if</span> (first.next == last)&#123;</span><br><span class="line">            first.next = newNode;</span><br><span class="line">            newNode.prep = first;</span><br><span class="line">            newNode.next = last;</span><br><span class="line">            last.prep = newNode;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            Node p = first.next;</span><br><span class="line">            <span class="keyword">while</span>(p != last)&#123;</span><br><span class="line">                <span class="keyword">if</span>(element &lt;= p.data)&#123;</span><br><span class="line">                    p.prep.next = newNode;</span><br><span class="line">                    newNode.prep = p.prep;</span><br><span class="line">                    newNode.next = p;</span><br><span class="line">                    p.prep = newNode;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                p = p.next;</span><br><span class="line">            &#125;</span><br><span class="line">            last.prep.next = newNode;</span><br><span class="line">            newNode.prep = last.prep;</span><br><span class="line">            newNode.next = last;</span><br><span class="line">            last.prep = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Node next;</span><br><span class="line">    Node prep;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java语言实现双链表以及一个实例&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://FWj1635387072.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="DataStructure" scheme="https://FWj1635387072.github.io/tags/DataStructure/"/>
    
  </entry>
  
  <entry>
    <title>SQL server中的完整性及触发器</title>
    <link href="https://FWj1635387072.github.io/2019/11/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%8C%E6%95%B4%E6%80%A7/"/>
    <id>https://FWj1635387072.github.io/2019/11/12/数据库完整性/</id>
    <published>2019-11-12T15:26:33.688Z</published>
    <updated>2019-11-12T15:46:03.439Z</updated>
    
    <content type="html"><![CDATA[<p>SQL server中完整性约束及触发器</p><a id="more"></a><p>数据库完整性指数据的正确性和相容性</p><p>​    正确：数据是符合现实世界语义、反应当前实际状况</p><p>​    相容：数据库同一对象在不同关系表中的数据是符合逻辑的</p><h2 id="实体完整性"><a href="#实体完整性" class="headerlink" title="实体完整性"></a>实体完整性</h2><p>实体完整性有primary key定义，包括列级和表级完整性。</p><p>保证主键唯一、非空    </p><p>当用户对基本表插入一条记录或者对主码列进行更行时，RDBMS将自动对实体完整性进行检查：        </p><p>​    1、检查主码是否唯一，如果不唯一则拒绝插入和修改</p><p>​    2、检查主码的各个属性是否为空，只要有一个为空则拒绝插入和修改</p><p>检查主码值是否唯一的一种方法是进行全表扫描，依次判断表中的每一条记录的主码值是否与插入记录的主</p><p>码一致</p><p>全表扫描很费时，为避免进行全表扫描，RDBMS一般都在主码上自动建立一个索引，如下图的B+树，通过索引查找可大大提高效率    </p><h2 id="参照完整性"><a href="#参照完整性" class="headerlink" title="参照完整性"></a>参照完整性</h2><p>参照完整性用foreign key进行定义，用references表示参考哪一个表的哪一个属性</p><table><thead><tr><th align="center">被参照表（student）</th><th align="center">参照表（sc）</th><th align="center">违约处理</th></tr></thead><tbody><tr><td align="center"></td><td align="center">插入元组</td><td align="center">拒绝</td></tr><tr><td align="center"></td><td align="center">修改外码值</td><td align="center">拒绝</td></tr><tr><td align="center">删除元组</td><td align="center"></td><td align="center">拒绝/级联/设置为空/设置为默认值</td></tr><tr><td align="center">修改主码值</td><td align="center"></td><td align="center">拒绝/级联/设置为空/设置为默认值</td></tr></tbody></table><ol><li><p>向sc中插入元组，如果不满足参照完整性，拒绝执行</p></li><li><p>修改sc的外码值，如果不满足参照完整性，拒绝执行</p></li><li><p>删除student表中的元组，如果sc中的数据不满足参照完整性，则执行拒绝/级联/设置为空/设置为默认值，由用户定义</p></li><li><p>修改student表中的主码值，导致sc中的数据不满足参照完整性，则执行拒绝/级联/设置为空/设置为默认值，由用户定义</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--当对student表中的sno进行删除时，级联删除sc表中的数据</span></span><br><span class="line"><span class="comment">--对sno进行修改时，级联更新sc表中的数据</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> sc</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> FK_student_sno <span class="comment">--外键（约束）命名</span></span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(sno) <span class="keyword">references</span> student(sno)<span class="comment">--定义外键</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span><span class="comment">--级联删除</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span><span class="comment">--级联更新</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--对course表中的cno进行删除时，拒绝执行</span></span><br><span class="line"><span class="comment">--对cno进行修改时，级联修改</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> sc</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> FK_course_cno</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(cno) <span class="keyword">references</span> course(cno)</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">no</span> <span class="keyword">action</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--sql server中还支持set null和set default</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1(</span><br><span class="line">a <span class="built_in">int</span> primary <span class="keyword">key</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t2</span><br><span class="line">(</span><br><span class="line">a1 <span class="built_in">int</span>,</span><br><span class="line">b1 <span class="built_in">int</span> <span class="keyword">default</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t3</span><br><span class="line">(</span><br><span class="line">b <span class="built_in">int</span> primary <span class="keyword">key</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">--给t2增加名为FK_t1_a的外键，参考t1中的a</span></span><br><span class="line"><span class="comment">--给</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> t2 </span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> FK_t1_a</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(a1) <span class="keyword">references</span> t1(a)</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">set</span> <span class="literal">null</span>,  <span class="comment">--两个外键的分界</span></span><br><span class="line"><span class="keyword">constraint</span> FK_t1_b<span class="comment">--外键命名</span></span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(b1) <span class="keyword">references</span> t3(b)</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">set</span> <span class="keyword">default</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--向t1，t2，t3表中添加数据，并验证修改t3表，t2表中数据是否改变</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t3 <span class="keyword">values</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2 <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> t3 <span class="keyword">set</span> b = <span class="number">10</span> <span class="keyword">where</span> b = <span class="number">2</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t2</span><br><span class="line"><span class="comment">--可以看到t2表中的b1变为20</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t1</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t2</span><br><span class="line"><span class="comment">--可以看到t2表中的a1变为了null</span></span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--注意外键引用，如果被参考的属性为主码，那么主码中有几个属性，定义参考时就要有几个属性</span></span><br><span class="line"><span class="comment">--例子：</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tt1(</span><br><span class="line">a <span class="built_in">int</span>,</span><br><span class="line">b <span class="built_in">int</span>,</span><br><span class="line">c <span class="built_in">int</span>,</span><br><span class="line">primary <span class="keyword">key</span>(a,b)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tt2(</span><br><span class="line">a <span class="built_in">int</span> ,</span><br><span class="line">b <span class="built_in">int</span> ,</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(a,b) <span class="keyword">references</span> tt1(a,b)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">--错误示范：</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tt1(</span><br><span class="line">  a <span class="built_in">int</span>,</span><br><span class="line">  b <span class="built_in">int</span>,</span><br><span class="line">  c <span class="built_in">int</span>,</span><br><span class="line">  primary <span class="keyword">key</span>(a,b)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tt2(</span><br><span class="line">  a <span class="built_in">int</span> ,</span><br><span class="line">  b <span class="built_in">int</span> ,</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(a）<span class="keyword">references</span> tt1(a),</span><br><span class="line">  <span class="keyword">foreign</span> <span class="keyword">key</span>(a) <span class="keyword">references</span> tt1(b)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>触发器是用户定义在关系表（基本表）上的一类由<strong>事件</strong>驱动的特殊过程</p><p>就本质而言，触发器也是一种存储过程，它在特定语言事件发生时自动执行</p><p>触发器保存在数据库服务器上，与约束类似，但比约束灵活，可用来进行更复杂的检查和操作</p><p>触发器的使用过程：定义、激活、删除</p><h3 id="SQL-server中触发器（主要为DML触发器）"><a href="#SQL-server中触发器（主要为DML触发器）" class="headerlink" title="SQL server中触发器（主要为DML触发器）"></a>SQL server中触发器（主要为DML触发器）</h3><h4 id="After触发器"><a href="#After触发器" class="headerlink" title="After触发器"></a>After触发器</h4><p>​    触发事件执行完激活执行，主要用于记录变更后的检查或处理。</p><p>​    删除：SQL server 遇到delete语句，将要删的元组放到一个临时表（deleted）中，然后删除数据表中数据，执行触发事件，然后删掉临时表。</p><p>​    修改：SQL server遇到update语句，将要修改的元组放到一个临时表（inserted）中，修改后的元组放到另一个临时表（deleted）中，然后修改数据表中的数据，执行触发事件，最后删掉临时表（inserted、deleted）</p><p>​    增加与上面过程类似，不再赘叙。</p><h4 id="Instead-of触发器"><a href="#Instead-of触发器" class="headerlink" title="Instead of触发器"></a>Instead of触发器</h4><p>​    触发事件执行前激活执行</p><p>​    与After触发器的区别在于：<br>​        它不执行原来sql中的操作，而是执行触发事件中的sql语句</p><p>一般触发器不能作用在视图上，但是sql server中触发器可以作用在视图上。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> [ schema_name . ]trigger_name </span><br><span class="line"><span class="keyword">ON</span> &#123; <span class="keyword">table</span> | <span class="keyword">view</span> &#125; </span><br><span class="line">&#123; <span class="keyword">FOR</span> | <span class="keyword">AFTER</span> | INSTEAD <span class="keyword">OF</span> &#125; <span class="comment">--for after代表都是after触发器</span></span><br><span class="line">&#123; [ <span class="keyword">INSERT</span> ] [ , ] [ <span class="keyword">UPDATE</span> ] [ , ] [ <span class="keyword">DELETE</span> ] &#125; </span><br><span class="line"><span class="keyword">AS</span> &#123; sql_statement  [ ; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">--例子1：在插入一个学生后，查询全部学生</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student (</span><br><span class="line">sno <span class="built_in">varchar</span>(<span class="number">10</span>),</span><br><span class="line">sname <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">sage <span class="built_in">int</span>,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="string">'0001'</span>,<span class="string">'aaa'</span>,<span class="number">19</span>),</span><br><span class="line">(<span class="string">'0002'</span>,<span class="string">'bbb'</span>,<span class="number">20</span>),(<span class="string">'0003'</span>,<span class="string">'ccc'</span>,<span class="number">21</span>)</span><br><span class="line"><span class="comment">--以上为创建基本对象</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> t1<span class="comment">--创建触发器</span></span><br><span class="line"><span class="keyword">on</span> student <span class="keyword">after</span> <span class="keyword">insert</span><span class="comment">--在学生表上定义after触发器，在insert语句后执行</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student<span class="comment">--触发后执行的语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--测试</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="string">'0004'</span>,<span class="string">'ddd'</span>,<span class="number">22</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--例子2：对sc表中的成绩进行修改时，如果分数增加10%，</span></span><br><span class="line"><span class="comment">--则将次操作记录到另一个表SC_U(sno、cno、oldGrade、newGrade)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> sc</span><br><span class="line">(</span><br><span class="line">  sno <span class="built_in">varchar</span>(<span class="number">10</span>),</span><br><span class="line"> cno <span class="built_in">varchar</span>(<span class="number">10</span>),</span><br><span class="line">  grade <span class="built_in">int</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sc <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">90</span>),</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">80</span>),</span><br><span class="line">(<span class="number">1</span>,<span class="number">3</span>,<span class="number">70</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> sc_u(</span><br><span class="line">sno <span class="built_in">varchar</span>(<span class="number">10</span>),</span><br><span class="line">cno <span class="built_in">varchar</span>(<span class="number">10</span>),</span><br><span class="line">oldGrade <span class="built_in">int</span>,</span><br><span class="line">newGrade <span class="built_in">int</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-------------以下创建After触发器</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> t2<span class="comment">--定义触发器的名称</span></span><br><span class="line"><span class="keyword">on</span> sc <span class="keyword">after</span> <span class="keyword">update</span><span class="comment">--在那个表上，触发类型</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> @<span class="keyword">old</span> <span class="built_in">int</span>,@<span class="keyword">new</span> <span class="built_in">int</span>,@sno <span class="built_in">varchar</span>(<span class="number">10</span>),@cno <span class="built_in">varchar</span>(<span class="number">10</span>)<span class="comment">--定义局部变量</span></span><br><span class="line"><span class="keyword">set</span> @<span class="keyword">old</span> = (<span class="keyword">select</span> grade <span class="keyword">from</span> deleted)<span class="comment">--为定义的变量设置值</span></span><br><span class="line"><span class="keyword">set</span> @<span class="keyword">new</span> = (<span class="keyword">select</span> grade <span class="keyword">from</span> inserted)</span><br><span class="line"><span class="keyword">set</span> @sno = (<span class="keyword">select</span> sno <span class="keyword">from</span> deleted)</span><br><span class="line"><span class="keyword">set</span> @cno = (<span class="keyword">select</span> cno <span class="keyword">from</span> deleted)</span><br><span class="line"><span class="keyword">if</span> @<span class="keyword">new</span> &gt;= <span class="number">1.1</span> * @<span class="keyword">old</span><span class="comment">--进行判断，然后执行语句</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sc_u <span class="keyword">values</span>(@sno,@cno,@<span class="keyword">old</span>,@<span class="keyword">new</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--测试</span></span><br><span class="line"><span class="keyword">update</span> sc <span class="keyword">set</span> grade = <span class="number">1.2</span> * grade <span class="keyword">where</span> cno = <span class="number">2</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SQL server中完整性约束及触发器&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://FWj1635387072.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SQL server" scheme="https://FWj1635387072.github.io/tags/SQL-server/"/>
    
  </entry>
  
  <entry>
    <title>数据结构中的单链表（Java语言）</title>
    <link href="https://FWj1635387072.github.io/2019/11/10/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    <id>https://FWj1635387072.github.io/2019/11/10/单链表/</id>
    <published>2019-11-10T08:37:23.329Z</published>
    <updated>2019-11-10T08:43:45.556Z</updated>
    
    <content type="html"><![CDATA[<p>Java语言实现单链表</p><a id="more"></a><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>单向链表</strong>（又名单链表、线性链表）是<a href="https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8" target="_blank" rel="noopener">链表</a>的一种，其特点是链表的链接方向是单向的，对链表的访问要通过从头部开始，依序往下读取。</p><p>一个单向链表的节点被分成两个部分。第一个部分保存或者显示关于节点的信息，第二个部分存储下一个节点的地址。单向链表只可向一个方向遍历。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>由于单链表是线性结构的一种，我们可以令其继承上次写的MyList接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList</span> <span class="keyword">implements</span> <span class="title">MyList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ListNode first;     <span class="comment">//声明头节点</span></span><br><span class="line">    <span class="keyword">private</span> ListNode last;      <span class="comment">//声明尾节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;       <span class="comment">//确定链表的大小</span></span><br><span class="line">    <span class="keyword">private</span> ListNode p;     <span class="comment">//定义指针p</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//往链表后增加元素，注意边界值，第一个元素的添加</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (first == <span class="keyword">null</span>) &#123;</span><br><span class="line">            first = <span class="keyword">new</span> ListNode(element);</span><br><span class="line">            last = first;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            last.next = <span class="keyword">new</span> ListNode(element);</span><br><span class="line">            last = last.next;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除链表中的某个元素，调用其他方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Object element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = contains(element);</span><br><span class="line">        delete(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除元素，注意边界值，第一个元素和最后一个元素。这个方法值得思考</span></span><br><span class="line">    <span class="comment">//双节点的思想，如果没有size，那么每次删除都要遍历</span></span><br><span class="line">    <span class="comment">//删除可以考虑将其进行简化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;<span class="comment">//考虑范围</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;<span class="comment">//考虑首节点</span></span><br><span class="line">            first = first.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == size - <span class="number">1</span>) &#123;<span class="comment">//考虑尾节点</span></span><br><span class="line">           p = first;</span><br><span class="line">            ListNode prep = p;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; size - <span class="number">1</span>)&#123;</span><br><span class="line">                i++;</span><br><span class="line">                prep = p;</span><br><span class="line">                p = p.next;</span><br><span class="line">            &#125;</span><br><span class="line">            prep.next = <span class="keyword">null</span>;</span><br><span class="line">            last = p;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//考虑中间节点</span></span><br><span class="line">            p = first;</span><br><span class="line">            ListNode prep = p;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; index) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                prep = p;</span><br><span class="line">                p = p.next;</span><br><span class="line">            &#125;</span><br><span class="line">            prep.next = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改指定索引的值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> index, Object newElement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        p = first;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; index) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.data = newElement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询指定索引上的元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">at</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        p = first;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; index) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询包含该元素的索引</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">contains</span><span class="params">(Object element)</span> </span>&#123;</span><br><span class="line">        p = first;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element.equals(p.data)) &#123;</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//往指定索引后添加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index,Object element)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        p = first;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; index)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            add(element);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            ListNode temp = p.next;</span><br><span class="line">            p.next = <span class="keyword">new</span> ListNode(element);</span><br><span class="line">            p.next.next = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写toString()方法，遍历方式与列表注意区分</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);</span><br><span class="line">        p = first;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sb.append(p.data);</span><br><span class="line">            <span class="keyword">if</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><h3 id="指针的移动"><a href="#指针的移动" class="headerlink" title="指针的移动"></a>指针的移动</h3><p>p为定义的指针，将首节点赋予给它，然后通过while语句将其逐个往下遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//查询包含该元素的索引</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">contains</span><span class="params">(Object element)</span> </span>&#123;</span><br><span class="line">    p = first;<span class="comment">//将首节点赋予给指针p</span></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (element.equals(p.data)) &#123;<span class="comment">//判断该节点的元素是否与传入的一致</span></span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p.next;<span class="comment">//指针移到下一个元素</span></span><br><span class="line">        index++;<span class="comment">//计数器加一</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="预指针的使用"><a href="#预指针的使用" class="headerlink" title="预指针的使用"></a>预指针的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> p = first;</span><br><span class="line">ListNode prep = p;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; size - <span class="number">1</span>)&#123;</span><br><span class="line">    i++;</span><br><span class="line">    prep = p;</span><br><span class="line">    p = p.next;</span><br><span class="line">&#125;</span><br><span class="line">prep.next = <span class="keyword">null</span>;</span><br><span class="line">last = p;</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5CFWJ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1573374795390.png" alt="1573374795390"></p><p>当删除元素时，我们需要将要删除的结点的前一个结点与后一个结点建立联系，但是由于我们只能从一个结点获取它的下一个结点，所以我们定义一个“预指针”，这样就可以同时获得要删除结点的前一个结点和后一个结点。</p><p>设置要删除节点前一个节点的next为后一个节点。这样在下一次遍历的时候跳过了要删除的节点，实现了我们删除该节点的目的。</p><h3 id="新增了插入，在指定索引后添加元素"><a href="#新增了插入，在指定索引后添加元素" class="headerlink" title="新增了插入，在指定索引后添加元素"></a>新增了插入，在指定索引后添加元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, Object element)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    p = first;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; index) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        add(element);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ListNode temp = p.next;</span><br><span class="line">        p.next = <span class="keyword">new</span> ListNode(element);</span><br><span class="line">        p.next.next = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    思考：在列表中插入一个数据该怎么做？</p><p>​            找到对应的元素，之后的所有元素向后一位，在对应元素的后面插入元素</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>测试时要重视测试边界。边界最容易出问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedListTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleLinkedList sl = <span class="keyword">new</span> SingleLinkedList();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        sl.add(<span class="string">"1"</span>);</span><br><span class="line">        sl.add(<span class="string">"2"</span>);</span><br><span class="line">        sl.add(<span class="string">"3"</span>);</span><br><span class="line">        sl.add(<span class="string">"4"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sl.add(<span class="string">"5"</span>);</span><br><span class="line">        Assertions.assertThat(sl.toString()).isEqualTo(<span class="string">"[1,2,3,4,5]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sl.delete(<span class="string">"4"</span>);</span><br><span class="line">        Assertions.assertThat(sl.toString()).isEqualTo(<span class="string">"[1,2,3]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sl.delete(<span class="number">3</span>);</span><br><span class="line">        Assertions.assertThat(sl.toString()).isEqualTo(<span class="string">"[1,2,3]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java语言实现单链表&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://FWj1635387072.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="DataStructure" scheme="https://FWj1635387072.github.io/tags/DataStructure/"/>
    
  </entry>
  
  <entry>
    <title>数据结构中的线性表Ⅱ（Java语言）</title>
    <link href="https://FWj1635387072.github.io/2019/11/10/%E5%88%97%E8%A1%A8%E2%85%A1/"/>
    <id>https://FWj1635387072.github.io/2019/11/10/列表Ⅱ/</id>
    <published>2019-11-10T07:32:11.103Z</published>
    <updated>2019-11-10T07:46:11.666Z</updated>
    
    <content type="html"><![CDATA[<p>Java语言实现线性表Ⅱ</p><a id="more"></a><p>上次关于线性表的实现是有缺陷的，今天将其稍作改进</p><h2 id="索引部分（数组下标）"><a href="#索引部分（数组下标）" class="headerlink" title="索引部分（数组下标）"></a>索引部分（数组下标）</h2><p>当对线性表进行修改、删除、查询时可能会遇到这种情况，传入的索引不在我们的数组下标范围内。</p><p>比如说：我的数组下标是0-19，我传入了20，考虑到这种情况，我们对其进行代码进行补充</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询目标索引上的元素</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">at</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> array[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改和删除同样使用这种方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据索引删除元素</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; size - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        array[i] = array[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    array[size - <span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改元素</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> index, Object newElement)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    array[index] = newElement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="断言的引入"><a href="#断言的引入" class="headerlink" title="断言的引入"></a>断言的引入</h2><p>上一次我们测试的时候写了一大堆的东西，将结果打印出来，我们通过肉眼来观察，这样测试是有一定风险的，</p><p>我们可以使用第三方的工具来辅助我们进行测试</p><p>这里我使用的是assertj</p><p>它的maven项目依赖为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.assertj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>assertj-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然可以选择更高版本的。</p><p>案例：</p><p>​    执行完删除元素“4”之后，断定sl打印出来的结果是否和[1，2，3]相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sl.delete(<span class="string">"4"</span>);</span><br><span class="line">    Assertions.assertThat(sl.toString()).isEqualTo(<span class="string">"[1,2,3]"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个方法返回值为boolean类型的话，那么我们可以断定它是真还是假</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Assertions.assertThat(sl.isRight()).isTrue();</span><br></pre></td></tr></table></figure><p>参考：<a href="https://testerhome.com/topics/4934" target="_blank" rel="noopener">断言的快速入门</a></p><p>​       <a href="https://assertj.github.io/doc/" target="_blank" rel="noopener">断言在github中的文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java语言实现线性表Ⅱ&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://FWj1635387072.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="DataStructure" scheme="https://FWj1635387072.github.io/tags/DataStructure/"/>
    
  </entry>
  
  <entry>
    <title>数据结构中的线性表（Java语言）</title>
    <link href="https://FWj1635387072.github.io/2019/11/08/%E5%88%97%E8%A1%A8/"/>
    <id>https://FWj1635387072.github.io/2019/11/08/列表/</id>
    <published>2019-11-08T14:22:24.720Z</published>
    <updated>2019-11-10T02:02:13.768Z</updated>
    
    <content type="html"><![CDATA[<p>Java语言实现列表</p><a id="more"></a><h2 id="线性表定义"><a href="#线性表定义" class="headerlink" title="线性表定义"></a>线性表定义</h2><p>​    线性表是由一组<strong>数据元素</strong>构成，数据元素的<strong>位置</strong>只取决于自己的<strong>序号</strong>，元素之间的<strong>相对位置</strong>是线性的。</p><p>在复杂线性表中，由若干项数据元素组成的数据元素称为<strong>记录</strong>；由多个记录构成的线性表称为<strong>文件</strong>。</p><h3 id="非空线性表的结构特征"><a href="#非空线性表的结构特征" class="headerlink" title="非空线性表的结构特征"></a>非空线性表的结构特征</h3><p>​    （1）且只有一个根结点a1，它无前件；</p><p>​    （2）有且只有一个终端结点an，它无后件；</p><p>​    （3）除根结点与终端结点外，其他所有结点有且只有一个前件，也有且只有一个后件。</p><p>​          结点个数n称为线性表的长度，当n=0时，称为空表。</p><h3 id="线性表的顺序存储结构两个基本特点"><a href="#线性表的顺序存储结构两个基本特点" class="headerlink" title="线性表的顺序存储结构两个基本特点"></a>线性表的顺序存储结构两个基本特点</h3><p>​    （1）线性表中所有元素所占的存储空间是连续的；</p><p>​    （2）线性表中各数据元素在存储空间中是按逻辑顺序依次存放的</p><h2 id="线性表用java语言实现"><a href="#线性表用java语言实现" class="headerlink" title="线性表用java语言实现"></a>线性表用java语言实现</h2><h3 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h3><p>​        定义接口，定义对线性表的一些操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线性表的接口定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyList</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(Object element)</span></span>;</span><br><span class="line">    <span class="comment">//删除元素</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Object element)</span></span>;</span><br><span class="line">    <span class="comment">//按索引删除元素</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="comment">//按照索引更新元素</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> index, Object newElement)</span></span>;</span><br><span class="line">    <span class="comment">//查询对象下标的元素</span></span><br><span class="line">    <span class="function">Object <span class="title">at</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="comment">//查询元素是否存在</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">contains</span><span class="params">(Object element)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、实现接口"><a href="#2、实现接口" class="headerlink" title="2、实现接口"></a>2、实现接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArrayList</span> <span class="keyword">implements</span> <span class="title">MyList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] array;<span class="comment">//列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;<span class="comment">//列表中的元素个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity = <span class="number">10</span>;<span class="comment">//列表中的容量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认的构造方法，创建一个长度为10的数组作为列表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        array = <span class="keyword">new</span> Object[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带参数的构造方法，创建一个长度为传入参数的数组作为列表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyArrayList</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        array = <span class="keyword">new</span> Object[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加元素，如果增加的元素个数超过数组长度，扩容一倍，扩容的大小可控</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(Object element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == capacity) &#123;</span><br><span class="line">            Object[] temp = <span class="keyword">new</span> Object[capacity * <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                temp[i] = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">            array = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        array[size++] = element;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除数组中已有的元素，调用了本类中的其他方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Object element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = contains(element);</span><br><span class="line">        System.out.println(<span class="string">"index"</span> +  res);</span><br><span class="line">        <span class="keyword">if</span> (res &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = res; i &lt; size - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                array[i] = array[i+<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            array[size - <span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据索引删除元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = index; i &lt; size - <span class="number">1</span>;i++)&#123;</span><br><span class="line">            array[i] = array[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        array[size - <span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">        size --;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> index, Object newElement)</span> </span>&#123;</span><br><span class="line">        array[index] = newElement;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询目标索引上的元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">at</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看数组中是否包含该元素，返回索引</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">contains</span><span class="params">(Object element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element.equals(array[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出，重写toString（）方法，需要一些技巧</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            sb.append(array[i] + (i == size - <span class="number">1</span> ? <span class="string">"]"</span> : <span class="string">" , "</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试用，返回数组的长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、创建Test类进行测试"><a href="#3、创建Test类进行测试" class="headerlink" title="3、创建Test类进行测试"></a>3、创建Test类进行测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArrayListTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyArrayList myArrayList = <span class="keyword">new</span> MyArrayList(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        myArrayList.add(<span class="string">"1"</span>);myArrayList.add(<span class="string">"2"</span>);myArrayList.add(<span class="string">"3"</span>);</span><br><span class="line">        myArrayList.add(<span class="string">"4"</span>);myArrayList.add(<span class="string">"5"</span>);myArrayList.add(<span class="string">"6"</span>);</span><br><span class="line">        myArrayList.add(<span class="string">"7"</span>);myArrayList.add(<span class="string">"8"</span>);myArrayList.add(<span class="string">"9"</span>);</span><br><span class="line">        myArrayList.add(<span class="string">"10"</span>);myArrayList.add(<span class="string">"11"</span>);myArrayList.add(<span class="string">"12"</span>);</span><br><span class="line">        myArrayList.add(<span class="string">"13"</span>);myArrayList.add(<span class="string">"14"</span>);myArrayList.add(<span class="string">"15"</span>);</span><br><span class="line">        myArrayList.add(<span class="string">"16"</span>);myArrayList.add(<span class="string">"17"</span>);myArrayList.add(<span class="string">"18"</span>);</span><br><span class="line">        myArrayList.add(<span class="string">"19"</span>);myArrayList.add(<span class="string">"20"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(myArrayList.at(<span class="number">0</span>));</span><br><span class="line">        System.out.println(myArrayList.getSize());</span><br><span class="line">        System.out.println(myArrayList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(myArrayList.getSize());</span><br><span class="line">        myArrayList.delete(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(myArrayList.getSize());</span><br><span class="line">        System.out.println(myArrayList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(myArrayList.getSize());</span><br><span class="line">        myArrayList.delete(<span class="number">10</span>);</span><br><span class="line">        System.out.println(myArrayList);</span><br><span class="line">        System.out.println(myArrayList.getSize());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        myArrayList.update(<span class="number">10</span>,<span class="string">"11111"</span>);</span><br><span class="line">        System.out.println(myArrayList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">at</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(myArrayList.at(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contains</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(myArrayList.contains(<span class="string">"14"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h3><ol><li><p>列表根据其基本特点我们确定用数组对其进行存储</p></li><li><p>定义数组后，由于对其操作时经常要使用其长度，定义size，<br> 为了使操作更加方便，便于了解其属性，我们使用capacity来定义其容量</p></li><li><p>增加元素时，如果元素个数超过了定义时给的容量，我们需要对列表进行扩容</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> (size == capacity) &#123;</span><br><span class="line">     Object[] temp = <span class="keyword">new</span> Object[capacity * <span class="number">2</span>];</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">         temp[i] = array[i];</span><br><span class="line">     &#125;</span><br><span class="line">     array = temp;</span><br><span class="line">&#125;</span><br><span class="line">array[size++] = element;</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>由于数组和线性表的特性，对其操作时，删除时需要将要删除元素之后的元素提前一位，最后一个元素设置为空。删除元素时我们可以</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Object element)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = contains(element);</span><br><span class="line">    delete(res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据索引删除元素</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = index; i &lt; size - <span class="number">1</span>;i++)&#123;</span><br><span class="line">        array[i] = array[i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    array[size - <span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>测试时我们要将数组打印出来，默认重写toString（）有时无法满足我们的需求，我们需要对其进行自定义</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        sb.append(array[i] + (i == size - <span class="number">1</span> ? <span class="string">"]"</span> : <span class="string">" , "</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li>测试时，使用junit一键生成测试类有利于我们进行测试</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java语言实现列表&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://FWj1635387072.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="DataStructure" scheme="https://FWj1635387072.github.io/tags/DataStructure/"/>
    
  </entry>
  
  <entry>
    <title>SQL Server 中与用户和用户权限相关的简单sql语句</title>
    <link href="https://FWj1635387072.github.io/2019/11/08/sql_server%E4%B8%AD%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/"/>
    <id>https://FWj1635387072.github.io/2019/11/08/sql_server中用户权限/</id>
    <published>2019-11-08T07:15:01.904Z</published>
    <updated>2019-11-08T09:04:40.851Z</updated>
    
    <content type="html"><![CDATA[<p>有关SQL server中的一些权限</p><a id="more"></a><h2 id="创建登陆名"><a href="#创建登陆名" class="headerlink" title="创建登陆名"></a>创建登陆名</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> LOGIN &lt;loginName&gt; <span class="keyword">WITH</span> <span class="keyword">PASSWORD</span> = <span class="string">'&lt;enterStrongPasswordHere&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--例子：创建一个登陆名是u1，密码是123456的用户</span></span><br><span class="line"><span class="comment">--登陆时选择：基于使用 SQL Server 身份验证的登录名的用户</span></span><br><span class="line"><span class="keyword">create</span> login u1 <span class="keyword">with</span> <span class="keyword">password</span> = <span class="string">'123456'</span></span><br></pre></td></tr></table></figure><h2 id="在一个数据库中创建用户"><a href="#在一个数据库中创建用户" class="headerlink" title="在一个数据库中创建用户"></a>在一个数据库中创建用户</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> user_name </span><br><span class="line">    [ </span><br><span class="line">        &#123; <span class="keyword">FOR</span> | <span class="keyword">FROM</span> &#125; LOGIN login_name </span><br><span class="line">    ]</span><br><span class="line">    [ <span class="keyword">WITH</span> DEFAULT_SCHEMA = schema_name ] </span><br><span class="line">[ ; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">--例子：在test1数据库中使用登陆名u1，创建一个u1用户</span></span><br><span class="line"><span class="comment">--注意，使用默认架构要用公开的架构，对于其他用户的架构，如果没有权限，是不能设置的。</span></span><br><span class="line"><span class="keyword">use</span> test1 </span><br><span class="line"><span class="keyword">go</span><span class="comment">--go只是SQL Server管理器（SSMS）中用来提交T-SQL语句的一个标志</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> u1<span class="comment">--具体解释可参考文章最后的链接</span></span><br><span class="line"><span class="keyword">from</span> login u1</span><br></pre></td></tr></table></figure><h2 id="创建架构"><a href="#创建架构" class="headerlink" title="创建架构"></a>创建架构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> &lt;schemaName&gt; AUTHORIZATION &lt;userName&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">--create schema &lt;schema&gt;,创建的架构默认为dbo用户创建</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">schema</span> sh1     </span><br><span class="line"></span><br><span class="line"><span class="comment">--在某个数据库中，使用userName该用户创建架构</span></span><br><span class="line"><span class="comment">--注意：拥有架构不一定可以在架构下建表，必须要有建表的权限</span></span><br><span class="line"><span class="comment">--例子：使用u1用户创建架构sh2，sh2架构是属于u1的</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">schema</span> sh2 <span class="comment">--创建sh2架构</span></span><br><span class="line">authorization u1<span class="comment">--架构的主人是u1</span></span><br></pre></td></tr></table></figure><hr><p>之前的工作均为准备工作，以下为权限管理</p><hr><h2 id="sql中的权限（非SQL-server）"><a href="#sql中的权限（非SQL-server）" class="headerlink" title="sql中的权限（非SQL server）"></a>sql中的权限（非SQL server）</h2><p>​    对象类型为<strong>数据库模式</strong>的权限：</p><table><thead><tr><th align="center">对象</th><th align="center">操作类型</th></tr></thead><tbody><tr><td align="center">模式</td><td align="center">create chema</td></tr><tr><td align="center">基本表</td><td align="center">create table   alter table</td></tr><tr><td align="center">视图</td><td align="center">create view</td></tr><tr><td align="center">索引</td><td align="center">create index</td></tr></tbody></table><p>​    对象类型为<strong>数据</strong>的权限</p><table><thead><tr><th align="center">对象</th><th align="center">操作类型</th></tr></thead><tbody><tr><td align="center">基本表和视图</td><td align="center"><strong>crud</strong>，references，all privileges</td></tr><tr><td align="center">属性列</td><td align="center"><strong>cru</strong>，references，all privileges</td></tr></tbody></table><h3 id="ps："><a href="#ps：" class="headerlink" title="ps："></a>ps：</h3><p><strong>crud</strong>是指在做计算处理时的增加(Create)、读取(Read)、更新(Update)和删除(Delete)几个单词的首字母简写。<strong>crud</strong>主要被用在描述软件系统中数据库或者持久层的基本操作功能</p><h2 id="授予与收回"><a href="#授予与收回" class="headerlink" title="授予与收回"></a>授予与收回</h2><h3 id="GRANT授予"><a href="#GRANT授予" class="headerlink" title="GRANT授予"></a>GRANT授予</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> &#123; <span class="keyword">ALL</span> [ <span class="keyword">PRIVILEGES</span> ] &#125;<span class="comment">--授予什么权限</span></span><br><span class="line">      | permission [ ( <span class="keyword">column</span> [ ,...n ] ) ] [ ,...n ]<span class="comment">--或者关于哪些列的许可</span></span><br><span class="line">      [ <span class="keyword">ON</span> [ <span class="keyword">class</span> :: ] securable ] <span class="comment">--关于哪个对象</span></span><br><span class="line">      <span class="keyword">TO</span> principal [ ,...n ]<span class="comment">--授予谁</span></span><br><span class="line">      [ <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span> ]<span class="comment">--是否可以转授</span></span><br><span class="line">      [ <span class="keyword">AS</span> principal ]<span class="comment">--作为什么</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--对于对象类型是数据库模式的权限，前提是自己拥有授权的权限</span></span><br><span class="line"><span class="comment">--将创建表的权限授予u1，其他权限类似</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">table</span> <span class="comment">--授予创建表的权限</span></span><br><span class="line"><span class="keyword">to</span> u1<span class="comment">--给u1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--对于对象类型是数据的权限</span></span><br><span class="line"><span class="comment">--将查询权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="comment">--授予查询权限</span></span><br><span class="line"><span class="keyword">on</span> student<span class="comment">--关于student表</span></span><br><span class="line"><span class="keyword">to</span> u1<span class="comment">--给用户u1</span></span><br><span class="line"><span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span><span class="comment">--可以转授</span></span><br></pre></td></tr></table></figure><h3 id="REVOKE收回"><a href="#REVOKE收回" class="headerlink" title="REVOKE收回"></a>REVOKE收回</h3><p>revoke的用法与grant用法基本一致（to 改为from），在此不再重复</p><h2 id="deny"><a href="#deny" class="headerlink" title="deny"></a>deny</h2><p>deny的用法与revoke的区别是：</p><p>​    revoke：收回之前被授予的权限</p><p>​    deny：拒绝给与该权限，即使该用户属于某个组，该组拥有该权限，该用户也没有该权限</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">ROLE</span> role_name </span><br><span class="line"></span><br><span class="line"><span class="comment">--创建teacher角色，并授予查询，增加，修改学生表的权限</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">role</span> teacher<span class="comment">--创建teacher角色</span></span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span><span class="comment">--授权</span></span><br><span class="line"><span class="keyword">on</span> student</span><br><span class="line"><span class="keyword">to</span> teacher</span><br><span class="line"></span><br><span class="line"><span class="comment">--将用户 Wanida 的 CONTROL 权限授予用户 RolandX。</span></span><br><span class="line"><span class="keyword">GRANT</span> CONTROL <span class="keyword">ON</span> <span class="keyword">USER</span>::Wanida <span class="keyword">TO</span> RolandX;</span><br><span class="line"></span><br><span class="line"><span class="comment">--例子：将teacher的所有权限授予u1</span></span><br><span class="line"><span class="keyword">grant</span> control <span class="keyword">on</span> <span class="keyword">role</span>::teacher <span class="keyword">to</span> t1</span><br></pre></td></tr></table></figure><p>角色是权限的集合，使用角色可以简化授权操作</p><p>友情链接：</p><p>​    <a href="https://blog.csdn.net/zhangqidashu/article/details/17250321" target="_blank" rel="noopener">SQL Server 中 GO 的用法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有关SQL server中的一些权限&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://FWj1635387072.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SQL server" scheme="https://FWj1635387072.github.io/tags/SQL-server/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客+这几天的学习内容</title>
    <link href="https://FWj1635387072.github.io/2019/11/07/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://FWj1635387072.github.io/2019/11/07/我的第一篇博客/</id>
    <published>2019-11-07T09:27:30.021Z</published>
    <updated>2019-11-07T12:42:28.300Z</updated>
    
    <content type="html"><![CDATA[<p>终于出来了.</p><a id="more"></a><p>以后学习记录就都放在这儿了.</p><p>Hexo + GitHub</p><p>总结下这几天 折腾这东西的想法: </p><h3 id="为什么我要建立这个博客"><a href="#为什么我要建立这个博客" class="headerlink" title="为什么我要建立这个博客."></a>为什么我要建立这个博客.</h3><ul><li>前几天突然想了解一下GitHub是什么东西, 然后找资料,发现他是”男性同性交友平台+开源软件社区”, 它成功的把我给吸引了.之后了解到了它下面的GitHub  Page项目, 我入迷了. 突然就有了建立自己的一片天地的念头, 之后就有了这个博客(虽然有点丑,直男审美没办法).</li><li>现在还有一点小问题没有处理掉（改配置，底层语法有点看不懂，还有插件不兼容）<ul><li>博客背景音乐</li><li>博客点击量统计</li><li>博客浏览人数统计 </li><li>评论留言</li></ul></li></ul><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><ul><li>在了解GitHub的途中, 知道了Git是目前世界上最先进的分布式版本控制系统（没有之一）. 当然我把它理解成远程协作常用的一个插件,  多人协同完成项目时常用, 很像之前接触的svn,但是比svn强大的多.</li></ul><ul><li><p>Git的工作流程</p><ul><li><p><img src="https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=115403806,2826593896&fm=173&app=49&f=JPEG?w=640&h=189&s=E1924D30ACA049131CD5CDC60300D0F0" alt="img"></p></li><li><p>workspace指代自己电脑上的工作目录</p></li><li><p>index为暂存区</p></li><li><p>repository为当前的工作区,我把它理解成缓存区</p></li><li><p>remote为git的远程服务器</p></li></ul></li></ul><ul><li><p>Git的几个命令在这里也总结一下</p><ol><li><p>git  clone           顾名思义,克隆,将GitHub中 的repository(仓库)克隆到本地的workspace中.</p></li><li><p>git  add              将本地电脑上的文件(变化的)添加到暂存区</p></li><li><p>git  commit  -m “msg”      </p><p> ​                -m 给提交增加备注 引号中的为备注信息, 将暂存区的文件提交到 缓存区中</p></li><li><p>git push            将缓存区的文件提交到远程服务器</p></li><li><p>git checkout  branchName                      切换分支</p></li><li><p>git pull                将远程服务器上的文件更新至本地</p></li><li><p>git  merge           合并分支</p></li></ol></li></ul><ul><li><p>hexo初始化的几个命令</p><ol><li><p>npm  install -g  hexo-cli                      加载程序</p></li><li><p>hexo init  文件夹名                               创建一个初始化的hexo</p></li><li><p>hexo  new   文件名                                创建一个文件，默认使用文章的标题决定文章的路径</p></li></ol></li></ul><ul><li><p>hexo的几个常用命令</p><ol><li>hexo clean                       清除缓存</li><li>hexo  g                                                  更新缓存（增加文件，或者修改文件后）</li><li>hexo s -p  端口号                                 打开本地服务器，可以在本地通过localhost：端口号进行访问</li><li>hexo  d                                                  上传hexo文件到绑定的GitHub仓库中</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于出来了.&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://FWj1635387072.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="笔记" scheme="https://FWj1635387072.github.io/categories/%E9%9A%8F%E7%AC%94/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://FWj1635387072.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="日常" scheme="https://FWj1635387072.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
      <category term="git+hexo" scheme="https://FWj1635387072.github.io/tags/git-hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://FWj1635387072.github.io/2019/11/06/hello-world/"/>
    <id>https://FWj1635387072.github.io/2019/11/06/hello-world/</id>
    <published>2019-11-06T13:06:13.175Z</published>
    <updated>2019-11-07T09:23:53.432Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="hello-hexo"><a href="#hello-hexo" class="headerlink" title="hello  hexo"></a>hello  hexo</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
